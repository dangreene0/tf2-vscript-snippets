{
	///// BEGIN TF2 VScript Snippets /////
	"AGGRESSIVE": {
		"prefix": "AGGRESSIVE",
		"body": [
			"AGGRESSIVE$0"
		],
		"description": "2"
	},
	"AIR_CHARGE_ONLY": {
		"prefix": "AIR_CHARGE_ONLY",
		"body": [
			"AIR_CHARGE_ONLY$0"
		],
		"description": "524288"
	},
	"ALL_VISIBLE_CONTENTS": {
		"prefix": "ALL_VISIBLE_CONTENTS",
		"body": [
			"ALL_VISIBLE_CONTENTS$0"
		],
		"description": "255"
	},
	"ALWAYS_CRIT": {
		"prefix": "ALWAYS_CRIT",
		"body": [
			"ALWAYS_CRIT$0"
		],
		"description": "512"
	},
	"ALWAYS_FIRE_WEAPON": {
		"prefix": "ALWAYS_FIRE_WEAPON",
		"body": [
			"ALWAYS_FIRE_WEAPON$0"
		],
		"description": "8192"
	},
	"AUTO_JUMP": {
		"prefix": "AUTO_JUMP",
		"body": [
			"AUTO_JUMP$0"
		],
		"description": "262144"
	},
	"void AddAttribute(string name, float value, float duration)": {
		"prefix": "AddAttribute",
		"body": [
			"AddAttribute(${1:string name}, ${2:float value}, ${3:float duration})$0"
		],
		"description": "Add an attribute to the entity. Set duration to -1 for the attribute to be applied forever."
	},
	"void AddBotAttribute(int attribute)": {
		"prefix": "AddBotAttribute",
		"body": [
			"AddBotAttribute(${1:int attribute})$0"
		],
		"description": "Sets attribute flags on this TFBot"
	},
	"void AddBotTag(string tag)": {
		"prefix": "AddBotTag",
		"body": [
			"AddBotTag(${1:string tag})$0"
		],
		"description": "Adds a bot tag"
	},
	"void AddBroadcastTeamTarget(int index)": {
		"prefix": "AddBroadcastTeamTarget",
		"body": [
			"AddBroadcastTeamTarget(${1:int index})$0"
		],
		"description": "Adds a team (by index) to the broadcast list"
	},
	"void AddCond(ETFCond cond)": {
		"prefix": "AddCond",
		"body": [
			"AddCond(${1:ETFCond cond})$0"
		],
		"description": ""
	},
	"void AddCondEx(ETFCond cond, float duration, handle provider)": {
		"prefix": "AddCondEx",
		"body": [
			"AddCondEx(${1:ETFCond cond}, ${2:float duration}, ${3:handle provider})$0"
		],
		"description": ""
	},
	"void AddCurrency(int amount)": {
		"prefix": "AddCurrency",
		"body": [
			"AddCurrency(${1:int amount})$0"
		],
		"description": "Kaching! Give the player some cash for game modes with upgrades, ie. MvM"
	},
	"void AddCustomAttribute(string name, float value, float duration)": {
		"prefix": "AddCustomAttribute",
		"body": [
			"AddCustomAttribute(${1:string name}, ${2:float value}, ${3:float duration})$0"
		],
		"description": "Add a custom attribute to the player. Set duration to -1 for the attribute to be applied forever."
	},
	"void AddEFlags(int flags)": {
		"prefix": "AddEFlags",
		"body": [
			"AddEFlags(${1:int flags})$0"
		],
		"description": "Adds the supplied flags to the Entity Flags in the entity. (m_iEFlags datamap). See Constants.FEntityEFlags."
	},
	"void AddFlag(int flags)": {
		"prefix": "AddFlag",
		"body": [
			"AddFlag(${1:int flags})$0"
		],
		"description": "Adds the supplied flags to another separate player-related entity flags system in the entity. (m_fFlags datamap). See Constants.FPlayer."
	},
	"void AddHudHideFlags(int flags)": {
		"prefix": "AddHudHideFlags",
		"body": [
			"AddHudHideFlags(${1:int flags})$0"
		],
		"description": "Hides a hud element based on Constants.FHideHUD"
	},
	"void AddIncomingConnection(handle area, int dir)": {
		"prefix": "AddIncomingConnection",
		"body": [
			"AddIncomingConnection(${1:handle area}, ${2:int dir})$0"
		],
		"description": "Add areas that connect TO this area by a ONE-WAY link"
	},
	"void AddOutput(handle entity, string outputName, string targetName, string inputName, string parameter, float delay, int timesToFire)": {
		"prefix": "AddOutput",
		"body": [
			"AddOutput(${1:handle entity}, ${2:string outputName}, ${3:string targetName}, ${4:string inputName}, ${5:string parameter}, ${6:float delay}, ${7:int timesToFire})$0"
		],
		"description": "Adds a new output to the entity."
	},
	"void AddSolidFlags(int flags)": {
		"prefix": "AddSolidFlags",
		"body": [
			"AddSolidFlags(${1:int flags})$0"
		],
		"description": "Adds the supplied flags to the Solid Flags in the entity. (m_Collision.m_usSolidFlags datamap). See Constants.FSolid."
	},
	"void AddTemplate(string, table)": {
		"prefix": "AddTemplate",
		"body": [
			"AddTemplate(${1:string}, ${2:table})$0"
		],
		"description": "Add an entity to the template spawner"
	},
	"void AddThinkToEnt(handle entity, string FuncName)": {
		"prefix": "AddThinkToEnt",
		"body": [
			"AddThinkToEnt(${1:handle entity}, ${2:string FuncName})$0"
		],
		"description": "Sets a function in the entity's script to rerun by itself constantly. Pass null as the function name to remove a think function. The default think interval is 0.1s, unless overridden by returning a different time interval in seconds in the think function"
	},
	"AddToScriptHelp()": {
		"prefix": "AddToScriptHelp",
		"body": [
			"AddToScriptHelp()$0"
		],
		"description": ""
	},
	"void AddWeaponRestriction(int flags)": {
		"prefix": "AddWeaponRestriction",
		"body": [
			"AddWeaponRestriction(${1:int flags})$0"
		],
		"description": "Adds weapon restriction flags"
	},
	"bool AllowThirdPersonCamera()": {
		"prefix": "AllowThirdPersonCamera",
		"body": [
			"AllowThirdPersonCamera()$0"
		],
		"description": ""
	},
	"void ApplyAbsVelocityImpulse(Vector impulse)": {
		"prefix": "ApplyAbsVelocityImpulse",
		"body": [
			"ApplyAbsVelocityImpulse(${1:Vector impulse})$0"
		],
		"description": "Apply a Velocity Impulse as a world space impulse vector. Works for most physics-based objects including dropped weapons and even dropped Sandviches."
	},
	"void ApplyLocalAngularVelocityImpulse(Vector impulse)": {
		"prefix": "ApplyLocalAngularVelocityImpulse",
		"body": [
			"ApplyLocalAngularVelocityImpulse(${1:Vector impulse})$0"
		],
		"description": "Apply an Angular Velocity Impulse in entity local space. The direction of the input vector is the rotation axis, and the length is the magnitude of the impulse."
	},
	"bool ApplyPunchImpulseX(float impulse)": {
		"prefix": "ApplyPunchImpulseX",
		"body": [
			"ApplyPunchImpulseX(${1:float impulse})$0"
		],
		"description": "Apply a view punch along the pitch angle. Used to flinch players when hit. If the player is a fully charged scoped-in sniper and the weapon has the aiming_no_flinch attribute, the punch will not apply. Returns true if the punch was applied."
	},
	"void Approach(Vector goal, float goalWeight)": {
		"prefix": "Approach",
		"body": [
			"Approach(${1:Vector goal}, ${2:float goalWeight})$0"
		],
		"description": "The primary locomotive method. Goal determines the destination position to move towards. goalWeight determines the priority of this path, you can set this to 1.0 generally speaking."
	},
	"bool ArePlayersInHell()": {
		"prefix": "ArePlayersInHell",
		"body": [
			"ArePlayersInHell()$0"
		],
		"description": ""
	},
	"void Assert(bool value, string optional_message)": {
		"prefix": "Assert",
		"body": [
			"Assert(${1:bool value}, ${2:string optional_message})$0"
		],
		"description": "Test value and if not true, throws exception, optionally with message."
	},
	"BACKWARD": {
		"prefix": "BACKWARD",
		"body": [
			"BACKWARD$0"
		],
		"description": "2"
	},
	"BECOME_SPECTATOR_ON_DEATH": {
		"prefix": "BECOME_SPECTATOR_ON_DEATH",
		"body": [
			"BECOME_SPECTATOR_ON_DEATH$0"
		],
		"description": "32"
	},
	"BLAST_IMMUNE": {
		"prefix": "BLAST_IMMUNE",
		"body": [
			"BLAST_IMMUNE$0"
		],
		"description": "16777216"
	},
	"BULLET_IMMUNE": {
		"prefix": "BULLET_IMMUNE",
		"body": [
			"BULLET_IMMUNE$0"
		],
		"description": "8388608"
	},
	"bool BecomeRagdollOnClient(Vector impulse)": {
		"prefix": "BecomeRagdollOnClient",
		"body": [
			"BecomeRagdollOnClient(${1:Vector impulse})$0"
		],
		"description": "Acts like the BecomeRagdoll input, with the required impulse value applied as a force on the ragdoll. Does NOT spawn a prop_ragdoll or any other entity."
	},
	"Begin()": {
		"prefix": "Begin",
		"body": [
			"Begin()$0"
		],
		"description": ""
	},
	"void BeginScriptDebug()": {
		"prefix": "BeginScriptDebug",
		"body": [
			"BeginScriptDebug()$0"
		],
		"description": ""
	},
	"void BleedPlayer(float duration)": {
		"prefix": "BleedPlayer",
		"body": [
			"BleedPlayer(${1:float duration})$0"
		],
		"description": "Make a player bleed for a set duration of time."
	},
	"void BleedPlayerEx(float duration, int damage, bool endless, int nCustomDamageType)": {
		"prefix": "BleedPlayerEx",
		"body": [
			"BleedPlayerEx(${1:float duration}, ${2:int damage}, ${3:bool endless}, ${4:int nCustomDamageType})$0"
		],
		"description": "Make a player bleed for a set duration of time, or forever, with specific damage per tick and damage_custom index."
	},
	"CCallChainer(string functionPrefix, table scope = null)": {
		"prefix": "CCallChainer",
		"body": [
			"CCallChainer(${1:string functionPrefix}, ${2:table scope = null})$0"
		],
		"description": "Creates a CCallChainer object that'll collect functions that have a matching prefix in the given scope."
	},
	"COLLISION_GROUP_BREAKABLE_GLASS": {
		"prefix": "COLLISION_GROUP_BREAKABLE_GLASS",
		"body": [
			"COLLISION_GROUP_BREAKABLE_GLASS$0"
		],
		"description": "6"
	},
	"COLLISION_GROUP_DEBRIS": {
		"prefix": "COLLISION_GROUP_DEBRIS",
		"body": [
			"COLLISION_GROUP_DEBRIS$0"
		],
		"description": "1"
	},
	"COLLISION_GROUP_DEBRIS_TRIGGER": {
		"prefix": "COLLISION_GROUP_DEBRIS_TRIGGER",
		"body": [
			"COLLISION_GROUP_DEBRIS_TRIGGER$0"
		],
		"description": "2"
	},
	"COLLISION_GROUP_DISSOLVING": {
		"prefix": "COLLISION_GROUP_DISSOLVING",
		"body": [
			"COLLISION_GROUP_DISSOLVING$0"
		],
		"description": "16"
	},
	"COLLISION_GROUP_DOOR_BLOCKER": {
		"prefix": "COLLISION_GROUP_DOOR_BLOCKER",
		"body": [
			"COLLISION_GROUP_DOOR_BLOCKER$0"
		],
		"description": "14"
	},
	"COLLISION_GROUP_INTERACTIVE": {
		"prefix": "COLLISION_GROUP_INTERACTIVE",
		"body": [
			"COLLISION_GROUP_INTERACTIVE$0"
		],
		"description": "4"
	},
	"COLLISION_GROUP_INTERACTIVE_DEBRIS": {
		"prefix": "COLLISION_GROUP_INTERACTIVE_DEBRIS",
		"body": [
			"COLLISION_GROUP_INTERACTIVE_DEBRIS$0"
		],
		"description": "3"
	},
	"COLLISION_GROUP_IN_VEHICLE": {
		"prefix": "COLLISION_GROUP_IN_VEHICLE",
		"body": [
			"COLLISION_GROUP_IN_VEHICLE$0"
		],
		"description": "10"
	},
	"COLLISION_GROUP_NONE": {
		"prefix": "COLLISION_GROUP_NONE",
		"body": [
			"COLLISION_GROUP_NONE$0"
		],
		"description": "0"
	},
	"COLLISION_GROUP_NPC": {
		"prefix": "COLLISION_GROUP_NPC",
		"body": [
			"COLLISION_GROUP_NPC$0"
		],
		"description": "9"
	},
	"COLLISION_GROUP_NPC_ACTOR": {
		"prefix": "COLLISION_GROUP_NPC_ACTOR",
		"body": [
			"COLLISION_GROUP_NPC_ACTOR$0"
		],
		"description": "18"
	},
	"COLLISION_GROUP_NPC_SCRIPTED": {
		"prefix": "COLLISION_GROUP_NPC_SCRIPTED",
		"body": [
			"COLLISION_GROUP_NPC_SCRIPTED$0"
		],
		"description": "19"
	},
	"COLLISION_GROUP_PASSABLE_DOOR": {
		"prefix": "COLLISION_GROUP_PASSABLE_DOOR",
		"body": [
			"COLLISION_GROUP_PASSABLE_DOOR$0"
		],
		"description": "15"
	},
	"COLLISION_GROUP_PLAYER": {
		"prefix": "COLLISION_GROUP_PLAYER",
		"body": [
			"COLLISION_GROUP_PLAYER$0"
		],
		"description": "5"
	},
	"COLLISION_GROUP_PLAYER_MOVEMENT": {
		"prefix": "COLLISION_GROUP_PLAYER_MOVEMENT",
		"body": [
			"COLLISION_GROUP_PLAYER_MOVEMENT$0"
		],
		"description": "8"
	},
	"COLLISION_GROUP_PROJECTILE": {
		"prefix": "COLLISION_GROUP_PROJECTILE",
		"body": [
			"COLLISION_GROUP_PROJECTILE$0"
		],
		"description": "13"
	},
	"COLLISION_GROUP_PUSHAWAY": {
		"prefix": "COLLISION_GROUP_PUSHAWAY",
		"body": [
			"COLLISION_GROUP_PUSHAWAY$0"
		],
		"description": "17"
	},
	"COLLISION_GROUP_VEHICLE": {
		"prefix": "COLLISION_GROUP_VEHICLE",
		"body": [
			"COLLISION_GROUP_VEHICLE$0"
		],
		"description": "7"
	},
	"COLLISION_GROUP_VEHICLE_CLIP": {
		"prefix": "COLLISION_GROUP_VEHICLE_CLIP",
		"body": [
			"COLLISION_GROUP_VEHICLE_CLIP$0"
		],
		"description": "12"
	},
	"COLLISION_GROUP_WEAPON": {
		"prefix": "COLLISION_GROUP_WEAPON",
		"body": [
			"COLLISION_GROUP_WEAPON$0"
		],
		"description": "11"
	},
	"CONTENTS_AREAPORTAL": {
		"prefix": "CONTENTS_AREAPORTAL",
		"body": [
			"CONTENTS_AREAPORTAL$0"
		],
		"description": "32768"
	},
	"CONTENTS_AUX": {
		"prefix": "CONTENTS_AUX",
		"body": [
			"CONTENTS_AUX$0"
		],
		"description": "4"
	},
	"CONTENTS_BLOCKLOS": {
		"prefix": "CONTENTS_BLOCKLOS",
		"body": [
			"CONTENTS_BLOCKLOS$0"
		],
		"description": "64"
	},
	"CONTENTS_CURRENT_0": {
		"prefix": "CONTENTS_CURRENT_0",
		"body": [
			"CONTENTS_CURRENT_0$0"
		],
		"description": "262144"
	},
	"CONTENTS_CURRENT_180": {
		"prefix": "CONTENTS_CURRENT_180",
		"body": [
			"CONTENTS_CURRENT_180$0"
		],
		"description": "1048576"
	},
	"CONTENTS_CURRENT_270": {
		"prefix": "CONTENTS_CURRENT_270",
		"body": [
			"CONTENTS_CURRENT_270$0"
		],
		"description": "2097152"
	},
	"CONTENTS_CURRENT_90": {
		"prefix": "CONTENTS_CURRENT_90",
		"body": [
			"CONTENTS_CURRENT_90$0"
		],
		"description": "524288"
	},
	"CONTENTS_CURRENT_DOWN": {
		"prefix": "CONTENTS_CURRENT_DOWN",
		"body": [
			"CONTENTS_CURRENT_DOWN$0"
		],
		"description": "8388608"
	},
	"CONTENTS_CURRENT_UP": {
		"prefix": "CONTENTS_CURRENT_UP",
		"body": [
			"CONTENTS_CURRENT_UP$0"
		],
		"description": "4194304"
	},
	"CONTENTS_DEBRIS": {
		"prefix": "CONTENTS_DEBRIS",
		"body": [
			"CONTENTS_DEBRIS$0"
		],
		"description": "67108864"
	},
	"CONTENTS_DETAIL": {
		"prefix": "CONTENTS_DETAIL",
		"body": [
			"CONTENTS_DETAIL$0"
		],
		"description": "134217728"
	},
	"CONTENTS_EMPTY": {
		"prefix": "CONTENTS_EMPTY",
		"body": [
			"CONTENTS_EMPTY$0"
		],
		"description": "0"
	},
	"CONTENTS_GRATE": {
		"prefix": "CONTENTS_GRATE",
		"body": [
			"CONTENTS_GRATE$0"
		],
		"description": "8"
	},
	"CONTENTS_HITBOX": {
		"prefix": "CONTENTS_HITBOX",
		"body": [
			"CONTENTS_HITBOX$0"
		],
		"description": "1073741824"
	},
	"CONTENTS_IGNORE_NODRAW_OPAQUE": {
		"prefix": "CONTENTS_IGNORE_NODRAW_OPAQUE",
		"body": [
			"CONTENTS_IGNORE_NODRAW_OPAQUE$0"
		],
		"description": "8192"
	},
	"CONTENTS_LADDER": {
		"prefix": "CONTENTS_LADDER",
		"body": [
			"CONTENTS_LADDER$0"
		],
		"description": "536870912"
	},
	"CONTENTS_MONSTER": {
		"prefix": "CONTENTS_MONSTER",
		"body": [
			"CONTENTS_MONSTER$0"
		],
		"description": "33554432"
	},
	"CONTENTS_MONSTERCLIP": {
		"prefix": "CONTENTS_MONSTERCLIP",
		"body": [
			"CONTENTS_MONSTERCLIP$0"
		],
		"description": "131072"
	},
	"CONTENTS_MOVEABLE": {
		"prefix": "CONTENTS_MOVEABLE",
		"body": [
			"CONTENTS_MOVEABLE$0"
		],
		"description": "16384"
	},
	"CONTENTS_OPAQUE": {
		"prefix": "CONTENTS_OPAQUE",
		"body": [
			"CONTENTS_OPAQUE$0"
		],
		"description": "128"
	},
	"CONTENTS_ORIGIN": {
		"prefix": "CONTENTS_ORIGIN",
		"body": [
			"CONTENTS_ORIGIN$0"
		],
		"description": "16777216"
	},
	"CONTENTS_PLAYERCLIP": {
		"prefix": "CONTENTS_PLAYERCLIP",
		"body": [
			"CONTENTS_PLAYERCLIP$0"
		],
		"description": "65536"
	},
	"CONTENTS_SLIME": {
		"prefix": "CONTENTS_SLIME",
		"body": [
			"CONTENTS_SLIME$0"
		],
		"description": "16"
	},
	"CONTENTS_SOLID": {
		"prefix": "CONTENTS_SOLID",
		"body": [
			"CONTENTS_SOLID$0"
		],
		"description": "1"
	},
	"CONTENTS_TEAM1": {
		"prefix": "CONTENTS_TEAM1",
		"body": [
			"CONTENTS_TEAM1$0"
		],
		"description": "2048"
	},
	"CONTENTS_TEAM2": {
		"prefix": "CONTENTS_TEAM2",
		"body": [
			"CONTENTS_TEAM2$0"
		],
		"description": "4096"
	},
	"CONTENTS_TESTFOGVOLUME": {
		"prefix": "CONTENTS_TESTFOGVOLUME",
		"body": [
			"CONTENTS_TESTFOGVOLUME$0"
		],
		"description": "256"
	},
	"CONTENTS_TRANSLUCENT": {
		"prefix": "CONTENTS_TRANSLUCENT",
		"body": [
			"CONTENTS_TRANSLUCENT$0"
		],
		"description": "268435456"
	},
	"CONTENTS_UNUSED": {
		"prefix": "CONTENTS_UNUSED",
		"body": [
			"CONTENTS_UNUSED$0"
		],
		"description": "512"
	},
	"CONTENTS_UNUSED6": {
		"prefix": "CONTENTS_UNUSED6",
		"body": [
			"CONTENTS_UNUSED6$0"
		],
		"description": "1024"
	},
	"CONTENTS_WATER": {
		"prefix": "CONTENTS_WATER",
		"body": [
			"CONTENTS_WATER$0"
		],
		"description": "32"
	},
	"CONTENTS_WINDOW": {
		"prefix": "CONTENTS_WINDOW",
		"body": [
			"CONTENTS_WINDOW$0"
		],
		"description": "2"
	},
	"CRIT_FULL": {
		"prefix": "CRIT_FULL",
		"body": [
			"CRIT_FULL$0"
		],
		"description": "2"
	},
	"CRIT_MINI": {
		"prefix": "CRIT_MINI",
		"body": [
			"CRIT_MINI$0"
		],
		"description": "1"
	},
	"CRIT_NONE": {
		"prefix": "CRIT_NONE",
		"body": [
			"CRIT_NONE$0"
		],
		"description": "0"
	},
	"CSimpleCallChainer(string functionPrefix, table scope = null, exactMatch = false)": {
		"prefix": "CSimpleCallChainer",
		"body": [
			"CSimpleCallChainer(${1:string functionPrefix}, ${2:table scope = null}, ${3:exactMatch = false})$0"
		],
		"description": "Creates a CSimpleCallChainer object that'll collect functions that have a matching prefix in the given scope, unless it seek for an exact name match."
	},
	"bool Call(any ...)": {
		"prefix": "Call",
		"body": [
			"Call(${1:any ...})$0"
		],
		"description": "Call all functions inside the chain array with the given arguments."
	},
	"bool CanAirDash()": {
		"prefix": "CanAirDash",
		"body": [
			"CanAirDash()$0"
		],
		"description": "Can the player air dash/double jump?"
	},
	"bool CanBeDebuffed()": {
		"prefix": "CanBeDebuffed",
		"body": [
			"CanBeDebuffed()$0"
		],
		"description": ""
	},
	"bool CanBeSelected()": {
		"prefix": "CanBeSelected",
		"body": [
			"CanBeSelected()$0"
		],
		"description": "Can this weapon be selected"
	},
	"bool CanBreatheUnderwater()": {
		"prefix": "CanBreatheUnderwater",
		"body": [
			"CanBreatheUnderwater()$0"
		],
		"description": ""
	},
	"bool CanDuck()": {
		"prefix": "CanDuck",
		"body": [
			"CanDuck()$0"
		],
		"description": "Can the player duck?"
	},
	"bool CanGetWet()": {
		"prefix": "CanGetWet",
		"body": [
			"CanGetWet()$0"
		],
		"description": "Can the player get wet by jarate/milk?"
	},
	"bool CanJump()": {
		"prefix": "CanJump",
		"body": [
			"CanJump()$0"
		],
		"description": "Can the player jump?"
	},
	"bool CanPlayerMove()": {
		"prefix": "CanPlayerMove",
		"body": [
			"CanPlayerMove()$0"
		],
		"description": "Can the player move?"
	},
	"void CancelTaunt()": {
		"prefix": "CancelTaunt",
		"body": [
			"CancelTaunt()$0"
		],
		"description": "Cancels any taunt in progress"
	},
	"void ClearAllBotAttributes()": {
		"prefix": "ClearAllBotAttributes",
		"body": [
			"ClearAllBotAttributes()$0"
		],
		"description": "Clears all attribute flags on this TFBot"
	},
	"void ClearAllBotTags()": {
		"prefix": "ClearAllBotTags",
		"body": [
			"ClearAllBotTags()$0"
		],
		"description": "Clears bot tags"
	},
	"void ClearAllWeaponRestrictions()": {
		"prefix": "ClearAllWeaponRestrictions",
		"body": [
			"ClearAllWeaponRestrictions()$0"
		],
		"description": "Removes all weapon restriction flags"
	},
	"void ClearAttentionFocus()": {
		"prefix": "ClearAttentionFocus",
		"body": [
			"ClearAttentionFocus()$0"
		],
		"description": "Clear current focus"
	},
	"void ClearAttributeTF(int bits)": {
		"prefix": "ClearAttributeTF",
		"body": [
			"ClearAttributeTF(${1:int bits})$0"
		],
		"description": "Clear TF-specific area attribute bits."
	},
	"void ClearCustomModelRotation()": {
		"prefix": "ClearCustomModelRotation",
		"body": [
			"ClearCustomModelRotation()$0"
		],
		"description": ""
	},
	"void ClearFlags()": {
		"prefix": "ClearFlags",
		"body": [
			"ClearFlags()$0"
		],
		"description": "Sets the player-related entity flags to 0 on an entity, clearing them."
	},
	"void ClearGameEventCallbacks()": {
		"prefix": "ClearGameEventCallbacks",
		"body": [
			"ClearGameEventCallbacks()$0"
		],
		"description": "Empties the tables of game event callback functions."
	},
	"void ClearImmobileStatus()": {
		"prefix": "ClearImmobileStatus",
		"body": [
			"ClearImmobileStatus()$0"
		],
		"description": "Clear immobile status"
	},
	"void ClearSolidFlags()": {
		"prefix": "ClearSolidFlags",
		"body": [
			"ClearSolidFlags()$0"
		],
		"description": "Sets Solid Flags to 0 on an entity, clearing them."
	},
	"void ClearSpells()": {
		"prefix": "ClearSpells",
		"body": [
			"ClearSpells()$0"
		],
		"description": ""
	},
	"void ClearStuckStatus(string reason)": {
		"prefix": "ClearStuckStatus",
		"body": [
			"ClearStuckStatus(${1:string reason})$0"
		],
		"description": "Reset stuck status to un-stuck. Reason message is shown when debugging nextbots."
	},
	"void ClearTauntAttack()": {
		"prefix": "ClearTauntAttack",
		"body": [
			"ClearTauntAttack()$0"
		],
		"description": "Stops active taunt from damaging or cancels Rock-Paper-Scissors result"
	},
	"void ClientPrint(CBasePlayer player, EHudNotify destination, string message)": {
		"prefix": "ClientPrint",
		"body": [
			"ClientPrint(${1:CBasePlayer player}, ${2:EHudNotify destination}, ${3:string message})$0"
		],
		"description": "Print a client message. If you pass null instead of a valid player, the message will be sent to all clients. When printing to chat (HUD_PRINTTALK), the color of the text can be changed by inserting this sequence: \\x07RRGGBB where RR GG BB is the hexadecimal format of the color. Transparency can be specified by a different sequence: \\x08RRGGBBAA, where RR GG BB AA is the hexadecimal format of the color + alpha. All text following this sequence will be colored. Multiple sequences can be used in combination. If using color sequences, there MUST be a color sequence at the beginning of the string, or color codes won't work!."
	},
	"bool ClimbUpToLedge(Vector goalPos, vector goalForward, handle obstacle)": {
		"prefix": "ClimbUpToLedge",
		"body": [
			"ClimbUpToLedge(${1:Vector goalPos}, ${2:vector goalForward}, ${3:handle obstacle})$0"
		],
		"description": "Initiate a jump to an adjacent high ledge, return false if climb can't start"
	},
	"int Clip1()": {
		"prefix": "Clip1",
		"body": [
			"Clip1()$0"
		],
		"description": "Current ammo in clip1"
	},
	"int Clip2()": {
		"prefix": "Clip2",
		"body": [
			"Clip2()$0"
		],
		"description": "Current ammo in clip2"
	},
	"Vector ComputeClosestPointInPortal(handle to, ENavDirType dir, Vector closePos)": {
		"prefix": "ComputeClosestPointInPortal",
		"body": [
			"ComputeClosestPointInPortal(${1:handle to}, ${2:ENavDirType dir}, ${3:Vector closePos})$0"
		],
		"description": "Compute closest point within the portal between to adjacent areas."
	},
	"int ComputeDirection(Vector point)": {
		"prefix": "ComputeDirection",
		"body": [
			"ComputeDirection(${1:Vector point})$0"
		],
		"description": "Return direction from this area to the given point."
	},
	"bool ComputeUpdateInterval()": {
		"prefix": "ComputeUpdateInterval",
		"body": [
			"ComputeUpdateInterval()$0"
		],
		"description": "Recomputes the component update interval"
	},
	"void ConnectOutput(string output, string function)": {
		"prefix": "ConnectOutput",
		"body": [
			"ConnectOutput(${1:string output}, ${2:string function})$0"
		],
		"description": "Adds an I/O connection that will call the named function when the specified output fires."
	},
	"void ConnectTo(handle area, int dir)": {
		"prefix": "ConnectTo",
		"body": [
			"ConnectTo(${1:handle area}, ${2:int dir})$0"
		],
		"description": "Connect this area to given area in given direction."
	},
	"ConstantNamingConvention": {
		"prefix": "ConstantNamingConvention",
		"body": [
			"ConstantNamingConvention$0"
		],
		"description": "Constants are named as follows: F -> flags, E -> enums, (nothing) -> random values/constants"
	},
	"Constants": {
		"prefix": "Constants",
		"body": [
			"Constants$0"
		],
		"description": "Enumerations for various function arguments or netprops."
	},
	"bool Contains(handle area)": {
		"prefix": "Contains",
		"body": [
			"Contains(${1:handle area})$0"
		],
		"description": "Return true if other area is on or above this area, but no others."
	},
	"bool ContainsOrigin(Vector point)": {
		"prefix": "ContainsOrigin",
		"body": [
			"ContainsOrigin(${1:Vector point})$0"
		],
		"description": "Return true if given point is on or above this area, but no others."
	},
	"handle CreateByClassname(string classname)": {
		"prefix": "CreateByClassname",
		"body": [
			"CreateByClassname(${1:string classname})$0"
		],
		"description": "Creates an entity by classname"
	},
	"handle CreateProp(string classname, Vector origin, string model_name, int activity)": {
		"prefix": "CreateProp",
		"body": [
			"CreateProp(${1:string classname}, ${2:Vector origin}, ${3:string model_name}, ${4:int activity})$0"
		],
		"description": "Create a prop"
	},
	"handle CreateSceneEntity(string scene)": {
		"prefix": "CreateSceneEntity",
		"body": [
			"CreateSceneEntity(${1:string scene})$0"
		],
		"description": "Create a scene entity to play the specified scene."
	},
	"float Cross(Vector factor)": {
		"prefix": "Cross",
		"body": [
			"Cross(${1:Vector factor})$0"
		],
		"description": "The vector product of two vectors. Returns a vector orthogonal to the input vectors."
	},
	"DISABLE_DODGE": {
		"prefix": "DISABLE_DODGE",
		"body": [
			"DISABLE_DODGE$0"
		],
		"description": "16"
	},
	"DIST_EPSILON": {
		"prefix": "DIST_EPSILON",
		"body": [
			"DIST_EPSILON$0"
		],
		"description": "0.03125"
	},
	"DMG_ACID": {
		"prefix": "DMG_ACID",
		"body": [
			"DMG_ACID$0"
		],
		"description": "1048576"
	},
	"DMG_AIRBOAT": {
		"prefix": "DMG_AIRBOAT",
		"body": [
			"DMG_AIRBOAT$0"
		],
		"description": "33554432"
	},
	"DMG_ALWAYSGIB": {
		"prefix": "DMG_ALWAYSGIB",
		"body": [
			"DMG_ALWAYSGIB$0"
		],
		"description": "8192"
	},
	"DMG_BLAST": {
		"prefix": "DMG_BLAST",
		"body": [
			"DMG_BLAST$0"
		],
		"description": "64"
	},
	"DMG_BLAST_SURFACE": {
		"prefix": "DMG_BLAST_SURFACE",
		"body": [
			"DMG_BLAST_SURFACE$0"
		],
		"description": "134217728"
	},
	"DMG_BUCKSHOT": {
		"prefix": "DMG_BUCKSHOT",
		"body": [
			"DMG_BUCKSHOT$0"
		],
		"description": "536870912"
	},
	"DMG_BULLET": {
		"prefix": "DMG_BULLET",
		"body": [
			"DMG_BULLET$0"
		],
		"description": "2"
	},
	"DMG_BURN": {
		"prefix": "DMG_BURN",
		"body": [
			"DMG_BURN$0"
		],
		"description": "8"
	},
	"DMG_CLUB": {
		"prefix": "DMG_CLUB",
		"body": [
			"DMG_CLUB$0"
		],
		"description": "128"
	},
	"DMG_CRUSH": {
		"prefix": "DMG_CRUSH",
		"body": [
			"DMG_CRUSH$0"
		],
		"description": "1"
	},
	"DMG_DIRECT": {
		"prefix": "DMG_DIRECT",
		"body": [
			"DMG_DIRECT$0"
		],
		"description": "268435456"
	},
	"DMG_DISSOLVE": {
		"prefix": "DMG_DISSOLVE",
		"body": [
			"DMG_DISSOLVE$0"
		],
		"description": "67108864"
	},
	"DMG_DROWN": {
		"prefix": "DMG_DROWN",
		"body": [
			"DMG_DROWN$0"
		],
		"description": "16384"
	},
	"DMG_DROWNRECOVER": {
		"prefix": "DMG_DROWNRECOVER",
		"body": [
			"DMG_DROWNRECOVER$0"
		],
		"description": "524288"
	},
	"DMG_ENERGYBEAM": {
		"prefix": "DMG_ENERGYBEAM",
		"body": [
			"DMG_ENERGYBEAM$0"
		],
		"description": "1024"
	},
	"DMG_FALL": {
		"prefix": "DMG_FALL",
		"body": [
			"DMG_FALL$0"
		],
		"description": "32"
	},
	"DMG_GENERIC": {
		"prefix": "DMG_GENERIC",
		"body": [
			"DMG_GENERIC$0"
		],
		"description": "0"
	},
	"DMG_NERVEGAS": {
		"prefix": "DMG_NERVEGAS",
		"body": [
			"DMG_NERVEGAS$0"
		],
		"description": "65536"
	},
	"DMG_NEVERGIB": {
		"prefix": "DMG_NEVERGIB",
		"body": [
			"DMG_NEVERGIB$0"
		],
		"description": "4096"
	},
	"DMG_PARALYZE": {
		"prefix": "DMG_PARALYZE",
		"body": [
			"DMG_PARALYZE$0"
		],
		"description": "32768"
	},
	"DMG_PHYSGUN": {
		"prefix": "DMG_PHYSGUN",
		"body": [
			"DMG_PHYSGUN$0"
		],
		"description": "8388608"
	},
	"DMG_PLASMA": {
		"prefix": "DMG_PLASMA",
		"body": [
			"DMG_PLASMA$0"
		],
		"description": "16777216"
	},
	"DMG_POISON": {
		"prefix": "DMG_POISON",
		"body": [
			"DMG_POISON$0"
		],
		"description": "131072"
	},
	"DMG_PREVENT_PHYSICS_FORCE": {
		"prefix": "DMG_PREVENT_PHYSICS_FORCE",
		"body": [
			"DMG_PREVENT_PHYSICS_FORCE$0"
		],
		"description": "2048"
	},
	"DMG_RADIATION": {
		"prefix": "DMG_RADIATION",
		"body": [
			"DMG_RADIATION$0"
		],
		"description": "262144"
	},
	"DMG_REMOVENORAGDOLL": {
		"prefix": "DMG_REMOVENORAGDOLL",
		"body": [
			"DMG_REMOVENORAGDOLL$0"
		],
		"description": "4194304"
	},
	"DMG_SHOCK": {
		"prefix": "DMG_SHOCK",
		"body": [
			"DMG_SHOCK$0"
		],
		"description": "256"
	},
	"DMG_SLASH": {
		"prefix": "DMG_SLASH",
		"body": [
			"DMG_SLASH$0"
		],
		"description": "4"
	},
	"DMG_SLOWBURN": {
		"prefix": "DMG_SLOWBURN",
		"body": [
			"DMG_SLOWBURN$0"
		],
		"description": "2097152"
	},
	"DMG_SONIC": {
		"prefix": "DMG_SONIC",
		"body": [
			"DMG_SONIC$0"
		],
		"description": "512"
	},
	"DMG_VEHICLE": {
		"prefix": "DMG_VEHICLE",
		"body": [
			"DMG_VEHICLE$0"
		],
		"description": "16"
	},
	"DOWN": {
		"prefix": "DOWN",
		"body": [
			"DOWN$0"
		],
		"description": "5"
	},
	"void DebugDrawBox(Vector origin, vector min, vector max, int r, int g, int b, int alpha, float duration)": {
		"prefix": "DebugDrawBox",
		"body": [
			"DebugDrawBox(${1:Vector origin}, ${2:vector min}, ${3:vector max}, ${4:int r}, ${5:int g}, ${6:int b}, ${7:int alpha}, ${8:float duration})$0"
		],
		"description": "Draw a debug overlay box."
	},
	"void DebugDrawBoxAngles(Vector origin, Vector min, Vector max, QAngle direction, Vector rgb, int alpha, float duration)": {
		"prefix": "DebugDrawBoxAngles",
		"body": [
			"DebugDrawBoxAngles(${1:Vector origin}, ${2:Vector min}, ${3:Vector max}, ${4:QAngle direction}, ${5:Vector rgb}, ${6:int alpha}, ${7:float duration})$0"
		],
		"description": "Draw a debug oriented box (cent, min, max, angles(p,y,r), vRgb, a, duration)."
	},
	"void DebugDrawBoxDirection(Vector center, Vector min, Vector max, Vector forward, Vector rgb, float alpha, float duration)": {
		"prefix": "DebugDrawBoxDirection",
		"body": [
			"DebugDrawBoxDirection(${1:Vector center}, ${2:Vector min}, ${3:Vector max}, ${4:Vector forward}, ${5:Vector rgb}, ${6:float alpha}, ${7:float duration})$0"
		],
		"description": "Draw a debug forward box."
	},
	"void DebugDrawCircle(Vector center, Vector rgb, float alpha, float radius, bool ztest, float duration)": {
		"prefix": "DebugDrawCircle",
		"body": [
			"DebugDrawCircle(${1:Vector center}, ${2:Vector rgb}, ${3:float alpha}, ${4:float radius}, ${5:bool ztest}, ${6:float duration})$0"
		],
		"description": "Draw a debug circle."
	},
	"void DebugDrawClear()": {
		"prefix": "DebugDrawClear",
		"body": [
			"DebugDrawClear()$0"
		],
		"description": "Try to clear all the debug overlay info."
	},
	"void DebugDrawFilled(int r, int g, int b, int a, float duration, bool noDepthTest, float margin)": {
		"prefix": "DebugDrawFilled",
		"body": [
			"DebugDrawFilled(${1:int r}, ${2:int g}, ${3:int b}, ${4:int a}, ${5:float duration}, ${6:bool noDepthTest}, ${7:float margin})$0"
		],
		"description": "Draw area as a filled rect of the given color."
	},
	"void DebugDrawLine(Vector start, Vector end, int red, int green, int blue', bool zTest, float time)": {
		"prefix": "DebugDrawLine",
		"body": [
			"DebugDrawLine(${1:Vector start}, ${2:Vector end}, ${3:int red}, ${4:int green}, ${5:int blue'}, ${6:bool zTest}, ${7:float time})$0"
		],
		"description": "Draw a debug overlay line."
	},
	"void DebugDrawLine_vCol(Vector start, vector end, vector rgb, bool ztest, float duration)": {
		"prefix": "DebugDrawLine_vCol",
		"body": [
			"DebugDrawLine_vCol(${1:Vector start}, ${2:vector end}, ${3:vector rgb}, ${4:bool ztest}, ${5:float duration})$0"
		],
		"description": "Draw a debug line using color vec."
	},
	"void DebugDrawScreenTextLine(float x, float y, int lineOffset, string text, int r, int g, int b, int a, float duration)": {
		"prefix": "DebugDrawScreenTextLine",
		"body": [
			"DebugDrawScreenTextLine(${1:float x}, ${2:float y}, ${3:int lineOffset}, ${4:string text}, ${5:int r}, ${6:int g}, ${7:int b}, ${8:int a}, ${9:float duration})$0"
		],
		"description": "Draw text with a line offset."
	},
	"void DebugDrawText(Vector origin, string text, bool useViewCheck, float duration)": {
		"prefix": "DebugDrawText",
		"body": [
			"DebugDrawText(${1:Vector origin}, ${2:string text}, ${3:bool useViewCheck}, ${4:float duration})$0"
		],
		"description": "Draw text on the screen, starting on the position of origin."
	},
	"void DelayedThreatNotice(handle threat, float delay)": {
		"prefix": "DelayedThreatNotice",
		"body": [
			"DelayedThreatNotice(${1:handle threat}, ${2:float delay})$0"
		],
		"description": "Notice the threat after a delay in seconds"
	},
	"void Destroy()": {
		"prefix": "Destroy",
		"body": [
			"Destroy()$0"
		],
		"description": "Removes the entity. Simply calls UTIL_Remove."
	},
	"void DisableDraw()": {
		"prefix": "DisableDraw",
		"body": [
			"DisableDraw()$0"
		],
		"description": "Disable drawing and transmitting the entity to clients. (adds EF_NODRAW)"
	},
	"void DisbandCurrentSquad()": {
		"prefix": "DisbandCurrentSquad",
		"body": [
			"DisbandCurrentSquad()$0"
		],
		"description": "Forces the current squad to be entirely disbanded by everyone"
	},
	"void Disconnect(handle area)": {
		"prefix": "Disconnect",
		"body": [
			"Disconnect(${1:handle area})$0"
		],
		"description": "Disconnect this area from given area."
	},
	"void DisconnectOutput(string, string)": {
		"prefix": "DisconnectOutput",
		"body": [
			"DisconnectOutput(${1:string}, ${2:string})$0"
		],
		"description": "Removes a connected script function from an I/O event."
	},
	"void DispatchAnimEvents(handle entity)": {
		"prefix": "DispatchAnimEvents",
		"body": [
			"DispatchAnimEvents(${1:handle entity})$0"
		],
		"description": "Dispatch animation events to a CBaseAnimating"
	},
	"void DispatchParticleEffect(string name, Vector origin, Vector angles)": {
		"prefix": "DispatchParticleEffect",
		"body": [
			"DispatchParticleEffect(${1:string name}, ${2:Vector origin}, ${3:Vector angles})$0"
		],
		"description": "Dispatches a one-off particle system"
	},
	"void DispatchSpawn(handle entity)": {
		"prefix": "DispatchSpawn",
		"body": [
			"DispatchSpawn(${1:handle entity})$0"
		],
		"description": "Dispatches spawn of an entity! Use this on entities created via CreateByClassname to actually spawn them into the world."
	},
	"void DoEntFire(string target, string action, string value, float delay, handle activator, handle caller)": {
		"prefix": "DoEntFire",
		"body": [
			"DoEntFire(${1:string target}, ${2:string action}, ${3:string value}, ${4:float delay}, ${5:handle activator}, ${6:handle caller})$0"
		],
		"description": "Generate an entity I/O event. The caller and activator argument takes a CBaseEntity script handle, and entities assigned can receive inputs with target set to !self, or !activator / !caller."
	},
	"bool DoIncludeScript(string file, handle/table scope)": {
		"prefix": "DoIncludeScript",
		"body": [
			"DoIncludeScript(${1:string file}, ${2:handle/table scope})$0"
		],
		"description": "Execute a script. and put all its content for the argument passed to thescopeparameter. (internal)"
	},
	"void DoAttackTaunt()": {
		"prefix": "DoAttackTaunt",
		"body": [
			"DoAttackTaunt()$0"
		],
		"description": "Performs taunts attacks if available. Player must be already taunting and taunt must have a valid attack assigned (taunt attack name attribute)"
	},
	"string DoUniqueString(string input)": {
		"prefix": "DoUniqueString",
		"body": [
			"DoUniqueString(${1:string input})$0"
		],
		"description": "Unknown; presumably an internal function called by UniqueString, so call that instead."
	},
	"void Document(unknown symbolOrTable, unknown itemIfSymbol = null, string descriptionIfSymbol = null)": {
		"prefix": "Document",
		"body": [
			"Document(${1:unknown symbolOrTable}, ${2:unknown itemIfSymbol = null}, ${3:string descriptionIfSymbol = null})$0"
		],
		"description": ""
	},
	"Documentation": {
		"prefix": "Documentation",
		"body": [
			"Documentation$0"
		],
		"description": "Contains the printed strings from the script_help command."
	},
	"float Dot(Quaternion factor)": {
		"prefix": "Dot",
		"body": [
			"Dot(${1:Quaternion factor})$0"
		],
		"description": "The 4D scalar product of two quaternions. represents the angle between the quaternions in the range [1, 0]."
	},
	"void DriveTo(Vector pos)": {
		"prefix": "DriveTo",
		"body": [
			"DriveTo(${1:Vector pos})$0"
		],
		"description": "Move the bot to the precise given position immediately, updating internal state"
	},
	"void DropFlag(bool silent)": {
		"prefix": "DropFlag",
		"body": [
			"DropFlag(${1:bool silent})$0"
		],
		"description": "Force player to drop the flag."
	},
	"void DropRune(bool apply_force, int team)": {
		"prefix": "DropRune",
		"body": [
			"DropRune(${1:bool apply_force}, ${2:int team})$0"
		],
		"description": "Force player to drop the rune."
	},
	"void DumpObject(handle object)": {
		"prefix": "DumpObject",
		"body": [
			"DumpObject(${1:handle object})$0"
		],
		"description": "Dumps information about a class or instance."
	},
	"E": {
		"prefix": "E",
		"body": [
			"E$0"
		],
		"description": "2.71828"
	},
	"EAST": {
		"prefix": "EAST",
		"body": [
			"EAST$0"
		],
		"description": "1"
	},
	"EASY": {
		"prefix": "EASY",
		"body": [
			"EASY$0"
		],
		"description": "0"
	},
	"EFL_BOT_FROZEN": {
		"prefix": "EFL_BOT_FROZEN",
		"body": [
			"EFL_BOT_FROZEN$0"
		],
		"description": "256"
	},
	"EFL_CHECK_UNTOUCH": {
		"prefix": "EFL_CHECK_UNTOUCH",
		"body": [
			"EFL_CHECK_UNTOUCH$0"
		],
		"description": "16777216"
	},
	"EFL_DIRTY_ABSANGVELOCITY": {
		"prefix": "EFL_DIRTY_ABSANGVELOCITY",
		"body": [
			"EFL_DIRTY_ABSANGVELOCITY$0"
		],
		"description": "8192"
	},
	"EFL_DIRTY_ABSTRANSFORM": {
		"prefix": "EFL_DIRTY_ABSTRANSFORM",
		"body": [
			"EFL_DIRTY_ABSTRANSFORM$0"
		],
		"description": "2048"
	},
	"EFL_DIRTY_ABSVELOCITY": {
		"prefix": "EFL_DIRTY_ABSVELOCITY",
		"body": [
			"EFL_DIRTY_ABSVELOCITY$0"
		],
		"description": "4096"
	},
	"EFL_DIRTY_SHADOWUPDATE": {
		"prefix": "EFL_DIRTY_SHADOWUPDATE",
		"body": [
			"EFL_DIRTY_SHADOWUPDATE$0"
		],
		"description": "32"
	},
	"EFL_DIRTY_SPATIAL_PARTITION": {
		"prefix": "EFL_DIRTY_SPATIAL_PARTITION",
		"body": [
			"EFL_DIRTY_SPATIAL_PARTITION$0"
		],
		"description": "32768"
	},
	"EFL_DIRTY_SURROUNDING_COLLISION_BOUNDS": {
		"prefix": "EFL_DIRTY_SURROUNDING_COLLISION_BOUNDS",
		"body": [
			"EFL_DIRTY_SURROUNDING_COLLISION_BOUNDS$0"
		],
		"description": "16384"
	},
	"EFL_DONTBLOCKLOS": {
		"prefix": "EFL_DONTBLOCKLOS",
		"body": [
			"EFL_DONTBLOCKLOS$0"
		],
		"description": "33554432"
	},
	"EFL_DONTWALKON": {
		"prefix": "EFL_DONTWALKON",
		"body": [
			"EFL_DONTWALKON$0"
		],
		"description": "67108864"
	},
	"EFL_DORMANT": {
		"prefix": "EFL_DORMANT",
		"body": [
			"EFL_DORMANT$0"
		],
		"description": "2"
	},
	"EFL_FORCE_ALLOW_MOVEPARENT": {
		"prefix": "EFL_FORCE_ALLOW_MOVEPARENT",
		"body": [
			"EFL_FORCE_ALLOW_MOVEPARENT$0"
		],
		"description": "65536"
	},
	"EFL_FORCE_CHECK_TRANSMIT": {
		"prefix": "EFL_FORCE_CHECK_TRANSMIT",
		"body": [
			"EFL_FORCE_CHECK_TRANSMIT$0"
		],
		"description": "128"
	},
	"EFL_HAS_PLAYER_CHILD": {
		"prefix": "EFL_HAS_PLAYER_CHILD",
		"body": [
			"EFL_HAS_PLAYER_CHILD$0"
		],
		"description": "16"
	},
	"EFL_IN_SKYBOX": {
		"prefix": "EFL_IN_SKYBOX",
		"body": [
			"EFL_IN_SKYBOX$0"
		],
		"description": "131072"
	},
	"EFL_IS_BEING_LIFTED_BY_BARNACLE": {
		"prefix": "EFL_IS_BEING_LIFTED_BY_BARNACLE",
		"body": [
			"EFL_IS_BEING_LIFTED_BY_BARNACLE$0"
		],
		"description": "1048576"
	},
	"EFL_KEEP_ON_RECREATE_ENTITIES": {
		"prefix": "EFL_KEEP_ON_RECREATE_ENTITIES",
		"body": [
			"EFL_KEEP_ON_RECREATE_ENTITIES$0"
		],
		"description": "16"
	},
	"EFL_KILLME": {
		"prefix": "EFL_KILLME",
		"body": [
			"EFL_KILLME$0"
		],
		"description": "1"
	},
	"EFL_NOCLIP_ACTIVE": {
		"prefix": "EFL_NOCLIP_ACTIVE",
		"body": [
			"EFL_NOCLIP_ACTIVE$0"
		],
		"description": "4"
	},
	"EFL_NOTIFY": {
		"prefix": "EFL_NOTIFY",
		"body": [
			"EFL_NOTIFY$0"
		],
		"description": "64"
	},
	"EFL_NO_AUTO_EDICT_ATTACH": {
		"prefix": "EFL_NO_AUTO_EDICT_ATTACH",
		"body": [
			"EFL_NO_AUTO_EDICT_ATTACH$0"
		],
		"description": "1024"
	},
	"EFL_NO_DAMAGE_FORCES": {
		"prefix": "EFL_NO_DAMAGE_FORCES",
		"body": [
			"EFL_NO_DAMAGE_FORCES$0"
		],
		"description": "2147483648"
	},
	"EFL_NO_DISSOLVE": {
		"prefix": "EFL_NO_DISSOLVE",
		"body": [
			"EFL_NO_DISSOLVE$0"
		],
		"description": "134217728"
	},
	"EFL_NO_GAME_PHYSICS_SIMULATION": {
		"prefix": "EFL_NO_GAME_PHYSICS_SIMULATION",
		"body": [
			"EFL_NO_GAME_PHYSICS_SIMULATION$0"
		],
		"description": "8388608"
	},
	"EFL_NO_MEGAPHYSCANNON_RAGDOLL": {
		"prefix": "EFL_NO_MEGAPHYSCANNON_RAGDOLL",
		"body": [
			"EFL_NO_MEGAPHYSCANNON_RAGDOLL$0"
		],
		"description": "268435456"
	},
	"EFL_NO_PHYSCANNON_INTERACTION": {
		"prefix": "EFL_NO_PHYSCANNON_INTERACTION",
		"body": [
			"EFL_NO_PHYSCANNON_INTERACTION$0"
		],
		"description": "1073741824"
	},
	"EFL_NO_ROTORWASH_PUSH": {
		"prefix": "EFL_NO_ROTORWASH_PUSH",
		"body": [
			"EFL_NO_ROTORWASH_PUSH$0"
		],
		"description": "2097152"
	},
	"EFL_NO_THINK_FUNCTION": {
		"prefix": "EFL_NO_THINK_FUNCTION",
		"body": [
			"EFL_NO_THINK_FUNCTION$0"
		],
		"description": "4194304"
	},
	"EFL_NO_WATER_VELOCITY_CHANGE": {
		"prefix": "EFL_NO_WATER_VELOCITY_CHANGE",
		"body": [
			"EFL_NO_WATER_VELOCITY_CHANGE$0"
		],
		"description": "536870912"
	},
	"EFL_SERVER_ONLY": {
		"prefix": "EFL_SERVER_ONLY",
		"body": [
			"EFL_SERVER_ONLY$0"
		],
		"description": "512"
	},
	"EFL_SETTING_UP_BONES": {
		"prefix": "EFL_SETTING_UP_BONES",
		"body": [
			"EFL_SETTING_UP_BONES$0"
		],
		"description": "8"
	},
	"EFL_TOUCHING_FLUID": {
		"prefix": "EFL_TOUCHING_FLUID",
		"body": [
			"EFL_TOUCHING_FLUID$0"
		],
		"description": "524288"
	},
	"EFL_USE_PARTITION_WHEN_NOT_SOLID": {
		"prefix": "EFL_USE_PARTITION_WHEN_NOT_SOLID",
		"body": [
			"EFL_USE_PARTITION_WHEN_NOT_SOLID$0"
		],
		"description": "262144"
	},
	"EF_BONEMERGE": {
		"prefix": "EF_BONEMERGE",
		"body": [
			"EF_BONEMERGE$0"
		],
		"description": "1"
	},
	"EF_BONEMERGE_FASTCULL": {
		"prefix": "EF_BONEMERGE_FASTCULL",
		"body": [
			"EF_BONEMERGE_FASTCULL$0"
		],
		"description": "128"
	},
	"EF_BRIGHTLIGHT": {
		"prefix": "EF_BRIGHTLIGHT",
		"body": [
			"EF_BRIGHTLIGHT$0"
		],
		"description": "2"
	},
	"EF_DIMLIGHT": {
		"prefix": "EF_DIMLIGHT",
		"body": [
			"EF_DIMLIGHT$0"
		],
		"description": "4"
	},
	"EF_ITEM_BLINK": {
		"prefix": "EF_ITEM_BLINK",
		"body": [
			"EF_ITEM_BLINK$0"
		],
		"description": "256"
	},
	"EF_MAX_BITS": {
		"prefix": "EF_MAX_BITS",
		"body": [
			"EF_MAX_BITS$0"
		],
		"description": "10"
	},
	"EF_NODRAW": {
		"prefix": "EF_NODRAW",
		"body": [
			"EF_NODRAW$0"
		],
		"description": "32"
	},
	"EF_NOINTERP": {
		"prefix": "EF_NOINTERP",
		"body": [
			"EF_NOINTERP$0"
		],
		"description": "8"
	},
	"EF_NORECEIVESHADOW": {
		"prefix": "EF_NORECEIVESHADOW",
		"body": [
			"EF_NORECEIVESHADOW$0"
		],
		"description": "64"
	},
	"EF_NOSHADOW": {
		"prefix": "EF_NOSHADOW",
		"body": [
			"EF_NOSHADOW$0"
		],
		"description": "16"
	},
	"EF_PARENT_ANIMATES": {
		"prefix": "EF_PARENT_ANIMATES",
		"body": [
			"EF_PARENT_ANIMATES$0"
		],
		"description": "512"
	},
	"EXPERT": {
		"prefix": "EXPERT",
		"body": [
			"EXPERT$0"
		],
		"description": "3"
	},
	"void EmitAmbientSoundOn(string soundName, float volume, int soundlevel, int pitch, handle entity)": {
		"prefix": "EmitAmbientSoundOn",
		"body": [
			"EmitAmbientSoundOn(${1:string soundName}, ${2:float volume}, ${3:int soundlevel}, ${4:int pitch}, ${5:handle entity})$0"
		],
		"description": "Play named sound on an entity using configurations similar to ambient_generic. Soundlevel is in decibels."
	},
	"void EmitSound(string)": {
		"prefix": "EmitSound",
		"body": [
			"EmitSound(${1:string})$0"
		],
		"description": "Plays a sound from this entity."
	},
	"void EmitSoundEx(handle table)": {
		"prefix": "EmitSoundEx",
		"body": [
			"EmitSoundEx(${1:handle table})$0"
		],
		"description": "Play a sound. Takes in a script table of params: sound_name, channel, volume, sound_level, flags, pitch, special_dsp, origin, delay, sound_time, entity, speaker_entity, filter_type, filter_param. All parameters are optional except sound_name. See the main page for more details."
	},
	"void EmitSoundOn(string soundScript, handle entity)": {
		"prefix": "EmitSoundOn",
		"body": [
			"EmitSoundOn(${1:string soundScript}, ${2:handle entity})$0"
		],
		"description": "Play named sound on an entity. Legacy only, use EmitSoundEx"
	},
	"void EmitSoundOnClient(string soundScript, handle player)": {
		"prefix": "EmitSoundOnClient",
		"body": [
			"EmitSoundOnClient(${1:string soundScript}, ${2:handle player})$0"
		],
		"description": "Play named sound only on the client for the specified player. NOTE: This only supports soundscripts. Legacy only, use EmitSoundEx."
	},
	"void EnableDraw()": {
		"prefix": "EnableDraw",
		"body": [
			"EnableDraw()$0"
		],
		"description": "Enable drawing and transmitting the entity to clients. (removes EF_NODRAW)"
	},
	"End()": {
		"prefix": "End",
		"body": [
			"End()$0"
		],
		"description": ""
	},
	"void EndLongTaunt()": {
		"prefix": "EndLongTaunt",
		"body": [
			"EndLongTaunt()$0"
		],
		"description": "Stops a looping taunt (obeys minimum time rules and plays outro animation if available)"
	},
	"void EndScriptDebug()": {
		"prefix": "EndScriptDebug",
		"body": [
			"EndScriptDebug()$0"
		],
		"description": ""
	},
	"void EntFire(string target, string action, string value = null, float delay = 0, handle activator = null)": {
		"prefix": "EntFire",
		"body": [
			"EntFire(${1:string target}, ${2:string action}, ${3:string value = null}, ${4:float delay = 0}, ${5:handle activator = null})$0"
		],
		"description": "Wrapper for DoEntFire() that setsactivator to null, but has no caller param."
	},
	"void EntFireByHandle(handle entity, string action, string value, float delay, handle activator, handle caller)": {
		"prefix": "EntFireByHandle",
		"body": [
			"EntFireByHandle(${1:handle entity}, ${2:string action}, ${3:string value}, ${4:float delay}, ${5:handle activator}, ${6:handle caller})$0"
		],
		"description": "Generate and entity i/o event. First parameter is an entity instance."
	},
	"handle EntIndexToHScript(int entIndex)": {
		"prefix": "EntIndexToHScript",
		"body": [
			"EntIndexToHScript(${1:int entIndex})$0"
		],
		"description": "Turn an entity index integer to an HScript representing that entity's script instance."
	},
	"Epsilon": {
		"prefix": "Epsilon",
		"body": [
			"Epsilon$0"
		],
		"description": "1.19209e-07"
	},
	"void EquipWearableViewModel(handle ent)": {
		"prefix": "EquipWearableViewModel",
		"body": [
			"EquipWearableViewModel(${1:handle ent})$0"
		],
		"description": "Equips a wearble on the viewmodel. Intended to be used with tf_wearable_vm entities."
	},
	"EstablishDelegation()": {
		"prefix": "EstablishDelegation",
		"body": [
			"EstablishDelegation()$0"
		],
		"description": ""
	},
	"float EstimateLength()": {
		"prefix": "EstimateLength",
		"body": [
			"EstimateLength()$0"
		],
		"description": "Returns length of this scene in seconds."
	},
	"void ExtinguishPlayerBurning()": {
		"prefix": "ExtinguishPlayerBurning",
		"body": [
			"ExtinguishPlayerBurning()$0"
		],
		"description": ""
	},
	"QAngle EyeAngles()": {
		"prefix": "EyeAngles",
		"body": [
			"EyeAngles()$0"
		],
		"description": "Returns the entity's eye angles. Acts like GetAbsAngles if the entity does not support it."
	},
	"Vector EyePosition()": {
		"prefix": "EyePosition",
		"body": [
			"EyePosition()$0"
		],
		"description": "Get vector to eye position - absolute coords. Acts like GetOrigin if the entity does not support it."
	},
	"FIRE_IMMUNE": {
		"prefix": "FIRE_IMMUNE",
		"body": [
			"FIRE_IMMUNE$0"
		],
		"description": "33554432"
	},
	"FL_AIMTARGET": {
		"prefix": "FL_AIMTARGET",
		"body": [
			"FL_AIMTARGET$0"
		],
		"description": "131072"
	},
	"FL_ANIMDUCKING": {
		"prefix": "FL_ANIMDUCKING",
		"body": [
			"FL_ANIMDUCKING$0"
		],
		"description": "4"
	},
	"FL_ATCONTROLS": {
		"prefix": "FL_ATCONTROLS",
		"body": [
			"FL_ATCONTROLS$0"
		],
		"description": "128"
	},
	"FL_BASEVELOCITY": {
		"prefix": "FL_BASEVELOCITY",
		"body": [
			"FL_BASEVELOCITY$0"
		],
		"description": "16777216"
	},
	"FL_CLIENT": {
		"prefix": "FL_CLIENT",
		"body": [
			"FL_CLIENT$0"
		],
		"description": "256"
	},
	"FL_CONVEYOR": {
		"prefix": "FL_CONVEYOR",
		"body": [
			"FL_CONVEYOR$0"
		],
		"description": "8192"
	},
	"FL_DISSOLVING": {
		"prefix": "FL_DISSOLVING",
		"body": [
			"FL_DISSOLVING$0"
		],
		"description": "536870912"
	},
	"FL_DONTTOUCH": {
		"prefix": "FL_DONTTOUCH",
		"body": [
			"FL_DONTTOUCH$0"
		],
		"description": "8388608"
	},
	"FL_DUCKING": {
		"prefix": "FL_DUCKING",
		"body": [
			"FL_DUCKING$0"
		],
		"description": "2"
	},
	"FL_FAKECLIENT": {
		"prefix": "FL_FAKECLIENT",
		"body": [
			"FL_FAKECLIENT$0"
		],
		"description": "512"
	},
	"FL_FLY": {
		"prefix": "FL_FLY",
		"body": [
			"FL_FLY$0"
		],
		"description": "2048"
	},
	"FL_FROZEN": {
		"prefix": "FL_FROZEN",
		"body": [
			"FL_FROZEN$0"
		],
		"description": "64"
	},
	"FL_GODMODE": {
		"prefix": "FL_GODMODE",
		"body": [
			"FL_GODMODE$0"
		],
		"description": "32768"
	},
	"FL_GRAPHED": {
		"prefix": "FL_GRAPHED",
		"body": [
			"FL_GRAPHED$0"
		],
		"description": "1048576"
	},
	"FL_GRENADE": {
		"prefix": "FL_GRENADE",
		"body": [
			"FL_GRENADE$0"
		],
		"description": "2097152"
	},
	"FL_INRAIN": {
		"prefix": "FL_INRAIN",
		"body": [
			"FL_INRAIN$0"
		],
		"description": "32"
	},
	"FL_INWATER": {
		"prefix": "FL_INWATER",
		"body": [
			"FL_INWATER$0"
		],
		"description": "1024"
	},
	"FL_KILLME": {
		"prefix": "FL_KILLME",
		"body": [
			"FL_KILLME$0"
		],
		"description": "134217728"
	},
	"FL_NOTARGET": {
		"prefix": "FL_NOTARGET",
		"body": [
			"FL_NOTARGET$0"
		],
		"description": "65536"
	},
	"FL_NPC": {
		"prefix": "FL_NPC",
		"body": [
			"FL_NPC$0"
		],
		"description": "16384"
	},
	"FL_OBJECT": {
		"prefix": "FL_OBJECT",
		"body": [
			"FL_OBJECT$0"
		],
		"description": "67108864"
	},
	"FL_ONFIRE": {
		"prefix": "FL_ONFIRE",
		"body": [
			"FL_ONFIRE$0"
		],
		"description": "268435456"
	},
	"FL_ONGROUND": {
		"prefix": "FL_ONGROUND",
		"body": [
			"FL_ONGROUND$0"
		],
		"description": "1"
	},
	"FL_ONTRAIN": {
		"prefix": "FL_ONTRAIN",
		"body": [
			"FL_ONTRAIN$0"
		],
		"description": "16"
	},
	"FL_PARTIALGROUND": {
		"prefix": "FL_PARTIALGROUND",
		"body": [
			"FL_PARTIALGROUND$0"
		],
		"description": "262144"
	},
	"FL_STATICPROP": {
		"prefix": "FL_STATICPROP",
		"body": [
			"FL_STATICPROP$0"
		],
		"description": "524288"
	},
	"FL_STEPMOVEMENT": {
		"prefix": "FL_STEPMOVEMENT",
		"body": [
			"FL_STEPMOVEMENT$0"
		],
		"description": "4194304"
	},
	"FL_SWIM": {
		"prefix": "FL_SWIM",
		"body": [
			"FL_SWIM$0"
		],
		"description": "4096"
	},
	"FL_TRANSRAGDOLL": {
		"prefix": "FL_TRANSRAGDOLL",
		"body": [
			"FL_TRANSRAGDOLL$0"
		],
		"description": "1073741824"
	},
	"FL_UNBLOCKABLE_BY_PLAYER": {
		"prefix": "FL_UNBLOCKABLE_BY_PLAYER",
		"body": [
			"FL_UNBLOCKABLE_BY_PLAYER$0"
		],
		"description": "2147483648"
	},
	"FL_WATERJUMP": {
		"prefix": "FL_WATERJUMP",
		"body": [
			"FL_WATERJUMP$0"
		],
		"description": "8"
	},
	"FL_WORLDBRUSH": {
		"prefix": "FL_WORLDBRUSH",
		"body": [
			"FL_WORLDBRUSH$0"
		],
		"description": "33554432"
	},
	"FORWARD": {
		"prefix": "FORWARD",
		"body": [
			"FORWARD$0"
		],
		"description": "0"
	},
	"FSOLID_CUSTOMBOXTEST": {
		"prefix": "FSOLID_CUSTOMBOXTEST",
		"body": [
			"FSOLID_CUSTOMBOXTEST$0"
		],
		"description": "2"
	},
	"FSOLID_CUSTOMRAYTEST": {
		"prefix": "FSOLID_CUSTOMRAYTEST",
		"body": [
			"FSOLID_CUSTOMRAYTEST$0"
		],
		"description": "1"
	},
	"FSOLID_FORCE_WORLD_ALIGNED": {
		"prefix": "FSOLID_FORCE_WORLD_ALIGNED",
		"body": [
			"FSOLID_FORCE_WORLD_ALIGNED$0"
		],
		"description": "64"
	},
	"FSOLID_MAX_BITS": {
		"prefix": "FSOLID_MAX_BITS",
		"body": [
			"FSOLID_MAX_BITS$0"
		],
		"description": "10"
	},
	"FSOLID_NOT_SOLID": {
		"prefix": "FSOLID_NOT_SOLID",
		"body": [
			"FSOLID_NOT_SOLID$0"
		],
		"description": "4"
	},
	"FSOLID_NOT_STANDABLE": {
		"prefix": "FSOLID_NOT_STANDABLE",
		"body": [
			"FSOLID_NOT_STANDABLE$0"
		],
		"description": "16"
	},
	"FSOLID_ROOT_PARENT_ALIGNED": {
		"prefix": "FSOLID_ROOT_PARENT_ALIGNED",
		"body": [
			"FSOLID_ROOT_PARENT_ALIGNED$0"
		],
		"description": "256"
	},
	"FSOLID_TRIGGER": {
		"prefix": "FSOLID_TRIGGER",
		"body": [
			"FSOLID_TRIGGER$0"
		],
		"description": "8"
	},
	"FSOLID_TRIGGER_TOUCH_DEBRIS": {
		"prefix": "FSOLID_TRIGGER_TOUCH_DEBRIS",
		"body": [
			"FSOLID_TRIGGER_TOUCH_DEBRIS$0"
		],
		"description": "512"
	},
	"FSOLID_USE_TRIGGER_BOUNDS": {
		"prefix": "FSOLID_USE_TRIGGER_BOUNDS",
		"body": [
			"FSOLID_USE_TRIGGER_BOUNDS$0"
		],
		"description": "128"
	},
	"FSOLID_VOLUME_CONTENTS": {
		"prefix": "FSOLID_VOLUME_CONTENTS",
		"body": [
			"FSOLID_VOLUME_CONTENTS$0"
		],
		"description": "32"
	},
	"void FaceTowards(Vector target)": {
		"prefix": "FaceTowards",
		"body": [
			"FaceTowards(${1:Vector target})$0"
		],
		"description": "Rotate body to face towards target"
	},
	"string FileToString(string file)": {
		"prefix": "FileToString",
		"body": [
			"FileToString(${1:string file})$0"
		],
		"description": "Reads a string from file located in the game's scriptdata folder. Returns the string from the file, null if no file or file is greater than 16384 bytes."
	},
	"int FindBodygroupByName(string name)": {
		"prefix": "FindBodygroupByName",
		"body": [
			"FindBodygroupByName(${1:string name})$0"
		],
		"description": "Find a bodygroup ID by name. Returns -1 if the bodygroup does not exist."
	},
	"handle FindByClassname(handle previous, string classname)": {
		"prefix": "FindByClassname",
		"body": [
			"FindByClassname(${1:handle previous}, ${2:string classname})$0"
		],
		"description": "Find entities by the string of their classname keyvalue. Pass 'null' value to start an iteration, or reference to a previously found entity to continue a search"
	},
	"handle FindByClassnameNearest(string classname, Vector center, float radius)": {
		"prefix": "FindByClassnameNearest",
		"body": [
			"FindByClassnameNearest(${1:string classname}, ${2:Vector center}, ${3:float radius})$0"
		],
		"description": "Find entities by classname nearest to a point within a radius."
	},
	"handle FindByClassnameWithin(handle previous, string classname, Vector center, float radius)": {
		"prefix": "FindByClassnameWithin",
		"body": [
			"FindByClassnameWithin(${1:handle previous}, ${2:string classname}, ${3:Vector center}, ${4:float radius})$0"
		],
		"description": "Find entities by classname within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
	},
	"handle FindByModel(handle previous, string modelname)": {
		"prefix": "FindByModel",
		"body": [
			"FindByModel(${1:handle previous}, ${2:string modelname})$0"
		],
		"description": "Find entities by the value of their model keyvalue. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
	},
	"handle FindByName(handle previous, string targetname)": {
		"prefix": "FindByName",
		"body": [
			"FindByName(${1:handle previous}, ${2:string targetname})$0"
		],
		"description": "Find entities by the value of their enttargetname keyvalue. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
	},
	"handle FindByNameNearest(string targetname, Vector center, float radius)": {
		"prefix": "FindByNameNearest",
		"body": [
			"FindByNameNearest(${1:string targetname}, ${2:Vector center}, ${3:float radius})$0"
		],
		"description": "Find entities by targetname nearest to a point within a radius."
	},
	"handle FindByNameWithin(handle previous, string targetname, Vector center, float radius)": {
		"prefix": "FindByNameWithin",
		"body": [
			"FindByNameWithin(${1:handle previous}, ${2:string targetname}, ${3:Vector center}, ${4:float radius})$0"
		],
		"description": "Find entities by targetname within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
	},
	"handle FindByTarget(handle previous, string target)": {
		"prefix": "FindByTarget",
		"body": [
			"FindByTarget(${1:handle previous}, ${2:string target})$0"
		],
		"description": "Find entities by the value of their target keyvalue. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
	},
	"FindCircularReference()": {
		"prefix": "FindCircularReference",
		"body": [
			"FindCircularReference()$0"
		],
		"description": ""
	},
	"FindCircularReferences()": {
		"prefix": "FindCircularReferences",
		"body": [
			"FindCircularReferences()$0"
		],
		"description": ""
	},
	"handle FindInSphere(handle previous, Vector center, float radius)": {
		"prefix": "FindInSphere",
		"body": [
			"FindInSphere(${1:handle previous}, ${2:Vector center}, ${3:float radius})$0"
		],
		"description": "Find entities within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search"
	},
	"CScriptKeyValues FindKey(string key)": {
		"prefix": "FindKey",
		"body": [
			"FindKey(${1:string key})$0"
		],
		"description": "Find a sub key by the key name."
	},
	"handle FindNamedEntity(string reference)": {
		"prefix": "FindNamedEntity",
		"body": [
			"FindNamedEntity(${1:string reference})$0"
		],
		"description": "given an entity reference, such as !target, get actual entity from scene object"
	},
	"handle FindNavAreaAlongRay(Vector startpos, Vector endpos, handle ignoreAreaID)": {
		"prefix": "FindNavAreaAlongRay",
		"body": [
			"FindNavAreaAlongRay(${1:Vector startpos}, ${2:Vector endpos}, ${3:handle ignoreAreaID})$0"
		],
		"description": "get nav area from ray"
	},
	"Vector FindRandomSpot()": {
		"prefix": "FindRandomSpot",
		"body": [
			"FindRandomSpot()$0"
		],
		"description": "Get random origin within extent of area."
	},
	"handle FindVantagePoint(float max_distance)": {
		"prefix": "FindVantagePoint",
		"body": [
			"FindVantagePoint(${1:float max_distance})$0"
		],
		"description": "Get the nav area of the closest vantage point (within distance)"
	},
	"bool FireGameEvent(string name, handle table)": {
		"prefix": "FireGameEvent",
		"body": [
			"FireGameEvent(${1:string name}, ${2:handle table})$0"
		],
		"description": "Fire a game event to a listening callback function in script. Parameters are passed in a squirrel table."
	},
	"void FireScriptEvent(string event, table params)": {
		"prefix": "FireScriptEvent",
		"body": [
			"FireScriptEvent(${1:string event}, ${2:table params})$0"
		],
		"description": "Wrapper for __RunEventCallbacks()"
	},
	"bool FireScriptHook(string name, handle table)": {
		"prefix": "FireScriptHook",
		"body": [
			"FireScriptHook(${1:string name}, ${2:handle table})$0"
		],
		"description": "Fire a script hoook to a listening callback function in script. Parameters are passed in a squirrel table."
	},
	"void FiringTalk()": {
		"prefix": "FiringTalk",
		"body": [
			"FiringTalk()$0"
		],
		"description": "Makes eg. a heavy go AAAAAAAAAAaAaa like they are firing their minigun."
	},
	"handle First()": {
		"prefix": "First",
		"body": [
			"First()$0"
		],
		"description": "Begin an iteration over the list of entities"
	},
	"handle FirstMoveChild()": {
		"prefix": "FirstMoveChild",
		"body": [
			"FirstMoveChild()$0"
		],
		"description": "Returns the most-recent entity parented to this one."
	},
	"void FlagForUpdate(bool toggle)": {
		"prefix": "FlagForUpdate",
		"body": [
			"FlagForUpdate(${1:bool toggle})$0"
		],
		"description": "Flag this bot for update"
	},
	"bool FlagsMayBeCapped()": {
		"prefix": "FlagsMayBeCapped",
		"body": [
			"FlagsMayBeCapped()$0"
		],
		"description": "May a flag be captured?"
	},
	"void ForceChangeTeam(int team, bool full_team_switch)": {
		"prefix": "ForceChangeTeam",
		"body": [
			"ForceChangeTeam(${1:int team}, ${2:bool full_team_switch})$0"
		],
		"description": "Force player to change their team. Setting the bool to true will not remove nemesis relationships or reset the player's class, as well as not slaying the player."
	},
	"void ForceEnableUpgrades(int state)": {
		"prefix": "ForceEnableUpgrades",
		"body": [
			"ForceEnableUpgrades(${1:int state})$0"
		],
		"description": "Whether to force on MvM-styled upgrades on/off. 0 -> default, 1 -> force off, 2 -> force on"
	},
	"void ForceEscortPushLogic(int state)": {
		"prefix": "ForceEscortPushLogic",
		"body": [
			"ForceEscortPushLogic(${1:int state})$0"
		],
		"description": "Forces payload pushing logic. 0 -> default, 1 -> force off, 2 -> force on"
	},
	"void ForceRegenerateAndRespawn()": {
		"prefix": "ForceRegenerateAndRespawn",
		"body": [
			"ForceRegenerateAndRespawn()$0"
		],
		"description": "Force regenerates and respawns the player"
	},
	"void ForceRespawn()": {
		"prefix": "ForceRespawn",
		"body": [
			"ForceRespawn()$0"
		],
		"description": "Force respawns the player"
	},
	"Vector Forward()": {
		"prefix": "Forward",
		"body": [
			"Forward()$0"
		],
		"description": "Returns the Forward Vector of the angles."
	},
	"float FractionPotentialGap(Vector from, Vector to)": {
		"prefix": "FractionPotentialGap",
		"body": [
			"FractionPotentialGap(${1:Vector from}, ${2:Vector to})$0"
		],
		"description": "If the locomotor cannot jump over the gap, returns the fraction of the jumpable ray"
	},
	"float FractionPotentiallyTraversable(Vector from, Vector to, bool immediately)": {
		"prefix": "FractionPotentiallyTraversable",
		"body": [
			"FractionPotentiallyTraversable(${1:Vector from}, ${2:Vector to}, ${3:bool immediately})$0"
		],
		"description": "If the locomotor could not move along the line given, returns the fraction of the walkable ray. If immediately is true, breakables are considered non-traverseable"
	},
	"float FrameTime()": {
		"prefix": "FrameTime",
		"body": [
			"FrameTime()$0"
		],
		"description": "Get the time spent on the server in the last frame"
	},
	"GO_EAST": {
		"prefix": "GO_EAST",
		"body": [
			"GO_EAST$0"
		],
		"description": "1"
	},
	"GO_ELEVATOR_DOWN": {
		"prefix": "GO_ELEVATOR_DOWN",
		"body": [
			"GO_ELEVATOR_DOWN$0"
		],
		"description": "8"
	},
	"GO_ELEVATOR_UP": {
		"prefix": "GO_ELEVATOR_UP",
		"body": [
			"GO_ELEVATOR_UP$0"
		],
		"description": "7"
	},
	"GO_JUMP": {
		"prefix": "GO_JUMP",
		"body": [
			"GO_JUMP$0"
		],
		"description": "6"
	},
	"GO_LADDER_DOWN": {
		"prefix": "GO_LADDER_DOWN",
		"body": [
			"GO_LADDER_DOWN$0"
		],
		"description": "5"
	},
	"GO_LADDER_UP": {
		"prefix": "GO_LADDER_UP",
		"body": [
			"GO_LADDER_UP$0"
		],
		"description": "4"
	},
	"GO_NORTH": {
		"prefix": "GO_NORTH",
		"body": [
			"GO_NORTH$0"
		],
		"description": "0"
	},
	"GO_SOUTH": {
		"prefix": "GO_SOUTH",
		"body": [
			"GO_SOUTH$0"
		],
		"description": "2"
	},
	"GO_WEST": {
		"prefix": "GO_WEST",
		"body": [
			"GO_WEST$0"
		],
		"description": "3"
	},
	"GR_NUM_ROUND_STATES": {
		"prefix": "GR_NUM_ROUND_STATES",
		"body": [
			"GR_NUM_ROUND_STATES$0"
		],
		"description": "11"
	},
	"GR_STATE_BETWEEN_RNDS": {
		"prefix": "GR_STATE_BETWEEN_RNDS",
		"body": [
			"GR_STATE_BETWEEN_RNDS$0"
		],
		"description": "10"
	},
	"GR_STATE_BONUS": {
		"prefix": "GR_STATE_BONUS",
		"body": [
			"GR_STATE_BONUS$0"
		],
		"description": "9"
	},
	"GR_STATE_GAME_OVER": {
		"prefix": "GR_STATE_GAME_OVER",
		"body": [
			"GR_STATE_GAME_OVER$0"
		],
		"description": "8"
	},
	"GR_STATE_INIT": {
		"prefix": "GR_STATE_INIT",
		"body": [
			"GR_STATE_INIT$0"
		],
		"description": "0"
	},
	"GR_STATE_PREGAME": {
		"prefix": "GR_STATE_PREGAME",
		"body": [
			"GR_STATE_PREGAME$0"
		],
		"description": "1"
	},
	"GR_STATE_PREROUND": {
		"prefix": "GR_STATE_PREROUND",
		"body": [
			"GR_STATE_PREROUND$0"
		],
		"description": "3"
	},
	"GR_STATE_RESTART": {
		"prefix": "GR_STATE_RESTART",
		"body": [
			"GR_STATE_RESTART$0"
		],
		"description": "6"
	},
	"GR_STATE_RND_RUNNING": {
		"prefix": "GR_STATE_RND_RUNNING",
		"body": [
			"GR_STATE_RND_RUNNING$0"
		],
		"description": "4"
	},
	"GR_STATE_STALEMATE": {
		"prefix": "GR_STATE_STALEMATE",
		"body": [
			"GR_STATE_STALEMATE$0"
		],
		"description": "7"
	},
	"GR_STATE_STARTGAME": {
		"prefix": "GR_STATE_STARTGAME",
		"body": [
			"GR_STATE_STARTGAME$0"
		],
		"description": "2"
	},
	"GR_STATE_TEAM_WIN": {
		"prefix": "GR_STATE_TEAM_WIN",
		"body": [
			"GR_STATE_TEAM_WIN$0"
		],
		"description": "5"
	},
	"GameEventCallbacks": {
		"prefix": "GameEventCallbacks",
		"body": [
			"GameEventCallbacks$0"
		],
		"description": "Table of registered game event callbacks."
	},
	"bool GameModeUsesCurrency()": {
		"prefix": "GameModeUsesCurrency",
		"body": [
			"GameModeUsesCurrency()$0"
		],
		"description": "Does the current gamemode have currency?"
	},
	"bool GameModeUsesMiniBosses()": {
		"prefix": "GameModeUsesMiniBosses",
		"body": [
			"GameModeUsesMiniBosses()$0"
		],
		"description": "Does the current gamemode have minibosses?"
	},
	"bool GameModeUsesUpgrades()": {
		"prefix": "GameModeUsesUpgrades",
		"body": [
			"GameModeUsesUpgrades()$0"
		],
		"description": "Does the current gamemode have upgrades?"
	},
	"void GenerateAndWearItem(string item_name)": {
		"prefix": "GenerateAndWearItem",
		"body": [
			"GenerateAndWearItem(${1:string item_name})$0"
		],
		"description": "Give me an item!"
	},
	"QAngle GetAbsAngles()": {
		"prefix": "GetAbsAngles",
		"body": [
			"GetAbsAngles()$0"
		],
		"description": "Get entity pitch, yaw, roll as QAngles"
	},
	"Vector GetAbsVelocity()": {
		"prefix": "GetAbsVelocity",
		"body": [
			"GetAbsVelocity()$0"
		],
		"description": "Returns the current absolute velocity of the entity"
	},
	"handle GetActiveWeapon()": {
		"prefix": "GetActiveWeapon",
		"body": [
			"GetActiveWeapon()$0"
		],
		"description": "Get the player's current weapon"
	},
	"handle GetAdjacentArea(int dir, int n)": {
		"prefix": "GetAdjacentArea",
		"body": [
			"GetAdjacentArea(${1:int dir}, ${2:int n})$0"
		],
		"description": "Return the n'th adjacent area in the given direction."
	},
	"void GetAdjacentAreas(int dir, handle table)": {
		"prefix": "GetAdjacentAreas",
		"body": [
			"GetAdjacentAreas(${1:int dir}, ${2:handle table})$0"
		],
		"description": "Fills a passed in table with all adjacent areas in the given direction."
	},
	"int GetAdjacentCount(int dir)": {
		"prefix": "GetAdjacentCount",
		"body": [
			"GetAdjacentCount(${1:int dir})$0"
		],
		"description": "Get the number of adjacent areas in the given direction."
	},
	"void GetAllAreas(handle table)": {
		"prefix": "GetAllAreas",
		"body": [
			"GetAllAreas(${1:handle table})$0"
		],
		"description": "fills a passed in table of all nav areas"
	},
	"Vector GetAngles()": {
		"prefix": "GetAngles",
		"body": [
			"GetAngles()$0"
		],
		"description": "Get entity pitch, yaw, roll as a Vector"
	},
	"Vector GetAngularVelocity()": {
		"prefix": "GetAngularVelocity",
		"body": [
			"GetAngularVelocity()$0"
		],
		"description": "Get the local angular velocity - returns a vector of pitch, yaw, and roll"
	},
	"void GetAreasWithAttributes(int bits, handle table)": {
		"prefix": "GetAreasWithAttributes",
		"body": [
			"GetAreasWithAttributes(${1:int bits}, ${2:handle table})$0"
		],
		"description": "fills a passed in table of all nav areas that have the specified attributes"
	},
	"QAngle GetAttachmentAngles(int ID)": {
		"prefix": "GetAttachmentAngles",
		"body": [
			"GetAttachmentAngles(${1:int ID})$0"
		],
		"description": "Get an attachment's angles as a QAngle, by ID."
	},
	"int GetAttachmentBone(int ID)": {
		"prefix": "GetAttachmentBone",
		"body": [
			"GetAttachmentBone(${1:int ID})$0"
		],
		"description": "Get an attachment's parent bone index by ID."
	},
	"Vector GetAttachmentOrigin(int ID)": {
		"prefix": "GetAttachmentOrigin",
		"body": [
			"GetAttachmentOrigin(${1:int ID})$0"
		],
		"description": "Get an attachment's origin as a Vector, by ID."
	},
	"int GetAttributes()": {
		"prefix": "GetAttributes",
		"body": [
			"GetAttributes()$0"
		],
		"description": "Get area attribute bits."
	},
	"float GetAvoidanceObstacleHeight()": {
		"prefix": "GetAvoidanceObstacleHeight",
		"body": [
			"GetAvoidanceObstacleHeight()$0"
		],
		"description": "Returns the maximum height of the obstruction above the ground."
	},
	"int GetBackstabs()": {
		"prefix": "GetBackstabs",
		"body": [
			"GetBackstabs()$0"
		],
		"description": ""
	},
	"Vector GetBaseVelocity()": {
		"prefix": "GetBaseVelocity",
		"body": [
			"GetBaseVelocity()$0"
		],
		"description": "Returns any constant velocity currently being imparted onto the entity. This includes being pushed by effects like enttrigger_push and players standing on moving geometry like elevators. Should always returns a zero vector if the entity is not affected by any movement effects."
	},
	"INextBotComponent GetBodyInterface()": {
		"prefix": "GetBodyInterface",
		"body": [
			"GetBodyInterface()$0"
		],
		"description": "Get this bot's body interface"
	},
	"int GetBodygroup(int ID)": {
		"prefix": "GetBodygroup",
		"body": [
			"GetBodygroup(${1:int ID})$0"
		],
		"description": "Get the bodygroup value by bodygroup ID."
	},
	"string GetBodygroupName(int ID)": {
		"prefix": "GetBodygroupName",
		"body": [
			"GetBodygroupName(${1:int ID})$0"
		],
		"description": "Get the bodygroup's name by ID."
	},
	"string GetBodygroupPartName(int group, int part)": {
		"prefix": "GetBodygroupPartName",
		"body": [
			"GetBodygroupPartName(${1:int group}, ${2:int part})$0"
		],
		"description": "Get the bodygroup's name by group and part."
	},
	"QAngle GetBoneAngles(int ID)": {
		"prefix": "GetBoneAngles",
		"body": [
			"GetBoneAngles(${1:int ID})$0"
		],
		"description": "Get the bone's angles as a QAngle, by ID."
	},
	"Vector GetBoneOrigin(int ID)": {
		"prefix": "GetBoneOrigin",
		"body": [
			"GetBoneOrigin(${1:int ID})$0"
		],
		"description": "Get the bone's origin Vector by ID."
	},
	"int GetBonusPoints()": {
		"prefix": "GetBonusPoints",
		"body": [
			"GetBonusPoints()$0"
		],
		"description": ""
	},
	"bool GetClientConvarValue(string name)": {
		"prefix": "GetClientConvarValue",
		"body": [
			"GetClientConvarValue(${1:string name})$0"
		],
		"description": "Returns the convar as a bool. May return null if no such convar."
	},
	"int GetBotId()": {
		"prefix": "GetBotId",
		"body": [
			"GetBotId()$0"
		],
		"description": "Get this bot's id"
	},
	"int GetBotType()": {
		"prefix": "GetBotType",
		"body": [
			"GetBotType()$0"
		],
		"description": ""
	},
	"Vector GetBoundingMaxs()": {
		"prefix": "GetBoundingMaxs",
		"body": [
			"GetBoundingMaxs()$0"
		],
		"description": "Get a vector containing max bounds, centered on object"
	},
	"Vector GetBoundingMaxsOriented()": {
		"prefix": "GetBoundingMaxsOriented",
		"body": [
			"GetBoundingMaxsOriented()$0"
		],
		"description": "Get a vector containing max bounds, centered on object, taking the object's orientation into account"
	},
	"Vector GetBoundingMins()": {
		"prefix": "GetBoundingMins",
		"body": [
			"GetBoundingMins()$0"
		],
		"description": "Get a vector containing min bounds, centered on object"
	},
	"Vector GetBoundingMinsOriented()": {
		"prefix": "GetBoundingMinsOriented",
		"body": [
			"GetBoundingMinsOriented()$0"
		],
		"description": "Get a vector containing min bounds, centered on object, taking the object's orientation into account"
	},
	"int GetBuildingsDestroyed()": {
		"prefix": "GetBuildingsDestroyed",
		"body": [
			"GetBuildingsDestroyed()$0"
		],
		"description": ""
	},
	"int GetCaptures()": {
		"prefix": "GetCaptures",
		"body": [
			"GetCaptures()$0"
		],
		"description": ""
	},
	"Vector GetCenter()": {
		"prefix": "GetCenter",
		"body": [
			"GetCenter()$0"
		],
		"description": "Get center origin of area."
	},
	"Vector GetClassEyeHeight()": {
		"prefix": "GetClassEyeHeight",
		"body": [
			"GetClassEyeHeight()$0"
		],
		"description": "Gets the eye height of the player"
	},
	"int GetClassLimit(int class)": {
		"prefix": "GetClassLimit",
		"body": [
			"GetClassLimit(${1:int class})$0"
		],
		"description": "Get class limit for class. See Constants.ETFClass"
	},
	"string GetClassname()": {
		"prefix": "GetClassname",
		"body": [
			"GetClassname()$0"
		],
		"description": ""
	},
	"string GetClientConvarValue(string name, int entindex)": {
		"prefix": "GetClientConvarValue",
		"body": [
			"GetClientConvarValue(${1:string name}, ${2:int entindex})$0"
		],
		"description": "Returns the convar value for the entindex as a string. Only works on client convars with the FCVAR_USERINFO flag."
	},
	"GetCollisionGroup()": {
		"prefix": "GetCollisionGroup",
		"body": [
			"GetCollisionGroup()$0"
		],
		"description": "Gets the current collision group of the entity."
	},
	"float GetCondDuration(ETFCond cond)": {
		"prefix": "GetCondDuration",
		"body": [
			"GetCondDuration(${1:ETFCond cond})$0"
		],
		"description": "Returns duration of the condition. Returns 0 if the cond is not applied. Returns -1 if the cond is infinite."
	},
	"Vector GetCorner(int dir)": {
		"prefix": "GetCorner",
		"body": [
			"GetCorner(${1:int dir})$0"
		],
		"description": "Get corner origin of area."
	},
	"int GetCurrency()": {
		"prefix": "GetCurrency",
		"body": [
			"GetCurrency()$0"
		],
		"description": "Get player's cash for game modes with upgrades, ie. MvM"
	},
	"float GetCurrentTauntMoveSpeed()": {
		"prefix": "GetCurrentTauntMoveSpeed",
		"body": [
			"GetCurrentTauntMoveSpeed()$0"
		],
		"description": ""
	},
	"float GetCycle()": {
		"prefix": "GetCycle",
		"body": [
			"GetCycle()$0"
		],
		"description": "Gets the model's current animation cycle rate."
	},
	"float GetDeathDropHeight()": {
		"prefix": "GetDeathDropHeight",
		"body": [
			"GetDeathDropHeight()$0"
		],
		"description": "Distance at which we will die if we fall"
	},
	"int GetDefaultClip1()": {
		"prefix": "GetDefaultClip1",
		"body": [
			"GetDefaultClip1()$0"
		],
		"description": "Default size of clip1"
	},
	"int GetDefaultClip2()": {
		"prefix": "GetDefaultClip2",
		"body": [
			"GetDefaultClip2()$0"
		],
		"description": "Default size of clip2"
	},
	"int GetDefenses()": {
		"prefix": "GetDefenses",
		"body": [
			"GetDefenses()$0"
		],
		"description": ""
	},
	"float GetDesiredSpeed()": {
		"prefix": "GetDesiredSpeed",
		"body": [
			"GetDesiredSpeed()$0"
		],
		"description": "Get desired speed for locomotor movement"
	},
	"int GetDeveloperLevel()": {
		"prefix": "GetDeveloperLevel",
		"body": [
			"GetDeveloperLevel()$0"
		],
		"description": "Gets the level of 'developer'"
	},
	"ETFBotDifficultyType GetDifficulty()": {
		"prefix": "GetDifficulty",
		"body": [
			"GetDifficulty()$0"
		],
		"description": "Returns the bot's difficulty level"
	},
	"int GetDisguiseAmmoCount()": {
		"prefix": "GetDisguiseAmmoCount",
		"body": [
			"GetDisguiseAmmoCount()$0"
		],
		"description": ""
	},
	"handle GetDisguiseTarget()": {
		"prefix": "GetDisguiseTarget",
		"body": [
			"GetDisguiseTarget()$0"
		],
		"description": ""
	},
	"int GetDisguiseTeam()": {
		"prefix": "GetDisguiseTeam",
		"body": [
			"GetDisguiseTeam()$0"
		],
		"description": ""
	},
	"float GetDistanceSquaredToPoint(Vector pos)": {
		"prefix": "GetDistanceSquaredToPoint",
		"body": [
			"GetDistanceSquaredToPoint(${1:Vector pos})$0"
		],
		"description": "Return shortest distance between point and this area."
	},
	"int GetDominations()": {
		"prefix": "GetDominations",
		"body": [
			"GetDominations()$0"
		],
		"description": ""
	},
	"handle GetDoor()": {
		"prefix": "GetDoor",
		"body": [
			"GetDoor()$0"
		],
		"description": "Returns the door entity above the area."
	},
	"int GetEFlags()": {
		"prefix": "GetEFlags",
		"body": [
			"GetEFlags()$0"
		],
		"description": ""
	},
	"handle GetElevator()": {
		"prefix": "GetElevator",
		"body": [
			"GetElevator()$0"
		],
		"description": "Returns the elevator if in an elevator's path."
	},
	"void GetElevatorAreas(handle table)": {
		"prefix": "GetElevatorAreas",
		"body": [
			"GetElevatorAreas(${1:handle table})$0"
		],
		"description": "Fills table with a collection of areas reachable via elevator from this area."
	},
	"GetEntityHandle()": {
		"prefix": "GetEntityHandle",
		"body": [
			"GetEntityHandle()$0"
		],
		"description": "Get the entity as an EHANDLE"
	},
	"int GetEntityIndex()": {
		"prefix": "GetEntityIndex",
		"body": [
			"GetEntityIndex()$0"
		],
		"description": ""
	},
	"Vector GetFeet()": {
		"prefix": "GetFeet",
		"body": [
			"GetFeet()$0"
		],
		"description": "Return position of feet - the driving point where the bot contacts the ground"
	},
	"CScriptKeyValues GetFirstSubKey()": {
		"prefix": "GetFirstSubKey",
		"body": [
			"GetFirstSubKey()$0"
		],
		"description": "Return the first sub key object."
	},
	"int GetFlags()": {
		"prefix": "GetFlags",
		"body": [
			"GetFlags()$0"
		],
		"description": ""
	},
	"float GetFloat(string name)": {
		"prefix": "GetFloat",
		"body": [
			"GetFloat(${1:string name})$0"
		],
		"description": "Returns the convar as a float. May return null if no such convar."
	},
	"bool GetForceLocalDraw()": {
		"prefix": "GetForceLocalDraw",
		"body": [
			"GetForceLocalDraw()$0"
		],
		"description": "Whether the player is being forced by SetForceLocalDraw to be drawn."
	},
	"Vector GetForwardVector()": {
		"prefix": "GetForwardVector",
		"body": [
			"GetForwardVector()$0"
		],
		"description": "Get the forward vector of the entity"
	},
	"int GetFrameCount()": {
		"prefix": "GetFrameCount",
		"body": [
			"GetFrameCount()$0"
		],
		"description": "Returns the engines current frame count"
	},
	"float GetFriction(handle player)": {
		"prefix": "GetFriction",
		"body": [
			"GetFriction(${1:handle player})$0"
		],
		"description": "Returns the Friction on a player entity, meaningless if not a player"
	},
	"string GetFunctionSignature(function func, string prefix)": {
		"prefix": "GetFunctionSignature",
		"body": [
			"GetFunctionSignature(${1:function func}, ${2:string prefix})$0"
		],
		"description": ""
	},
	"Vector GetFuturePosition(float x, float speed)": {
		"prefix": "GetFuturePosition",
		"body": [
			"GetFuturePosition(${1:float x}, ${2:float speed})$0"
		],
		"description": "Get a position on the track X seconds in the future."
	},
	"handle GetGrapplingHookTarget()": {
		"prefix": "GetGrapplingHookTarget",
		"body": [
			"GetGrapplingHookTarget()$0"
		],
		"description": "What entity is the player grappling?"
	},
	"float GetGravity()": {
		"prefix": "GetGravity",
		"body": [
			"GetGravity()$0"
		],
		"description": ""
	},
	"float GetGravityMultiplier()": {
		"prefix": "GetGravityMultiplier",
		"body": [
			"GetGravityMultiplier()$0"
		],
		"description": ""
	},
	"handle GetGround()": {
		"prefix": "GetGround",
		"body": [
			"GetGround()$0"
		],
		"description": "Return the current ground entity or NULL if not on the ground"
	},
	"Vector GetGroundMotionVector()": {
		"prefix": "GetGroundMotionVector",
		"body": [
			"GetGroundMotionVector()$0"
		],
		"description": "Return unit vector in XY plane describing our direction of motion - even if we are currently not moving"
	},
	"Vector GetGroundNormal()": {
		"prefix": "GetGroundNormal",
		"body": [
			"GetGroundNormal()$0"
		],
		"description": "Surface normal of the ground we are in contact with"
	},
	"float GetGroundSpeed()": {
		"prefix": "GetGroundSpeed",
		"body": [
			"GetGroundSpeed()$0"
		],
		"description": "Return current world space speed in XY plane"
	},
	"int GetHeadshots()": {
		"prefix": "GetHeadshots",
		"body": [
			"GetHeadshots()$0"
		],
		"description": ""
	},
	"int GetHealPoints()": {
		"prefix": "GetHealPoints",
		"body": [
			"GetHealPoints()$0"
		],
		"description": ""
	},
	"handle GetHealTarget()": {
		"prefix": "GetHealTarget",
		"body": [
			"GetHealTarget()$0"
		],
		"description": "Who is the medic healing?"
	},
	"int GetHealth()": {
		"prefix": "GetHealth",
		"body": [
			"GetHealth()$0"
		],
		"description": ""
	},
	"handle GetHomeArea()": {
		"prefix": "GetHomeArea",
		"body": [
			"GetHomeArea()$0"
		],
		"description": "Gets the home nav area of the bot"
	},
	"int GetHudHideFlags()": {
		"prefix": "GetHudHideFlags",
		"body": [
			"GetHudHideFlags()$0"
		],
		"description": ""
	},
	"int GetID()": {
		"prefix": "GetID",
		"body": [
			"GetID()$0"
		],
		"description": "Get area ID."
	},
	"float GetImmobileDuration()": {
		"prefix": "GetImmobileDuration",
		"body": [
			"GetImmobileDuration()$0"
		],
		"description": "How long have we been immobile"
	},
	"float GetImmobileSpeedThreshold()": {
		"prefix": "GetImmobileSpeedThreshold",
		"body": [
			"GetImmobileSpeedThreshold()$0"
		],
		"description": "Return units/second below which this actor is considered immobile"
	},
	"void GetIncomingConnections(int dir, handle table)": {
		"prefix": "GetIncomingConnections",
		"body": [
			"GetIncomingConnections(${1:int dir}, ${2:handle table})$0"
		],
		"description": "Fills a passed in table with areas connected TO this area by a ONE-WAY link (ie: we have no connection back to them)."
	},
	"int GetInt(string name)": {
		"prefix": "GetInt",
		"body": [
			"GetInt(${1:string name})$0"
		],
		"description": "Returns the convar as an int. May return null if no such convar."
	},
	"INextBotComponent GetIntentionInterface()": {
		"prefix": "GetIntentionInterface",
		"body": [
			"GetIntentionInterface()$0"
		],
		"description": "Get this bot's intention interface"
	},
	"int GetInvulns()": {
		"prefix": "GetInvulns",
		"body": [
			"GetInvulns()$0"
		],
		"description": ""
	},
	"bool GetKeyBool(string key)": {
		"prefix": "GetKeyBool",
		"body": [
			"GetKeyBool(${1:string key})$0"
		],
		"description": "Return the key value as a bool."
	},
	"float GetKeyFloat(string key)": {
		"prefix": "GetKeyFloat",
		"body": [
			"GetKeyFloat(${1:string key})$0"
		],
		"description": "Return the key value as a float."
	},
	"int GetKeyInt(string key)": {
		"prefix": "GetKeyInt",
		"body": [
			"GetKeyInt(${1:string key})$0"
		],
		"description": "Return the key value as an integer."
	},
	"string GetKeyString(string key)": {
		"prefix": "GetKeyString",
		"body": [
			"GetKeyString(${1:string key})$0"
		],
		"description": "Return the key value as a string."
	},
	"int GetKillAssists()": {
		"prefix": "GetKillAssists",
		"body": [
			"GetKillAssists()$0"
		],
		"description": ""
	},
	"handle GetLastKnownArea()": {
		"prefix": "GetLastKnownArea",
		"body": [
			"GetLastKnownArea()$0"
		],
		"description": "Return the last nav area occupied, NULL if unknown. See CTFNavArea."
	},
	"GetLastWeapon()": {
		"prefix": "GetLastWeapon",
		"body": [
			"GetLastWeapon()$0"
		],
		"description": ""
	},
	"Vector GetLeftVector()": {
		"prefix": "GetLeftVector",
		"body": [
			"GetLeftVector()$0"
		],
		"description": "Get the right vector of the entity. This is purely for compatibility."
	},
	"handle GetListenServerHost()": {
		"prefix": "GetListenServerHost",
		"body": [
			"GetListenServerHost()$0"
		],
		"description": "Get the local player on a listen server."
	},
	"QAngle GetLocalAngles()": {
		"prefix": "GetLocalAngles",
		"body": [
			"GetLocalAngles()$0"
		],
		"description": ""
	},
	"Vector GetLocalOrigin()": {
		"prefix": "GetLocalOrigin",
		"body": [
			"GetLocalOrigin()$0"
		],
		"description": ""
	},
	"Vector GetLocalVelocity()": {
		"prefix": "GetLocalVelocity",
		"body": [
			"GetLocalVelocity()$0"
		],
		"description": "Get Entity relative velocity"
	},
	"ILocomotion GetLocomotionInterface()": {
		"prefix": "GetLocomotionInterface",
		"body": [
			"GetLocomotionInterface()$0"
		],
		"description": "Get this bot's locomotion interface"
	},
	"bool GetMannVsMachineAlarmStatus()": {
		"prefix": "GetMannVsMachineAlarmStatus",
		"body": [
			"GetMannVsMachineAlarmStatus()$0"
		],
		"description": ""
	},
	"string GetMapName()": {
		"prefix": "GetMapName",
		"body": [
			"GetMapName()$0"
		],
		"description": "Get the name of the map."
	},
	"float GetMaxAcceleration()": {
		"prefix": "GetMaxAcceleration",
		"body": [
			"GetMaxAcceleration()$0"
		],
		"description": "Return maximum acceleration of locomotor"
	},
	"int GetMaxClip1()": {
		"prefix": "GetMaxClip1",
		"body": [
			"GetMaxClip1()$0"
		],
		"description": "Max size of clip1"
	},
	"int GetMaxClip2()": {
		"prefix": "GetMaxClip2",
		"body": [
			"GetMaxClip2()$0"
		],
		"description": "Max size of clip2"
	},
	"float GetMaxDeceleration()": {
		"prefix": "GetMaxDeceleration",
		"body": [
			"GetMaxDeceleration()$0"
		],
		"description": "Return maximum deceleration of locomotor"
	},
	"int GetMaxHealth()": {
		"prefix": "GetMaxHealth",
		"body": [
			"GetMaxHealth()$0"
		],
		"description": ""
	},
	"float GetMaxJumpHeight()": {
		"prefix": "GetMaxJumpHeight",
		"body": [
			"GetMaxJumpHeight()$0"
		],
		"description": "Return maximum height of a jump"
	},
	"float GetMaxVisionRangeOverride()": {
		"prefix": "GetMaxVisionRangeOverride",
		"body": [
			"GetMaxVisionRangeOverride()$0"
		],
		"description": "Gets the max vision range override for the bot"
	},
	"int GetModelIndex(string filename)": {
		"prefix": "GetModelIndex",
		"body": [
			"GetModelIndex(${1:string filename})$0"
		],
		"description": "Returns the index of the named model."
	},
	"handle GetModelKeyValues()": {
		"prefix": "GetModelKeyValues",
		"body": [
			"GetModelKeyValues()$0"
		],
		"description": "Get a KeyValue class instance on this entity's model"
	},
	"string GetModelName()": {
		"prefix": "GetModelName",
		"body": [
			"GetModelName()$0"
		],
		"description": "Returns the name of the model"
	},
	"float GetModelScale()": {
		"prefix": "GetModelScale",
		"body": [
			"GetModelScale()$0"
		],
		"description": "Get the model's scale."
	},
	"Vector GetMotionVector()": {
		"prefix": "GetMotionVector",
		"body": [
			"GetMotionVector()$0"
		],
		"description": "Return unit vector describing our direction of motion - even if we are currently not moving"
	},
	"handle GetMoveParent()": {
		"prefix": "GetMoveParent",
		"body": [
			"GetMoveParent()$0"
		],
		"description": "If in hierarchy, retrieves the entity's parent"
	},
	"int GetMoveType()": {
		"prefix": "GetMoveType",
		"body": [
			"GetMoveType()$0"
		],
		"description": ""
	},
	"string GetName()": {
		"prefix": "GetName",
		"body": [
			"GetName()$0"
		],
		"description": "Gets the weapon's name"
	},
	"handle GetNavArea(Vector origin, float flBeneath)": {
		"prefix": "GetNavArea",
		"body": [
			"GetNavArea(${1:Vector origin}, ${2:float flBeneath})$0"
		],
		"description": "given a position in the world, return the nav area that is closest to or below that height."
	},
	"handle GetNavAreaByID(int areaID)": {
		"prefix": "GetNavAreaByID",
		"body": [
			"GetNavAreaByID(${1:int areaID})$0"
		],
		"description": "get nav area by ID"
	},
	"int GetNavAreaCount()": {
		"prefix": "GetNavAreaCount",
		"body": [
			"GetNavAreaCount()$0"
		],
		"description": "return total number of nav areas"
	},
	"bool GetNavAreasFromBuildPath(handle startArea, handle endArea, Vector goalPos, float flMaxPathLength, int teamID, bool ignoreNavBlockers, handle table)": {
		"prefix": "GetNavAreasFromBuildPath",
		"body": [
			"GetNavAreasFromBuildPath(${1:handle startArea}, ${2:handle endArea}, ${3:Vector goalPos}, ${4:float flMaxPathLength}, ${5:int teamID}, ${6:bool ignoreNavBlockers}, ${7:handle table})$0"
		],
		"description": "Fills the table with areas from a path. Returns whether a path was found. If 'endArea' is NULL, will compute a path as close as possible to 'goalPos'."
	},
	"void GetNavAreasInRadius(Vector origin, float radius, handle table)": {
		"prefix": "GetNavAreasInRadius",
		"body": [
			"GetNavAreasInRadius(${1:Vector origin}, ${2:float radius}, ${3:handle table})$0"
		],
		"description": "fills a passed in table of nav areas within radius"
	},
	"void GetNavAreasOverlappingEntityExtent(handle entity, handle table)": {
		"prefix": "GetNavAreasOverlappingEntityExtent",
		"body": [
			"GetNavAreasOverlappingEntityExtent(${1:handle entity}, ${2:handle table})$0"
		],
		"description": "fills passed in table with areas overlapping entity's extent"
	},
	"handle GetNearestKnownSappableTarget()": {
		"prefix": "GetNearestKnownSappableTarget",
		"body": [
			"GetNearestKnownSappableTarget()$0"
		],
		"description": "Gets the nearest known sappable target"
	},
	"handle GetNearestNavArea(Vector origin, float maxDist, bool checkLOS, bool checkGround)": {
		"prefix": "GetNearestNavArea",
		"body": [
			"GetNearestNavArea(${1:Vector origin}, ${2:float maxDist}, ${3:bool checkLOS}, ${4:bool checkGround})$0"
		],
		"description": "given a position in the world, return the nav area that is closest to or below that height."
	},
	"float GetNextChangeClassTime()": {
		"prefix": "GetNextChangeClassTime",
		"body": [
			"GetNextChangeClassTime()$0"
		],
		"description": "Get next change class time."
	},
	"float GetNextChangeTeamTime()": {
		"prefix": "GetNextChangeTeamTime",
		"body": [
			"GetNextChangeTeamTime()$0"
		],
		"description": "Get next change team time."
	},
	"CScriptKeyValues GetNextKey()": {
		"prefix": "GetNextKey",
		"body": [
			"GetNextKey()$0"
		],
		"description": "Return the next neighbor key object to the one the method is called on."
	},
	"float GetNextRegenTime()": {
		"prefix": "GetNextRegenTime",
		"body": [
			"GetNextRegenTime()$0"
		],
		"description": "Get next health regen time."
	},
	"int GetNumElements(handle ntity entity, string outputName)": {
		"prefix": "GetNumElements",
		"body": [
			"GetNumElements(${1:handle ntity entity}, ${2:string outputName})$0"
		],
		"description": "Returns the number of array elements."
	},
	"void GetObstructingEntities(handle table)": {
		"prefix": "GetObstructingEntities",
		"body": [
			"GetObstructingEntities(${1:handle table})$0"
		],
		"description": "fills a passed in table of all obstructing entities"
	},
	"Vector GetOrigin()": {
		"prefix": "GetOrigin",
		"body": [
			"GetOrigin()$0"
		],
		"description": "This is GetAbsOrigin with a funny script name for some reason. Not changing it for legacy compat though."
	},
	"void GetOutputTable(handle entity, string outputName, table, int arrayElement)": {
		"prefix": "GetOutputTable",
		"body": [
			"GetOutputTable(${1:handle entity}, ${2:string outputName}, ${3:table}, ${4:int arrayElement})$0"
		],
		"description": "Fills the passed table with output information."
	},
	"bool GetOvertimeAllowedForCTF()": {
		"prefix": "GetOvertimeAllowedForCTF",
		"body": [
			"GetOvertimeAllowedForCTF()$0"
		],
		"description": ""
	},
	"handle GetOwner()": {
		"prefix": "GetOwner",
		"body": [
			"GetOwner()$0"
		],
		"description": "Gets this entity's owner"
	},
	"handle GetParent()": {
		"prefix": "GetParent",
		"body": [
			"GetParent()$0"
		],
		"description": "Returns the area just prior to this one in the search path."
	},
	"int GetParentHow()": {
		"prefix": "GetParentHow",
		"body": [
			"GetParentHow()$0"
		],
		"description": "Returns how we get from parent to us."
	},
	"Vector GetPhysAngularVelocity(handle entity)": {
		"prefix": "GetPhysAngularVelocity",
		"body": [
			"GetPhysAngularVelocity(${1:handle entity})$0"
		],
		"description": "Returns the Angular velocity of the entity. Deprecated, use the GetPhysAngularVelocity method on the entity instead."
	},
	"Vector GetPhysVelocity(handle entity)": {
		"prefix": "GetPhysVelocity",
		"body": [
			"GetPhysVelocity(${1:handle entity})$0"
		],
		"description": "Returns the velocity of the entity. Deprecated, use the GetPhysVelocity method on the entity instead."
	},
	"string GetPlaceName()": {
		"prefix": "GetPlaceName",
		"body": [
			"GetPlaceName()$0"
		],
		"description": "Get place name if it exists, null otherwise."
	},
	"float GetPlaybackRate()": {
		"prefix": "GetPlaybackRate",
		"body": [
			"GetPlaybackRate()$0"
		],
		"description": "Get the current animation's playback rate."
	},
	"int GetPlayerClass()": {
		"prefix": "GetPlayerClass",
		"body": [
			"GetPlayerClass()$0"
		],
		"description": ""
	},
	"int GetPlayerCount(int team)": {
		"prefix": "GetPlayerCount",
		"body": [
			"GetPlayerCount(${1:int team})$0"
		],
		"description": "Return number of players of given team currently within this area (team of zero means any/all)."
	},
	"handle GetPlayerFromUserID(int userid)": {
		"prefix": "GetPlayerFromUserID",
		"body": [
			"GetPlayerFromUserID(${1:int userid})$0"
		],
		"description": "Given a user id, return the entity, or null."
	},
	"Vector GetPlayerMaxs()": {
		"prefix": "GetPlayerMaxs",
		"body": [
			"GetPlayerMaxs()$0"
		],
		"description": "Get a vector containing max bounds of the player in local space. The player's model scale will affect the result."
	},
	"Vector GetPlayerMins()": {
		"prefix": "GetPlayerMins",
		"body": [
			"GetPlayerMins()$0"
		],
		"description": "Get a vector containing min bounds of the player in local space. The player's model scale will affect the result."
	},
	"float GetPlayerSpeechDuration(int playerIndex)": {
		"prefix": "GetPlayerSpeechDuration",
		"body": [
			"GetPlayerSpeechDuration(${1:int playerIndex})$0"
		],
		"description": "Returns the number of seconds the player has been continuously speaking."
	},
	"int GetPosition()": {
		"prefix": "GetPosition",
		"body": [
			"GetPosition()$0"
		],
		"description": "Gets the weapon's current position"
	},
	"string GetPreTemplateName()": {
		"prefix": "GetPreTemplateName",
		"body": [
			"GetPreTemplateName()$0"
		],
		"description": "Get the entity name stripped of template unique decoration"
	},
	"int GetPrimaryAmmoCount()": {
		"prefix": "GetPrimaryAmmoCount",
		"body": [
			"GetPrimaryAmmoCount()$0"
		],
		"description": "Current primary ammo count if no clip is used or to give a player if they pick up this weapon legacy style (not TF)"
	},
	"int GetPrimaryAmmoType()": {
		"prefix": "GetPrimaryAmmoType",
		"body": [
			"GetPrimaryAmmoType()$0"
		],
		"description": "Returns the primary ammo type"
	},
	"string GetPrintName()": {
		"prefix": "GetPrintName",
		"body": [
			"GetPrintName()$0"
		],
		"description": "Gets the weapon's print name"
	},
	"int GetPropArraySize(handle entity, string propertyName)": {
		"prefix": "GetPropArraySize",
		"body": [
			"GetPropArraySize(${1:handle entity}, ${2:string propertyName})$0"
		],
		"description": "Returns the size of an netprop array, or -1."
	},
	"bool GetPropBool(handle entity, string propertyName)": {
		"prefix": "GetPropBool",
		"body": [
			"GetPropBool(${1:handle entity}, ${2:string propertyName})$0"
		],
		"description": "Reads a boolean-valued netprop."
	},
	"bool GetPropBoolArray(handle entity, string propertyName, int arrayElement)": {
		"prefix": "GetPropBoolArray",
		"body": [
			"GetPropBoolArray(${1:handle entity}, ${2:string propertyName}, ${3:int arrayElement})$0"
		],
		"description": "Reads a boolean-valued netprop from an array."
	},
	"handle GetPropEntity(handle entity, string propertyName)": {
		"prefix": "GetPropEntity",
		"body": [
			"GetPropEntity(${1:handle entity}, ${2:string propertyName})$0"
		],
		"description": "Reads an EHANDLE-valued netprop (21 bit integer). Returns the script handle of the entity."
	},
	"handle GetPropEntityArray(handle entity, string propertyName, int arrayElement)": {
		"prefix": "GetPropEntityArray",
		"body": [
			"GetPropEntityArray(${1:handle entity}, ${2:string propertyName}, ${3:int arrayElement})$0"
		],
		"description": "Reads an EHANDLE-valued netprop (21 bit integer) from an array. Returns the script handle of the entity."
	},
	"float GetPropFloat(handle entity, string propertyName)": {
		"prefix": "GetPropFloat",
		"body": [
			"GetPropFloat(${1:handle entity}, ${2:string propertyName})$0"
		],
		"description": "Reads a float-valued netprop."
	},
	"float GetPropFloatArray(handle entity, string propertyName, int arrayElement)": {
		"prefix": "GetPropFloatArray",
		"body": [
			"GetPropFloatArray(${1:handle entity}, ${2:string propertyName}, ${3:int arrayElement})$0"
		],
		"description": "Reads a float-valued netprop from an array."
	},
	"bool GetPropInfo(handle entity, string propertyName, int arrayElement, handle table)": {
		"prefix": "GetPropInfo",
		"body": [
			"GetPropInfo(${1:handle entity}, ${2:string propertyName}, ${3:int arrayElement}, ${4:handle table})$0"
		],
		"description": "Fills in a passed table with property info for the provided entity."
	},
	"int GetPropInt(handle entity, string propertyName)": {
		"prefix": "GetPropInt",
		"body": [
			"GetPropInt(${1:handle entity}, ${2:string propertyName})$0"
		],
		"description": "Reads an integer-valued netprop."
	},
	"int GetPropIntArray(handle entity, string propertyName, int arrayElement)": {
		"prefix": "GetPropIntArray",
		"body": [
			"GetPropIntArray(${1:handle entity}, ${2:string propertyName}, ${3:int arrayElement})$0"
		],
		"description": "Reads an integer-valued netprop from an array."
	},
	"string GetPropString(handle entity, string propertyName)": {
		"prefix": "GetPropString",
		"body": [
			"GetPropString(${1:handle entity}, ${2:string propertyName})$0"
		],
		"description": "Reads an string-valued netprop."
	},
	"string GetPropStringArray(handle entity, string propertyName, int arrayElement)": {
		"prefix": "GetPropStringArray",
		"body": [
			"GetPropStringArray(${1:handle entity}, ${2:string propertyName}, ${3:int arrayElement})$0"
		],
		"description": "Reads an string-valued netprop from an array."
	},
	"string GetPropType(handle entity, string propertyName)": {
		"prefix": "GetPropType",
		"body": [
			"GetPropType(${1:handle entity}, ${2:string propertyName})$0"
		],
		"description": "Returns the name of the netprop type as a string."
	},
	"Vector GetPropVector(handle entity, string propertyName)": {
		"prefix": "GetPropVector",
		"body": [
			"GetPropVector(${1:handle entity}, ${2:string propertyName})$0"
		],
		"description": "Reads a 3D vector-valued netprop."
	},
	"Vector GetPropVectorArray(handle entity, string propertyName, int arrayElement)": {
		"prefix": "GetPropVectorArray",
		"body": [
			"GetPropVectorArray(${1:handle entity}, ${2:string propertyName}, ${3:int arrayElement})$0"
		],
		"description": "Reads a 3D vector-valued netprop from an array."
	},
	"float GetRageMeter()": {
		"prefix": "GetRageMeter",
		"body": [
			"GetRageMeter()$0"
		],
		"description": ""
	},
	"handle GetRandomAdjacentArea(int dir)": {
		"prefix": "GetRandomAdjacentArea",
		"body": [
			"GetRandomAdjacentArea(${1:int dir})$0"
		],
		"description": "Return a random adjacent area in the given direction."
	},
	"int GetResupplyPoints()": {
		"prefix": "GetResupplyPoints",
		"body": [
			"GetResupplyPoints()$0"
		],
		"description": ""
	},
	"int GetRevenge()": {
		"prefix": "GetRevenge",
		"body": [
			"GetRevenge()$0"
		],
		"description": ""
	},
	"Vector GetRightVector()": {
		"prefix": "GetRightVector",
		"body": [
			"GetRightVector()$0"
		],
		"description": "Get the right vector of the entity"
	},
	"handle GetRootMoveParent()": {
		"prefix": "GetRootMoveParent",
		"body": [
			"GetRootMoveParent()$0"
		],
		"description": "If in hierarchy, walks up the hierarchy to find the root parent"
	},
	"int GetRoundState()": {
		"prefix": "GetRoundState",
		"body": [
			"GetRoundState()$0"
		],
		"description": "Get current round state. See Constants.ERoundState"
	},
	"float GetRunSpeed()": {
		"prefix": "GetRunSpeed",
		"body": [
			"GetRunSpeed()$0"
		],
		"description": "Get maximum running speed"
	},
	"float GetScoutHypeMeter()": {
		"prefix": "GetScoutHypeMeter",
		"body": [
			"GetScoutHypeMeter()$0"
		],
		"description": ""
	},
	"string GetScriptId()": {
		"prefix": "GetScriptId",
		"body": [
			"GetScriptId()$0"
		],
		"description": "Retrieve the unique identifier used to refer to the entity within the scripting system."
	},
	"string GetScriptOverlayMaterial()": {
		"prefix": "GetScriptOverlayMaterial",
		"body": [
			"GetScriptOverlayMaterial()$0"
		],
		"description": "Gets the current overlay material set by SetScriptOverlayMaterial."
	},
	"handle GetScriptScope()": {
		"prefix": "GetScriptScope",
		"body": [
			"GetScriptScope()$0"
		],
		"description": "Retrieve the script-side data associated with an entity"
	},
	"string GetScriptThinkFunc()": {
		"prefix": "GetScriptThinkFunc",
		"body": [
			"GetScriptThinkFunc()$0"
		],
		"description": "Retrieve the name of the current script think func"
	},
	"int GetSecondaryAmmoCount()": {
		"prefix": "GetSecondaryAmmoCount",
		"body": [
			"GetSecondaryAmmoCount()$0"
		],
		"description": "Current secondary ammo count if no clip is used or to give a player if they pick up this weapon legacy style (not TF)"
	},
	"int GetSecondaryAmmoType()": {
		"prefix": "GetSecondaryAmmoType",
		"body": [
			"GetSecondaryAmmoType()$0"
		],
		"description": "Returns the secondary ammo type"
	},
	"int GetSequence()": {
		"prefix": "GetSequence",
		"body": [
			"GetSequence()$0"
		],
		"description": "Get the current-playing sequence's ID."
	},
	"string GetSequenceActivityName(int ID)": {
		"prefix": "GetSequenceActivityName",
		"body": [
			"GetSequenceActivityName(${1:int ID})$0"
		],
		"description": "Get the activity name for a sequence by sequence ID."
	},
	"float GetSequenceDuration(int ID)": {
		"prefix": "GetSequenceDuration",
		"body": [
			"GetSequenceDuration(${1:int ID})$0"
		],
		"description": "Get a sequence duration in seconds by sequence ID."
	},
	"string GetSequenceName(int ID)": {
		"prefix": "GetSequenceName",
		"body": [
			"GetSequenceName(${1:int ID})$0"
		],
		"description": "Get a sequence name by sequence ID."
	},
	"float GetSizeX()": {
		"prefix": "GetSizeX",
		"body": [
			"GetSizeX()$0"
		],
		"description": "Return the area size along the X axis."
	},
	"float GetSizeY()": {
		"prefix": "GetSizeY",
		"body": [
			"GetSizeY()$0"
		],
		"description": "Return the area size along the Y axis."
	},
	"int GetSkin()": {
		"prefix": "GetSkin",
		"body": [
			"GetSkin()$0"
		],
		"description": "Gets the current skin index."
	},
	"int GetSlot()": {
		"prefix": "GetSlot",
		"body": [
			"GetSlot()$0"
		],
		"description": "Gets the weapon's current slot"
	},
	"int GetSolid()": {
		"prefix": "GetSolid",
		"body": [
			"GetSolid()$0"
		],
		"description": ""
	},
	"float GetSoundDuration(string soundname, string actormodelname)": {
		"prefix": "GetSoundDuration",
		"body": [
			"GetSoundDuration(${1:string soundname}, ${2:string actormodelname})$0"
		],
		"description": "Returns float duration of the sound. Actor model name is optional and can be left null."
	},
	"handle GetSpawnArea()": {
		"prefix": "GetSpawnArea",
		"body": [
			"GetSpawnArea()$0"
		],
		"description": "Return the nav area of where we spawned"
	},
	"float GetSpeed()": {
		"prefix": "GetSpeed",
		"body": [
			"GetSpeed()$0"
		],
		"description": "Return current world space speed (magnitude of velocity)"
	},
	"float GetSpeedLimit()": {
		"prefix": "GetSpeedLimit",
		"body": [
			"GetSpeedLimit()$0"
		],
		"description": "Get maximum speed bot can reach, regardless of desired speed"
	},
	"float GetSpyCloakMeter()": {
		"prefix": "GetSpyCloakMeter",
		"body": [
			"GetSpyCloakMeter()$0"
		],
		"description": ""
	},
	"float GetSquadFormationError()": {
		"prefix": "GetSquadFormationError",
		"body": [
			"GetSquadFormationError()$0"
		],
		"description": "Gets our formation error coefficient."
	},
	"float GetStepHeight()": {
		"prefix": "GetStepHeight",
		"body": [
			"GetStepHeight()$0"
		],
		"description": "If delta Z is lower than this, we can step up the surface (like a stair step), but if delta Z is greater than this, we have to jump to get up."
	},
	"int GetStopWatchState()": {
		"prefix": "GetStopWatchState",
		"body": [
			"GetStopWatchState()$0"
		],
		"description": "Get the current stopwatch state. See Constants.EStopwatchState"
	},
	"string GetStr(string name)": {
		"prefix": "GetStr",
		"body": [
			"GetStr(${1:string name})$0"
		],
		"description": "Returns the convar as a string. May return null if no such convar."
	},
	"float GetStuckDuration()": {
		"prefix": "GetStuckDuration",
		"body": [
			"GetStuckDuration()$0"
		],
		"description": "Return how long we've been stuck"
	},
	"int GetSubType()": {
		"prefix": "GetSubType",
		"body": [
			"GetSubType()$0"
		],
		"description": "Get the weapon subtype"
	},
	"void GetTable(handle entity, int iPropType, handle table)": {
		"prefix": "GetTable",
		"body": [
			"GetTable(${1:handle entity}, ${2:int iPropType}, ${3:handle table})$0"
		],
		"description": "Fills in a passed table with all props of a specified type for the provided entity (set iPropType to 0 for SendTable or 1 for DataMap)"
	},
	"float GetTauntAttackTime()": {
		"prefix": "GetTauntAttackTime",
		"body": [
			"GetTauntAttackTime()$0"
		],
		"description": "Timestamp until a taunt attack \"lasts\". 0 if unavailable"
	},
	"float GetTauntRemoveTime()": {
		"prefix": "GetTauntRemoveTime",
		"body": [
			"GetTauntRemoveTime()$0"
		],
		"description": "Timestamp until taunt is stopped"
	},
	"int GetTeam()": {
		"prefix": "GetTeam",
		"body": [
			"GetTeam()$0"
		],
		"description": ""
	},
	"int GetTeleports()": {
		"prefix": "GetTeleports",
		"body": [
			"GetTeleports()$0"
		],
		"description": ""
	},
	"int GetTickLastUpdate()": {
		"prefix": "GetTickLastUpdate",
		"body": [
			"GetTickLastUpdate()$0"
		],
		"description": "Get last update tick"
	},
	"float GetTimeSinceCalledForMedic()": {
		"prefix": "GetTimeSinceCalledForMedic",
		"body": [
			"GetTimeSinceCalledForMedic()$0"
		],
		"description": "When did the player last call medic"
	},
	"float GetTravelDistanceToBombTarget()": {
		"prefix": "GetTravelDistanceToBombTarget",
		"body": [
			"GetTravelDistanceToBombTarget()$0"
		],
		"description": "Gets the travel distance to the MvM bomb target."
	},
	"float GetTraversableSlopeLimit()": {
		"prefix": "GetTraversableSlopeLimit",
		"body": [
			"GetTraversableSlopeLimit()$0"
		],
		"description": "Return Z component of unit normal of steepest traversable slope"
	},
	"Vector GetUpVector()": {
		"prefix": "GetUpVector",
		"body": [
			"GetUpVector()$0"
		],
		"description": "Get the up vector of the entity"
	},
	"GetUpdateInterval()": {
		"prefix": "GetUpdateInterval",
		"body": [
			"GetUpdateInterval()$0"
		],
		"description": "Returns time between updates"
	},
	"float GetVehicleReverseTime()": {
		"prefix": "GetVehicleReverseTime",
		"body": [
			"GetVehicleReverseTime()$0"
		],
		"description": "Timestamp when kart was reversed"
	},
	"Vector GetVelocity()": {
		"prefix": "GetVelocity",
		"body": [
			"GetVelocity()$0"
		],
		"description": "Return current world space velocity"
	},
	"INextBotComponent GetVisionInterface()": {
		"prefix": "GetVisionInterface",
		"body": [
			"GetVisionInterface()$0"
		],
		"description": "Get this bot's vision interface"
	},
	"float GetWalkSpeed()": {
		"prefix": "GetWalkSpeed",
		"body": [
			"GetWalkSpeed()$0"
		],
		"description": "Get maximum walking speed"
	},
	"int GetWaterLevel()": {
		"prefix": "GetWaterLevel",
		"body": [
			"GetWaterLevel()$0"
		],
		"description": "This function tells you how much of the entity is underwater. It returns a value of 0 if not underwater, 1 if the feet are (touching water brush), 2 if the waist is (center of the hull of the entity), and 3 if the head is (eyes position)."
	},
	"int GetWaterType()": {
		"prefix": "GetWaterType",
		"body": [
			"GetWaterType()$0"
		],
		"description": "It returns the type of water the entity is currently submerged in. 32 for water and 16 for slime."
	},
	"int GetWeaponFlags()": {
		"prefix": "GetWeaponFlags",
		"body": [
			"GetWeaponFlags()$0"
		],
		"description": "Get the weapon flags"
	},
	"int GetWeight()": {
		"prefix": "GetWeight",
		"body": [
			"GetWeight()$0"
		],
		"description": "Get the weapon weighting/importance"
	},
	"int GetWinningTeam()": {
		"prefix": "GetWinningTeam",
		"body": [
			"GetWinningTeam()$0"
		],
		"description": "Who won!"
	},
	"float GetZ(Vector pos)": {
		"prefix": "GetZ",
		"body": [
			"GetZ(${1:Vector pos})$0"
		],
		"description": "Return Z of area at (x,y) of 'pos'"
	},
	"GoldenRatio": {
		"prefix": "GoldenRatio",
		"body": [
			"GoldenRatio$0"
		],
		"description": "1.61803"
	},
	"void GrantOrRemoveAllUpgrades(bool remove, bool refund)": {
		"prefix": "GrantOrRemoveAllUpgrades",
		"body": [
			"GrantOrRemoveAllUpgrades(${1:bool remove}, ${2:bool refund})$0"
		],
		"description": ""
	},
	"HARD": {
		"prefix": "HARD",
		"body": [
			"HARD$0"
		],
		"description": "2"
	},
	"HIDEHUD_ALL": {
		"prefix": "HIDEHUD_ALL",
		"body": [
			"HIDEHUD_ALL$0"
		],
		"description": "4"
	},
	"HIDEHUD_BITCOUNT": {
		"prefix": "HIDEHUD_BITCOUNT",
		"body": [
			"HIDEHUD_BITCOUNT$0"
		],
		"description": "17"
	},
	"HIDEHUD_BONUS_PROGRESS": {
		"prefix": "HIDEHUD_BONUS_PROGRESS",
		"body": [
			"HIDEHUD_BONUS_PROGRESS$0"
		],
		"description": "2048"
	},
	"HIDEHUD_BUILDING_STATUS": {
		"prefix": "HIDEHUD_BUILDING_STATUS",
		"body": [
			"HIDEHUD_BUILDING_STATUS$0"
		],
		"description": "4096"
	},
	"HIDEHUD_CHAT": {
		"prefix": "HIDEHUD_CHAT",
		"body": [
			"HIDEHUD_CHAT$0"
		],
		"description": "128"
	},
	"HIDEHUD_CLOAK_AND_FEIGN": {
		"prefix": "HIDEHUD_CLOAK_AND_FEIGN",
		"body": [
			"HIDEHUD_CLOAK_AND_FEIGN$0"
		],
		"description": "8192"
	},
	"HIDEHUD_CROSSHAIR": {
		"prefix": "HIDEHUD_CROSSHAIR",
		"body": [
			"HIDEHUD_CROSSHAIR$0"
		],
		"description": "256"
	},
	"HIDEHUD_FLASHLIGHT": {
		"prefix": "HIDEHUD_FLASHLIGHT",
		"body": [
			"HIDEHUD_FLASHLIGHT$0"
		],
		"description": "2"
	},
	"HIDEHUD_HEALTH": {
		"prefix": "HIDEHUD_HEALTH",
		"body": [
			"HIDEHUD_HEALTH$0"
		],
		"description": "8"
	},
	"HIDEHUD_INVEHICLE": {
		"prefix": "HIDEHUD_INVEHICLE",
		"body": [
			"HIDEHUD_INVEHICLE$0"
		],
		"description": "1024"
	},
	"HIDEHUD_METAL": {
		"prefix": "HIDEHUD_METAL",
		"body": [
			"HIDEHUD_METAL$0"
		],
		"description": "32768"
	},
	"HIDEHUD_MISCSTATUS": {
		"prefix": "HIDEHUD_MISCSTATUS",
		"body": [
			"HIDEHUD_MISCSTATUS$0"
		],
		"description": "64"
	},
	"HIDEHUD_NEEDSUIT": {
		"prefix": "HIDEHUD_NEEDSUIT",
		"body": [
			"HIDEHUD_NEEDSUIT$0"
		],
		"description": "32"
	},
	"HIDEHUD_PIPES_AND_CHARGE": {
		"prefix": "HIDEHUD_PIPES_AND_CHARGE",
		"body": [
			"HIDEHUD_PIPES_AND_CHARGE$0"
		],
		"description": "16384"
	},
	"HIDEHUD_PLAYERDEAD": {
		"prefix": "HIDEHUD_PLAYERDEAD",
		"body": [
			"HIDEHUD_PLAYERDEAD$0"
		],
		"description": "16"
	},
	"HIDEHUD_TARGET_ID": {
		"prefix": "HIDEHUD_TARGET_ID",
		"body": [
			"HIDEHUD_TARGET_ID$0"
		],
		"description": "65536"
	},
	"HIDEHUD_VEHICLE_CROSSHAIR": {
		"prefix": "HIDEHUD_VEHICLE_CROSSHAIR",
		"body": [
			"HIDEHUD_VEHICLE_CROSSHAIR$0"
		],
		"description": "512"
	},
	"HIDEHUD_WEAPONSELECTION": {
		"prefix": "HIDEHUD_WEAPONSELECTION",
		"body": [
			"HIDEHUD_WEAPONSELECTION$0"
		],
		"description": "1"
	},
	"HITGROUP_CHEST": {
		"prefix": "HITGROUP_CHEST",
		"body": [
			"HITGROUP_CHEST$0"
		],
		"description": "2"
	},
	"HITGROUP_GEAR": {
		"prefix": "HITGROUP_GEAR",
		"body": [
			"HITGROUP_GEAR$0"
		],
		"description": "10"
	},
	"HITGROUP_GENERIC": {
		"prefix": "HITGROUP_GENERIC",
		"body": [
			"HITGROUP_GENERIC$0"
		],
		"description": "0"
	},
	"HITGROUP_HEAD": {
		"prefix": "HITGROUP_HEAD",
		"body": [
			"HITGROUP_HEAD$0"
		],
		"description": "1"
	},
	"HITGROUP_LEFTARM": {
		"prefix": "HITGROUP_LEFTARM",
		"body": [
			"HITGROUP_LEFTARM$0"
		],
		"description": "4"
	},
	"HITGROUP_LEFTLEG": {
		"prefix": "HITGROUP_LEFTLEG",
		"body": [
			"HITGROUP_LEFTLEG$0"
		],
		"description": "6"
	},
	"HITGROUP_RIGHTARM": {
		"prefix": "HITGROUP_RIGHTARM",
		"body": [
			"HITGROUP_RIGHTARM$0"
		],
		"description": "5"
	},
	"HITGROUP_RIGHTLEG": {
		"prefix": "HITGROUP_RIGHTLEG",
		"body": [
			"HITGROUP_RIGHTLEG$0"
		],
		"description": "7"
	},
	"HITGROUP_STOMACH": {
		"prefix": "HITGROUP_STOMACH",
		"body": [
			"HITGROUP_STOMACH$0"
		],
		"description": "3"
	},
	"HOLD_FIRE_UNTIL_FULL_RELOAD": {
		"prefix": "HOLD_FIRE_UNTIL_FULL_RELOAD",
		"body": [
			"HOLD_FIRE_UNTIL_FULL_RELOAD$0"
		],
		"description": "2048"
	},
	"HUD_PRINTCENTER": {
		"prefix": "HUD_PRINTCENTER",
		"body": [
			"HUD_PRINTCENTER$0"
		],
		"description": "4"
	},
	"HUD_PRINTCONSOLE": {
		"prefix": "HUD_PRINTCONSOLE",
		"body": [
			"HUD_PRINTCONSOLE$0"
		],
		"description": "2"
	},
	"HUD_PRINTNOTIFY": {
		"prefix": "HUD_PRINTNOTIFY",
		"body": [
			"HUD_PRINTNOTIFY$0"
		],
		"description": "1"
	},
	"HUD_PRINTTALK": {
		"prefix": "HUD_PRINTTALK",
		"body": [
			"HUD_PRINTTALK$0"
		],
		"description": "3"
	},
	"bool HasAction(handle entity, string outputName)": {
		"prefix": "HasAction",
		"body": [
			"HasAction(${1:handle entity}, ${2:string outputName})$0"
		],
		"description": "Returns true if an action exists for the output."
	},
	"bool HasAnyAmmo()": {
		"prefix": "HasAnyAmmo",
		"body": [
			"HasAnyAmmo()$0"
		],
		"description": "Do we have any ammo?"
	},
	"bool HasAttributeTF(int bits)": {
		"prefix": "HasAttributeTF",
		"body": [
			"HasAttributeTF(${1:int bits})$0"
		],
		"description": "Has TF-specific area attribute bits of the given ones."
	},
	"bool HasAttributes(int bits)": {
		"prefix": "HasAttributes",
		"body": [
			"HasAttributes(${1:int bits})$0"
		],
		"description": "Has area attribute bits of the given ones."
	},
	"bool HasAvoidanceObstacle(float maxheight)": {
		"prefix": "HasAvoidanceObstacle",
		"body": [
			"HasAvoidanceObstacle(${1:float maxheight})$0"
		],
		"description": "Returns true if there's a large, immobile object obstructing this area"
	},
	"bool HasBotAttribute(int attribute)": {
		"prefix": "HasBotAttribute",
		"body": [
			"HasBotAttribute(${1:int attribute})$0"
		],
		"description": "Checks if this TFBot has the given attributes"
	},
	"bool HasBotTag(string tag)": {
		"prefix": "HasBotTag",
		"body": [
			"HasBotTag(${1:string tag})$0"
		],
		"description": "Checks if this TFBot has the given bot tag"
	},
	"bool HasItem()": {
		"prefix": "HasItem",
		"body": [
			"HasItem()$0"
		],
		"description": "Currently holding an item? Eg. capture flag"
	},
	"bool HasOutput(handle entity, string outputName)": {
		"prefix": "HasOutput",
		"body": [
			"HasOutput(${1:handle entity}, ${2:string outputName})$0"
		],
		"description": "Returns true if the output exists."
	},
	"float HasPotentialGap(Vector from, Vector to)": {
		"prefix": "HasPotentialGap",
		"body": [
			"HasPotentialGap(${1:Vector from}, ${2:Vector to})$0"
		],
		"description": "Checks if there is a possible gap that will need to be jumped over. Returns fraction of ray from 0 to 1."
	},
	"bool HasPrimaryAmmo()": {
		"prefix": "HasPrimaryAmmo",
		"body": [
			"HasPrimaryAmmo()$0"
		],
		"description": "Do we have any primary ammo?"
	},
	"bool HasProp(handle entity, string propertyName)": {
		"prefix": "HasProp",
		"body": [
			"HasProp(${1:handle entity}, ${2:string propertyName})$0"
		],
		"description": "Checks if a netprop exists."
	},
	"bool HasSecondaryAmmo()": {
		"prefix": "HasSecondaryAmmo",
		"body": [
			"HasSecondaryAmmo()$0"
		],
		"description": "Do we have any secondary ammo?"
	},
	"bool HasWeaponRestriction(int flags)": {
		"prefix": "HasWeaponRestriction",
		"body": [
			"HasWeaponRestriction(${1:int flags})$0"
		],
		"description": "Checks if this TFBot has the given weapon restriction flags"
	},
	"bool HaveStopWatchWinner()": {
		"prefix": "HaveStopWatchWinner",
		"body": [
			"HaveStopWatchWinner()$0"
		],
		"description": ""
	},
	"HookRootMetamethod()": {
		"prefix": "HookRootMetamethod",
		"body": [
			"HookRootMetamethod()$0"
		],
		"description": ""
	},
	"IGNORE_ENEMIES": {
		"prefix": "IGNORE_ENEMIES",
		"body": [
			"IGNORE_ENEMIES$0"
		],
		"description": "1024"
	},
	"IGNORE_FLAG": {
		"prefix": "IGNORE_FLAG",
		"body": [
			"IGNORE_FLAG$0"
		],
		"description": "131072"
	},
	"IN_ALT1": {
		"prefix": "IN_ALT1",
		"body": [
			"IN_ALT1$0"
		],
		"description": "16384"
	},
	"IN_ALT2": {
		"prefix": "IN_ALT2",
		"body": [
			"IN_ALT2$0"
		],
		"description": "32768"
	},
	"IN_ATTACK": {
		"prefix": "IN_ATTACK",
		"body": [
			"IN_ATTACK$0"
		],
		"description": "1"
	},
	"IN_ATTACK2": {
		"prefix": "IN_ATTACK2",
		"body": [
			"IN_ATTACK2$0"
		],
		"description": "2048"
	},
	"IN_ATTACK3": {
		"prefix": "IN_ATTACK3",
		"body": [
			"IN_ATTACK3$0"
		],
		"description": "33554432"
	},
	"IN_BACK": {
		"prefix": "IN_BACK",
		"body": [
			"IN_BACK$0"
		],
		"description": "16"
	},
	"IN_BULLRUSH": {
		"prefix": "IN_BULLRUSH",
		"body": [
			"IN_BULLRUSH$0"
		],
		"description": "4194304"
	},
	"IN_CANCEL": {
		"prefix": "IN_CANCEL",
		"body": [
			"IN_CANCEL$0"
		],
		"description": "64"
	},
	"IN_DUCK": {
		"prefix": "IN_DUCK",
		"body": [
			"IN_DUCK$0"
		],
		"description": "4"
	},
	"IN_FORWARD": {
		"prefix": "IN_FORWARD",
		"body": [
			"IN_FORWARD$0"
		],
		"description": "8"
	},
	"IN_GRENADE1": {
		"prefix": "IN_GRENADE1",
		"body": [
			"IN_GRENADE1$0"
		],
		"description": "8388608"
	},
	"IN_GRENADE2": {
		"prefix": "IN_GRENADE2",
		"body": [
			"IN_GRENADE2$0"
		],
		"description": "16777216"
	},
	"IN_JUMP": {
		"prefix": "IN_JUMP",
		"body": [
			"IN_JUMP$0"
		],
		"description": "2"
	},
	"IN_LEFT": {
		"prefix": "IN_LEFT",
		"body": [
			"IN_LEFT$0"
		],
		"description": "128"
	},
	"IN_MOVELEFT": {
		"prefix": "IN_MOVELEFT",
		"body": [
			"IN_MOVELEFT$0"
		],
		"description": "512"
	},
	"IN_MOVERIGHT": {
		"prefix": "IN_MOVERIGHT",
		"body": [
			"IN_MOVERIGHT$0"
		],
		"description": "1024"
	},
	"IN_RELOAD": {
		"prefix": "IN_RELOAD",
		"body": [
			"IN_RELOAD$0"
		],
		"description": "8192"
	},
	"IN_RIGHT": {
		"prefix": "IN_RIGHT",
		"body": [
			"IN_RIGHT$0"
		],
		"description": "256"
	},
	"IN_RUN": {
		"prefix": "IN_RUN",
		"body": [
			"IN_RUN$0"
		],
		"description": "4096"
	},
	"IN_SCORE": {
		"prefix": "IN_SCORE",
		"body": [
			"IN_SCORE$0"
		],
		"description": "65536"
	},
	"IN_SPEED": {
		"prefix": "IN_SPEED",
		"body": [
			"IN_SPEED$0"
		],
		"description": "131072"
	},
	"IN_USE": {
		"prefix": "IN_USE",
		"body": [
			"IN_USE$0"
		],
		"description": "32"
	},
	"IN_WALK": {
		"prefix": "IN_WALK",
		"body": [
			"IN_WALK$0"
		],
		"description": "262144"
	},
	"IN_WEAPON1": {
		"prefix": "IN_WEAPON1",
		"body": [
			"IN_WEAPON1$0"
		],
		"description": "1048576"
	},
	"IN_WEAPON2": {
		"prefix": "IN_WEAPON2",
		"body": [
			"IN_WEAPON2$0"
		],
		"description": "2097152"
	},
	"IN_ZOOM": {
		"prefix": "IN_ZOOM",
		"body": [
			"IN_ZOOM$0"
		],
		"description": "524288"
	},
	"IS_NPC": {
		"prefix": "IS_NPC",
		"body": [
			"IS_NPC$0"
		],
		"description": "4"
	},
	"void IgnitePlayer()": {
		"prefix": "IgnitePlayer",
		"body": [
			"IgnitePlayer()$0"
		],
		"description": ""
	},
	"bool InAirDueToExplosion()": {
		"prefix": "InAirDueToExplosion",
		"body": [
			"InAirDueToExplosion()$0"
		],
		"description": ""
	},
	"bool InAirDueToKnockback()": {
		"prefix": "InAirDueToKnockback",
		"body": [
			"InAirDueToKnockback()$0"
		],
		"description": ""
	},
	"bool InCond(ETFCond cond)": {
		"prefix": "InCond",
		"body": [
			"InCond(${1:ETFCond cond})$0"
		],
		"description": ""
	},
	"bool InMatchStartCountdown()": {
		"prefix": "InMatchStartCountdown",
		"body": [
			"InMatchStartCountdown()$0"
		],
		"description": "Are we in the pre-match/setup state?"
	},
	"bool InOvertime()": {
		"prefix": "InOvertime",
		"body": [
			"InOvertime()$0"
		],
		"description": "Currently in overtime?"
	},
	"bool IncludeScript(string file, handle scope = null)": {
		"prefix": "IncludeScript",
		"body": [
			"IncludeScript(${1:string file}, ${2:handle scope = null})$0"
		],
		"description": "Wrapper for DoIncludeScript"
	},
	"bool Input<name>()": {
		"prefix": "Input<name>",
		"body": [
			"Input<name>()$0"
		],
		"description": "Called when the entity receives an input from the I/O system that matches the function's name. The name of the function needs to be Input followed by the name of the input. E.g. for the FireUser1 input, it would be InputFireUser1 When the function is called, Script Handles of the activator and caller entities are accessible to the function under the variables activator and caller. The function needs to return a boolean value; Returning true processes the input, while false cancels it."
	},
	"Quaternion Invert()": {
		"prefix": "Invert",
		"body": [
			"Invert()$0"
		],
		"description": "Returns a quaternion with the complimentary rotation."
	},
	"bool IsAbleToClimb()": {
		"prefix": "IsAbleToClimb",
		"body": [
			"IsAbleToClimb()$0"
		],
		"description": "Return true if this bot can climb arbitrary geometry it encounters"
	},
	"bool IsAbleToJumpAcrossGaps()": {
		"prefix": "IsAbleToJumpAcrossGaps",
		"body": [
			"IsAbleToJumpAcrossGaps()$0"
		],
		"description": "Return true if this bot can jump across gaps in its path"
	},
	"bool IsAirDashing()": {
		"prefix": "IsAirDashing",
		"body": [
			"IsAirDashing()$0"
		],
		"description": ""
	},
	"bool IsAllowedToRemoveTaunt()": {
		"prefix": "IsAllowedToRemoveTaunt",
		"body": [
			"IsAllowedToRemoveTaunt()$0"
		],
		"description": "Returns true if the taunt will be stopped"
	},
	"bool IsAllowedToSwitch()": {
		"prefix": "IsAllowedToSwitch",
		"body": [
			"IsAllowedToSwitch()$0"
		],
		"description": "Are we allowed to switch to this weapon?"
	},
	"bool IsAllowedToTaunt()": {
		"prefix": "IsAllowedToTaunt",
		"body": [
			"IsAllowedToTaunt()$0"
		],
		"description": ""
	},
	"bool IsAmmoFull()": {
		"prefix": "IsAmmoFull",
		"body": [
			"IsAmmoFull()$0"
		],
		"description": ""
	},
	"bool IsAmmoLow()": {
		"prefix": "IsAmmoLow",
		"body": [
			"IsAmmoLow()$0"
		],
		"description": ""
	},
	"bool IsAreaTraversable(handle area)": {
		"prefix": "IsAreaTraversable",
		"body": [
			"IsAreaTraversable(${1:handle area})$0"
		],
		"description": "Return true if given area can be used for navigation"
	},
	"bool IsAttackDefenseMode()": {
		"prefix": "IsAttackDefenseMode",
		"body": [
			"IsAttackDefenseMode()$0"
		],
		"description": ""
	},
	"bool IsAttemptingToMove()": {
		"prefix": "IsAttemptingToMove",
		"body": [
			"IsAttemptingToMove()$0"
		],
		"description": "Return true if we have tried to Approach() or DriveTo() very recently"
	},
	"bool IsAttentionFocused()": {
		"prefix": "IsAttentionFocused",
		"body": [
			"IsAttentionFocused()$0"
		],
		"description": "Is our attention focused right now?"
	},
	"bool IsAttentionFocusedOn(handle entity)": {
		"prefix": "IsAttentionFocusedOn",
		"body": [
			"IsAttentionFocusedOn(${1:handle entity})$0"
		],
		"description": "Is our attention focused on this entity"
	},
	"bool IsBirthday()": {
		"prefix": "IsBirthday",
		"body": [
			"IsBirthday()$0"
		],
		"description": "Are we in birthday mode?"
	},
	"bool IsBlocked(int team, bool affectsFlow)": {
		"prefix": "IsBlocked",
		"body": [
			"IsBlocked(${1:int team}, ${2:bool affectsFlow})$0"
		],
		"description": "Return true if team is blocked in this area."
	},
	"bool IsBotOfType(int type)": {
		"prefix": "IsBotOfType",
		"body": [
			"IsBotOfType(${1:int type})$0"
		],
		"description": ""
	},
	"bool IsBottleneck()": {
		"prefix": "IsBottleneck",
		"body": [
			"IsBottleneck()$0"
		],
		"description": "Returns true if area is a bottleneck. (tiny narrow areas with only one path)"
	},
	"bool IsCallingForMedic()": {
		"prefix": "IsCallingForMedic",
		"body": [
			"IsCallingForMedic()$0"
		],
		"description": "Is this player calling for medic?"
	},
	"bool IsCarryingRune()": {
		"prefix": "IsCarryingRune",
		"body": [
			"IsCarryingRune()$0"
		],
		"description": ""
	},
	"bool IsClimbingOrJumping()": {
		"prefix": "IsClimbingOrJumping",
		"body": [
			"IsClimbingOrJumping()$0"
		],
		"description": "Is jumping in any form"
	},
	"bool IsClimbingUpToLedge()": {
		"prefix": "IsClimbingUpToLedge",
		"body": [
			"IsClimbingUpToLedge()$0"
		],
		"description": "Is climbing up to a high ledge"
	},
	"bool IsCompetitiveMode()": {
		"prefix": "IsCompetitiveMode",
		"body": [
			"IsCompetitiveMode()$0"
		],
		"description": "Playing competitive?"
	},
	"bool IsCompletelyVisibleToTeam(int team)": {
		"prefix": "IsCompletelyVisibleToTeam",
		"body": [
			"IsCompletelyVisibleToTeam(${1:int team})$0"
		],
		"description": "Return true if given area is completely visible from somewhere in this area by someone on the team."
	},
	"bool IsConVarOnAllowList(string name)": {
		"prefix": "IsConVarOnAllowList",
		"body": [
			"IsConVarOnAllowList(${1:string name})$0"
		],
		"description": "Checks if the convar is allowed to be used and is in cfg/vscript_convar_allowlist.txt. Please be nice with this and use it for *compatibility* if you need check support and NOT to force server owners to allow hostname to be set... or else this will simply lie and return true in future. ;-) You have been warned!"
	},
	"bool IsConnected(handle area, int dir)": {
		"prefix": "IsConnected",
		"body": [
			"IsConnected(${1:handle area}, ${2:int dir})$0"
		],
		"description": "Return true if this area is connected to other area in given direction. (If you set direction to -1 or 4, it will automatically check all directions for a connection)."
	},
	"bool IsControlStunned()": {
		"prefix": "IsControlStunned",
		"body": [
			"IsControlStunned()$0"
		],
		"description": ""
	},
	"bool IsCoplanar(handle area)": {
		"prefix": "IsCoplanar",
		"body": [
			"IsCoplanar(${1:handle area})$0"
		],
		"description": "Return true if this area and given area are approximately co-planar"
	},
	"bool IsCritBoosted()": {
		"prefix": "IsCritBoosted",
		"body": [
			"IsCritBoosted()$0"
		],
		"description": ""
	},
	"bool IsDamaging()": {
		"prefix": "IsDamaging",
		"body": [
			"IsDamaging()$0"
		],
		"description": "Return true if this area is marked to have continuous damage."
	},
	"bool IsDedicatedServer()": {
		"prefix": "IsDedicatedServer",
		"body": [
			"IsDedicatedServer()$0"
		],
		"description": "Returns true if this server is a dedicated server."
	},
	"bool IsDefaultGameMode()": {
		"prefix": "IsDefaultGameMode",
		"body": [
			"IsDefaultGameMode()$0"
		],
		"description": "The absence of arena, mvm, tournament mode, etc"
	},
	"bool IsDegenerate()": {
		"prefix": "IsDegenerate",
		"body": [
			"IsDegenerate()$0"
		],
		"description": "Return true if this area is badly formed."
	},
	"bool IsDifficulty(int difficulty)": {
		"prefix": "IsDifficulty",
		"body": [
			"IsDifficulty(${1:int difficulty})$0"
		],
		"description": "Returns true/false if the bot's difficulty level matches."
	},
	"bool IsEFlagSet(int eflag)": {
		"prefix": "IsEFlagSet",
		"body": [
			"IsEFlagSet(${1:int eflag})$0"
		],
		"description": ""
	},
	"bool IsEdge(ENavDirType dir)": {
		"prefix": "IsEdge",
		"body": [
			"IsEdge(${1:ENavDirType dir})$0"
		],
		"description": "Return true if there are no bi-directional links on the given side."
	},
	"bool IsEnemy(handle entity)": {
		"prefix": "IsEnemy",
		"body": [
			"IsEnemy(${1:handle entity})$0"
		],
		"description": "Return true if given entity is our enemy"
	},
	"bool IsEntityTraversable(handle entity, bool immediately)": {
		"prefix": "IsEntityTraversable",
		"body": [
			"IsEntityTraversable(${1:handle entity}, ${2:bool immediately})$0"
		],
		"description": "Return true if the entity handle is traversable. If immediately is true, breakables are considered non-traverseable"
	},
	"bool IsFakeClient()": {
		"prefix": "IsFakeClient",
		"body": [
			"IsFakeClient()$0"
		],
		"description": ""
	},
	"bool IsFireproof()": {
		"prefix": "IsFireproof",
		"body": [
			"IsFireproof()$0"
		],
		"description": ""
	},
	"bool IsFlaggedForUpdate()": {
		"prefix": "IsFlaggedForUpdate",
		"body": [
			"IsFlaggedForUpdate()$0"
		],
		"description": "Is this bot flagged for update"
	},
	"bool IsFlat()": {
		"prefix": "IsFlat",
		"body": [
			"IsFlat()$0"
		],
		"description": "Return true if this area is approximately flat."
	},
	"bool IsFriend(handle entity)": {
		"prefix": "IsFriend",
		"body": [
			"IsFriend(${1:handle entity})$0"
		],
		"description": "Return true if given entity is our friend"
	},
	"bool IsFullyInvisible()": {
		"prefix": "IsFullyInvisible",
		"body": [
			"IsFullyInvisible()$0"
		],
		"description": ""
	},
	"bool IsGap(Vector pos, Vector forward)": {
		"prefix": "IsGap",
		"body": [
			"IsGap(${1:Vector pos}, ${2:Vector forward})$0"
		],
		"description": "Return true if there is a gap at this position."
	},
	"bool IsHolidayActive(int holiday)": {
		"prefix": "IsHolidayActive",
		"body": [
			"IsHolidayActive(${1:int holiday})$0"
		],
		"description": "Is the given holiday active? See Constants.EHoliday"
	},
	"bool IsHolidayMap(int holiday)": {
		"prefix": "IsHolidayMap",
		"body": [
			"IsHolidayMap(${1:int holiday})$0"
		],
		"description": "Playing a holiday map? See Constants.EHoliday"
	},
	"bool IsHypeBuffed()": {
		"prefix": "IsHypeBuffed",
		"body": [
			"IsHypeBuffed()$0"
		],
		"description": ""
	},
	"bool IsImmobile()": {
		"prefix": "IsImmobile",
		"body": [
			"IsImmobile()$0"
		],
		"description": "Return true if we haven't moved in awhile"
	},
	"bool IsImmuneToPushback()": {
		"prefix": "IsImmuneToPushback",
		"body": [
			"IsImmuneToPushback()$0"
		],
		"description": ""
	},
	"bool IsInASquad()": {
		"prefix": "IsInASquad",
		"body": [
			"IsInASquad()$0"
		],
		"description": "Checks if we are in a squad"
	},
	"bool IsInArenaMode()": {
		"prefix": "IsInArenaMode",
		"body": [
			"IsInArenaMode()$0"
		],
		"description": "Playing arena mode?"
	},
	"bool IsInKothMode()": {
		"prefix": "IsInKothMode",
		"body": [
			"IsInKothMode()$0"
		],
		"description": "Playing king of the hill mode?"
	},
	"bool IsInMedievalMode()": {
		"prefix": "IsInMedievalMode",
		"body": [
			"IsInMedievalMode()$0"
		],
		"description": "Playing medieval mode?"
	},
	"bool IsInWaitingForPlayers()": {
		"prefix": "IsInWaitingForPlayers",
		"body": [
			"IsInWaitingForPlayers()$0"
		],
		"description": "Are we waiting for some stragglers?"
	},
	"bool IsInspecting()": {
		"prefix": "IsInspecting",
		"body": [
			"IsInspecting()$0"
		],
		"description": ""
	},
	"bool IsInvulnerable()": {
		"prefix": "IsInvulnerable",
		"body": [
			"IsInvulnerable()$0"
		],
		"description": ""
	},
	"bool IsJumping()": {
		"prefix": "IsJumping",
		"body": [
			"IsJumping()$0"
		],
		"description": ""
	},
	"bool IsJumpingAcrossGap()": {
		"prefix": "IsJumpingAcrossGap",
		"body": [
			"IsJumpingAcrossGap()$0"
		],
		"description": "Is jumping across a gap to the far side"
	},
	"bool IsKeyEmpty(string key)": {
		"prefix": "IsKeyEmpty",
		"body": [
			"IsKeyEmpty(${1:string key})$0"
		],
		"description": "Returns true if the named key has no value."
	},
	"bool IsMannVsMachineMode()": {
		"prefix": "IsMannVsMachineMode",
		"body": [
			"IsMannVsMachineMode()$0"
		],
		"description": "Playing MvM? Beep boop"
	},
	"bool IsMannVsMachineRespecEnabled()": {
		"prefix": "IsMannVsMachineRespecEnabled",
		"body": [
			"IsMannVsMachineRespecEnabled()$0"
		],
		"description": "Are players allowed to refund their upgrades?"
	},
	"bool IsMatchTypeCasual()": {
		"prefix": "IsMatchTypeCasual",
		"body": [
			"IsMatchTypeCasual()$0"
		],
		"description": "Playing casual?"
	},
	"bool IsMatchTypeCompetitive()": {
		"prefix": "IsMatchTypeCompetitive",
		"body": [
			"IsMatchTypeCompetitive()$0"
		],
		"description": "Playing competitive?"
	},
	"bool IsMeleeWeapon()": {
		"prefix": "IsMeleeWeapon",
		"body": [
			"IsMeleeWeapon()$0"
		],
		"description": "Returns whether this is a melee weapon"
	},
	"bool IsMiniBoss()": {
		"prefix": "IsMiniBoss",
		"body": [
			"IsMiniBoss()$0"
		],
		"description": "Is this player an MvM mini-boss?"
	},
	"bool IsModelPrecached(string modelname)": {
		"prefix": "IsModelPrecached",
		"body": [
			"IsModelPrecached(${1:string modelname})$0"
		],
		"description": "Checks if the modelname is precached."
	},
	"bool IsNoclipping()": {
		"prefix": "IsNoclipping",
		"body": [
			"IsNoclipping()$0"
		],
		"description": "Returns true if the player is in noclip mode."
	},
	"bool IsOnGround()": {
		"prefix": "IsOnGround",
		"body": [
			"IsOnGround()$0"
		],
		"description": "Return true if standing on something"
	},
	"bool IsOverlapping(handle area)": {
		"prefix": "IsOverlapping",
		"body": [
			"IsOverlapping(${1:handle area})$0"
		],
		"description": "Return true if 'area' overlaps our 2D extents."
	},
	"bool IsOverlappingOrigin(Vector pos, float tolerance)": {
		"prefix": "IsOverlappingOrigin",
		"body": [
			"IsOverlappingOrigin(${1:Vector pos}, ${2:float tolerance})$0"
		],
		"description": "Return true if 'pos' is within 2D extents of area."
	},
	"bool IsPVEModeActive()": {
		"prefix": "IsPVEModeActive",
		"body": [
			"IsPVEModeActive()$0"
		],
		"description": ""
	},
	"bool IsParachuteEquipped()": {
		"prefix": "IsParachuteEquipped",
		"body": [
			"IsParachuteEquipped()$0"
		],
		"description": ""
	},
	"bool IsPasstimeMode()": {
		"prefix": "IsPasstimeMode",
		"body": [
			"IsPasstimeMode()$0"
		],
		"description": "No ball games."
	},
	"bool IsPaused()": {
		"prefix": "IsPaused",
		"body": [
			"IsPaused()$0"
		],
		"description": "If this scene is currently paused."
	},
	"bool IsPlacingSapper()": {
		"prefix": "IsPlacingSapper",
		"body": [
			"IsPlacingSapper()$0"
		],
		"description": "Returns true if we placed a sapper in the last few moments"
	},
	"bool IsPlayer()": {
		"prefix": "IsPlayer",
		"body": [
			"IsPlayer()$0"
		],
		"description": "Checks whether the entity is a player or not."
	},
	"bool IsPlayerABot(handle player)": {
		"prefix": "IsPlayerABot",
		"body": [
			"IsPlayerABot(${1:handle player})$0"
		],
		"description": "Is this player/entity a bot."
	},
	"bool IsPlayerSpeaking(int playerIndex)": {
		"prefix": "IsPlayerSpeaking",
		"body": [
			"IsPlayerSpeaking(${1:int playerIndex})$0"
		],
		"description": "Returns whether the player specified is speaking."
	},
	"bool IsPlayingBack()": {
		"prefix": "IsPlayingBack",
		"body": [
			"IsPlayingBack()$0"
		],
		"description": "If this scene is currently playing."
	},
	"float IsPotentiallyTraversable(Vector from, Vector to, bool immediately)": {
		"prefix": "IsPotentiallyTraversable",
		"body": [
			"IsPotentiallyTraversable(${1:Vector from}, ${2:Vector to}, ${3:bool immediately})$0"
		],
		"description": "Checks if this locomotor could potentially move along the line given. Returns fraction of trace result (1 = clear). If immediately is true, breakables are considered non-traverseable"
	},
	"bool IsPotentiallyVisibleToTeam(int team)": {
		"prefix": "IsPotentiallyVisibleToTeam",
		"body": [
			"IsPotentiallyVisibleToTeam(${1:int team})$0"
		],
		"description": "Return true if any portion of this area is visible to anyone on the given team."
	},
	"bool IsPowerupMode()": {
		"prefix": "IsPowerupMode",
		"body": [
			"IsPowerupMode()$0"
		],
		"description": "Playing powerup mode? Not compatible with MvM"
	},
	"bool IsQuickBuildTime()": {
		"prefix": "IsQuickBuildTime",
		"body": [
			"IsQuickBuildTime()$0"
		],
		"description": "If an engie places a building, will it immediately upgrade? Eg. MvM pre-round etc."
	},
	"bool IsRageDraining()": {
		"prefix": "IsRageDraining",
		"body": [
			"IsRageDraining()$0"
		],
		"description": ""
	},
	"bool IsReachableByTeam(int team)": {
		"prefix": "IsReachableByTeam",
		"body": [
			"IsReachableByTeam(${1:int team})$0"
		],
		"description": "Is this area reachable by the given team?"
	},
	"bool IsRegenerating()": {
		"prefix": "IsRegenerating",
		"body": [
			"IsRegenerating()$0"
		],
		"description": ""
	},
	"bool IsRoughlySquare()": {
		"prefix": "IsRoughlySquare",
		"body": [
			"IsRoughlySquare()$0"
		],
		"description": "Return true if this area is approximately square."
	},
	"bool IsRunning()": {
		"prefix": "IsRunning",
		"body": [
			"IsRunning()$0"
		],
		"description": "Is running?"
	},
	"bool IsSapping()": {
		"prefix": "IsSapping",
		"body": [
			"IsSapping()$0"
		],
		"description": "Returns true if we are currently sapping"
	},
	"bool IsScrambling()": {
		"prefix": "IsScrambling",
		"body": [
			"IsScrambling()$0"
		],
		"description": "Is in the middle of a complex action (climbing a ladder, climbing a ledge, jumping, etc) that shouldn't be interrupted"
	},
	"bool IsSequenceFinished()": {
		"prefix": "IsSequenceFinished",
		"body": [
			"IsSequenceFinished()$0"
		],
		"description": "Ask whether the main sequence is done playing"
	},
	"bool IsSnared()": {
		"prefix": "IsSnared",
		"body": [
			"IsSnared()$0"
		],
		"description": ""
	},
	"bool IsSolid()": {
		"prefix": "IsSolid",
		"body": [
			"IsSolid()$0"
		],
		"description": ""
	},
	"bool IsSolidFlagSet(int solidflag)": {
		"prefix": "IsSolidFlagSet",
		"body": [
			"IsSolidFlagSet(${1:int solidflag})$0"
		],
		"description": ""
	},
	"bool IsSoundPrecached(string soundname)": {
		"prefix": "IsSoundPrecached",
		"body": [
			"IsSoundPrecached(${1:string soundname})$0"
		],
		"description": "Checks if the soundname is precached."
	},
	"bool IsStealthed()": {
		"prefix": "IsStealthed",
		"body": [
			"IsStealthed()$0"
		],
		"description": ""
	},
	"bool IsStuck()": {
		"prefix": "IsStuck",
		"body": [
			"IsStuck()$0"
		],
		"description": "Return true if bot is stuck. If the locomotor cannot make progress, it becomes stuck and can only leave this stuck state by successfully movingand becoming un-stuck."
	},
	"bool IsTFMarked()": {
		"prefix": "IsTFMarked",
		"body": [
			"IsTFMarked()$0"
		],
		"description": "Is this nav area marked with the current marking scope?"
	},
	"bool IsTaunting()": {
		"prefix": "IsTaunting",
		"body": [
			"IsTaunting()$0"
		],
		"description": ""
	},
	"bool IsTruceActive()": {
		"prefix": "IsTruceActive",
		"body": [
			"IsTruceActive()$0"
		],
		"description": ""
	},
	"bool IsUnderwater()": {
		"prefix": "IsUnderwater",
		"body": [
			"IsUnderwater()$0"
		],
		"description": "Return true if area is underwater."
	},
	"bool IsUsingActionSlot()": {
		"prefix": "IsUsingActionSlot",
		"body": [
			"IsUsingActionSlot()$0"
		],
		"description": ""
	},
	"bool IsUsingGrapplingHook()": {
		"prefix": "IsUsingGrapplingHook",
		"body": [
			"IsUsingGrapplingHook()$0"
		],
		"description": ""
	},
	"bool IsUsingSpells()": {
		"prefix": "IsUsingSpells",
		"body": [
			"IsUsingSpells()$0"
		],
		"description": ""
	},
	"bool IsValid()": {
		"prefix": "IsValid",
		"body": [
			"IsValid()$0"
		],
		"description": "Whether the handle belongs to a valid key."
	},
	"bool IsValidForWanderingPopulation()": {
		"prefix": "IsValidForWanderingPopulation",
		"body": [
			"IsValidForWanderingPopulation()$0"
		],
		"description": "Returns true if area is valid for wandering population."
	},
	"bool IsViewingCYOAPDA()": {
		"prefix": "IsViewingCYOAPDA",
		"body": [
			"IsViewingCYOAPDA()$0"
		],
		"description": ""
	},
	"bool IsVisible(Vector point)": {
		"prefix": "IsVisible",
		"body": [
			"IsVisible(${1:Vector point})$0"
		],
		"description": "Return true if area is visible from the given eyepoint."
	},
	"bool IsWeakref()": {
		"prefix": "IsWeakref",
		"body": [
			"IsWeakref()$0"
		],
		"description": ""
	},
	"bool IsWeaponRestricted(handle weapon)": {
		"prefix": "IsWeaponRestricted",
		"body": [
			"IsWeaponRestricted(${1:handle weapon})$0"
		],
		"description": "Checks if the given weapon is restricted for use on the bot"
	},
	"void Jump()": {
		"prefix": "Jump",
		"body": [
			"Jump()$0"
		],
		"description": "Initiate a simple undirected jump in the air"
	},
	"void JumpAcrossGap(Vector goalPos, Vector goalForward)": {
		"prefix": "JumpAcrossGap",
		"body": [
			"JumpAcrossGap(${1:Vector goalPos}, ${2:Vector goalForward})$0"
		],
		"description": "Initiate a jump across an empty volume of space to far side"
	},
	"bool KeyValueFromFloat(string key, float value)": {
		"prefix": "KeyValueFromFloat",
		"body": [
			"KeyValueFromFloat(${1:string key}, ${2:float value})$0"
		],
		"description": "Executes KeyValue with a float"
	},
	"bool KeyValueFromInt(string key, int value)": {
		"prefix": "KeyValueFromInt",
		"body": [
			"KeyValueFromInt(${1:string key}, ${2:int value})$0"
		],
		"description": "Executes KeyValue with an int"
	},
	"bool KeyValueFromString(string key, string value)": {
		"prefix": "KeyValueFromString",
		"body": [
			"KeyValueFromString(${1:string key}, ${2:string value})$0"
		],
		"description": "Executes KeyValue with a string"
	},
	"bool KeyValueFromVector(string key, Vector value)": {
		"prefix": "KeyValueFromVector",
		"body": [
			"KeyValueFromVector(${1:string key}, ${2:Vector value})$0"
		],
		"description": "Executes KeyValue with a vector"
	},
	"void Kill()": {
		"prefix": "Kill",
		"body": [
			"Kill()$0"
		],
		"description": "Removes the entity. Equivalent of firing the Kill I/O input, but instantaneous."
	},
	"LAST_SHARED_COLLISION_GROUP": {
		"prefix": "LAST_SHARED_COLLISION_GROUP",
		"body": [
			"LAST_SHARED_COLLISION_GROUP$0"
		],
		"description": "20"
	},
	"LAST_VISIBLE_CONTENTS": {
		"prefix": "LAST_VISIBLE_CONTENTS",
		"body": [
			"LAST_VISIBLE_CONTENTS$0"
		],
		"description": "128"
	},
	"LEFT": {
		"prefix": "LEFT",
		"body": [
			"LEFT$0"
		],
		"description": "3"
	},
	"void LeaveSquad()": {
		"prefix": "LeaveSquad",
		"body": [
			"LeaveSquad()$0"
		],
		"description": "Makes us leave the current squad (if any)"
	},
	"Vector Left()": {
		"prefix": "Left",
		"body": [
			"Left()$0"
		],
		"description": "Returns the left Vector of the angles."
	},
	"float Length()": {
		"prefix": "Length",
		"body": [
			"Length()$0"
		],
		"description": "Magnitude of the vector."
	},
	"float Length2D()": {
		"prefix": "Length2D",
		"body": [
			"Length2D()$0"
		],
		"description": "Returns the magnitude of the vector on the x-y plane. Meant to be used when working with the client's HUD."
	},
	"float Length2DSqr()": {
		"prefix": "Length2DSqr",
		"body": [
			"Length2DSqr()$0"
		],
		"description": "Returns the square of the magnitude of the vector on the x-y plane. Faster than the above method."
	},
	"float LengthSqr()": {
		"prefix": "LengthSqr",
		"body": [
			"LengthSqr()$0"
		],
		"description": "The magnitude of the vector squared. Faster than the above method."
	},
	"bool LoadSceneFromString(string sceneName, string scene)": {
		"prefix": "LoadSceneFromString",
		"body": [
			"LoadSceneFromString(${1:string sceneName}, ${2:string scene})$0"
		],
		"description": "given a dummy scene name and a vcd string, load the scene"
	},
	"handle LocalEyeAngles()": {
		"prefix": "LocalEyeAngles",
		"body": [
			"LocalEyeAngles()$0"
		],
		"description": "Returns the entity's local eye angles"
	},
	"void LocalTime(table out)": {
		"prefix": "LocalTime",
		"body": [
			"LocalTime(${1:table out})$0"
		],
		"description": "Fills out a table with the local time (second, minute, hour, day, month, year, dayofweek, dayofyear, daylightsavings)"
	},
	"int LookupActivity(string activity)": {
		"prefix": "LookupActivity",
		"body": [
			"LookupActivity(${1:string activity})$0"
		],
		"description": "Get the named activity index. Returns -1 if the activity does not exist."
	},
	"int LookupAttachment(string name)": {
		"prefix": "LookupAttachment",
		"body": [
			"LookupAttachment(${1:string name})$0"
		],
		"description": "Get the named attachment index. Returns 0 if the attachment does not exist."
	},
	"int LookupBone(string bone)": {
		"prefix": "LookupBone",
		"body": [
			"LookupBone(${1:string bone})$0"
		],
		"description": "Get the named bone index. Returns -1 if the bone does not exist."
	},
	"int LookupPoseParameter(string name)": {
		"prefix": "LookupPoseParameter",
		"body": [
			"LookupPoseParameter(${1:string name})$0"
		],
		"description": "Gets the pose parameter's index. Returns -1 if the pose parameter does not exist."
	},
	"int LookupSequence(string name)": {
		"prefix": "LookupSequence",
		"body": [
			"LookupSequence(${1:string name})$0"
		],
		"description": "Looks up a sequence by names of sequences or activities. Returns -1 if the sequence does not exist."
	},
	"MAX_EDICTS": {
		"prefix": "MAX_EDICTS",
		"body": [
			"MAX_EDICTS$0"
		],
		"description": "2048"
	},
	"MAX_PLAYERS": {
		"prefix": "MAX_PLAYERS",
		"body": [
			"MAX_PLAYERS$0"
		],
		"description": "101"
	},
	"MINIBOSS": {
		"prefix": "MINIBOSS",
		"body": [
			"MINIBOSS$0"
		],
		"description": "32768"
	},
	"MOVECOLLIDE_COUNT": {
		"prefix": "MOVECOLLIDE_COUNT",
		"body": [
			"MOVECOLLIDE_COUNT$0"
		],
		"description": "4"
	},
	"MOVECOLLIDE_DEFAULT": {
		"prefix": "MOVECOLLIDE_DEFAULT",
		"body": [
			"MOVECOLLIDE_DEFAULT$0"
		],
		"description": "0"
	},
	"MOVECOLLIDE_FLY_BOUNCE": {
		"prefix": "MOVECOLLIDE_FLY_BOUNCE",
		"body": [
			"MOVECOLLIDE_FLY_BOUNCE$0"
		],
		"description": "1"
	},
	"MOVECOLLIDE_FLY_CUSTOM": {
		"prefix": "MOVECOLLIDE_FLY_CUSTOM",
		"body": [
			"MOVECOLLIDE_FLY_CUSTOM$0"
		],
		"description": "2"
	},
	"MOVECOLLIDE_FLY_SLIDE": {
		"prefix": "MOVECOLLIDE_FLY_SLIDE",
		"body": [
			"MOVECOLLIDE_FLY_SLIDE$0"
		],
		"description": "3"
	},
	"MOVECOLLIDE_MAX_BITS": {
		"prefix": "MOVECOLLIDE_MAX_BITS",
		"body": [
			"MOVECOLLIDE_MAX_BITS$0"
		],
		"description": "3"
	},
	"MOVETYPE_CUSTOM": {
		"prefix": "MOVETYPE_CUSTOM",
		"body": [
			"MOVETYPE_CUSTOM$0"
		],
		"description": "11"
	},
	"MOVETYPE_FLY": {
		"prefix": "MOVETYPE_FLY",
		"body": [
			"MOVETYPE_FLY$0"
		],
		"description": "4"
	},
	"MOVETYPE_FLYGRAVITY": {
		"prefix": "MOVETYPE_FLYGRAVITY",
		"body": [
			"MOVETYPE_FLYGRAVITY$0"
		],
		"description": "5"
	},
	"MOVETYPE_ISOMETRIC": {
		"prefix": "MOVETYPE_ISOMETRIC",
		"body": [
			"MOVETYPE_ISOMETRIC$0"
		],
		"description": "1"
	},
	"MOVETYPE_LADDER": {
		"prefix": "MOVETYPE_LADDER",
		"body": [
			"MOVETYPE_LADDER$0"
		],
		"description": "9"
	},
	"MOVETYPE_LAST": {
		"prefix": "MOVETYPE_LAST",
		"body": [
			"MOVETYPE_LAST$0"
		],
		"description": "11"
	},
	"MOVETYPE_NOCLIP": {
		"prefix": "MOVETYPE_NOCLIP",
		"body": [
			"MOVETYPE_NOCLIP$0"
		],
		"description": "8"
	},
	"MOVETYPE_NONE": {
		"prefix": "MOVETYPE_NONE",
		"body": [
			"MOVETYPE_NONE$0"
		],
		"description": "0"
	},
	"MOVETYPE_OBSERVER": {
		"prefix": "MOVETYPE_OBSERVER",
		"body": [
			"MOVETYPE_OBSERVER$0"
		],
		"description": "10"
	},
	"MOVETYPE_PUSH": {
		"prefix": "MOVETYPE_PUSH",
		"body": [
			"MOVETYPE_PUSH$0"
		],
		"description": "7"
	},
	"MOVETYPE_STEP": {
		"prefix": "MOVETYPE_STEP",
		"body": [
			"MOVETYPE_STEP$0"
		],
		"description": "3"
	},
	"MOVETYPE_VPHYSICS": {
		"prefix": "MOVETYPE_VPHYSICS",
		"body": [
			"MOVETYPE_VPHYSICS$0"
		],
		"description": "6"
	},
	"MOVETYPE_WALK": {
		"prefix": "MOVETYPE_WALK",
		"body": [
			"MOVETYPE_WALK$0"
		],
		"description": "2"
	},
	"void MakeNamespace()": {
		"prefix": "MakeNamespace",
		"body": [
			"MakeNamespace()$0"
		],
		"description": ""
	},
	"bool MapHasMatchSummaryStage()": {
		"prefix": "MapHasMatchSummaryStage",
		"body": [
			"MapHasMatchSummaryStage()$0"
		],
		"description": ""
	},
	"void MarkAsBlocked(int team)": {
		"prefix": "MarkAsBlocked",
		"body": [
			"MarkAsBlocked(${1:int team})$0"
		],
		"description": "Mark this area as blocked for team."
	},
	"void MarkAsDamaging(float duration)": {
		"prefix": "MarkAsDamaging",
		"body": [
			"MarkAsDamaging(${1:float duration})$0"
		],
		"description": "Mark this area is damaging for the next 'duration' seconds."
	},
	"void MarkObstacleToAvoid(float height)": {
		"prefix": "MarkObstacleToAvoid",
		"body": [
			"MarkObstacleToAvoid(${1:float height})$0"
		],
		"description": "Marks the obstructed status of the nav area."
	},
	"bool MatchmakingShouldUseStopwatchMode()": {
		"prefix": "MatchmakingShouldUseStopwatchMode",
		"body": [
			"MatchmakingShouldUseStopwatchMode()$0"
		],
		"description": ""
	},
	"float MaxClients()": {
		"prefix": "MaxClients",
		"body": [
			"MaxClients()$0"
		],
		"description": "Get the current number of max clients set by the maxplayers command."
	},
	"void Msg(string message)": {
		"prefix": "Msg",
		"body": [
			"Msg(${1:string message})$0"
		],
		"description": "Prints message to console without any line feed after."
	},
	"NAV_MESH_AVOID": {
		"prefix": "NAV_MESH_AVOID",
		"body": [
			"NAV_MESH_AVOID$0"
		],
		"description": "128"
	},
	"NAV_MESH_CLIFF": {
		"prefix": "NAV_MESH_CLIFF",
		"body": [
			"NAV_MESH_CLIFF$0"
		],
		"description": "32768"
	},
	"NAV_MESH_CROUCH": {
		"prefix": "NAV_MESH_CROUCH",
		"body": [
			"NAV_MESH_CROUCH$0"
		],
		"description": "1"
	},
	"NAV_MESH_DONT_HIDE": {
		"prefix": "NAV_MESH_DONT_HIDE",
		"body": [
			"NAV_MESH_DONT_HIDE$0"
		],
		"description": "512"
	},
	"NAV_MESH_FIRST_CUSTOM": {
		"prefix": "NAV_MESH_FIRST_CUSTOM",
		"body": [
			"NAV_MESH_FIRST_CUSTOM$0"
		],
		"description": "65536"
	},
	"NAV_MESH_FUNC_COST": {
		"prefix": "NAV_MESH_FUNC_COST",
		"body": [
			"NAV_MESH_FUNC_COST$0"
		],
		"description": "536870912"
	},
	"NAV_MESH_HAS_ELEVATOR": {
		"prefix": "NAV_MESH_HAS_ELEVATOR",
		"body": [
			"NAV_MESH_HAS_ELEVATOR$0"
		],
		"description": "1073741824"
	},
	"NAV_MESH_INVALID": {
		"prefix": "NAV_MESH_INVALID",
		"body": [
			"NAV_MESH_INVALID$0"
		],
		"description": "0"
	},
	"NAV_MESH_JUMP": {
		"prefix": "NAV_MESH_JUMP",
		"body": [
			"NAV_MESH_JUMP$0"
		],
		"description": "2"
	},
	"NAV_MESH_LAST_CUSTOM": {
		"prefix": "NAV_MESH_LAST_CUSTOM",
		"body": [
			"NAV_MESH_LAST_CUSTOM$0"
		],
		"description": "67108864"
	},
	"NAV_MESH_NAV_BLOCKER": {
		"prefix": "NAV_MESH_NAV_BLOCKER",
		"body": [
			"NAV_MESH_NAV_BLOCKER$0"
		],
		"description": "2147483648"
	},
	"NAV_MESH_NO_HOSTAGES": {
		"prefix": "NAV_MESH_NO_HOSTAGES",
		"body": [
			"NAV_MESH_NO_HOSTAGES$0"
		],
		"description": "2048"
	},
	"NAV_MESH_NO_JUMP": {
		"prefix": "NAV_MESH_NO_JUMP",
		"body": [
			"NAV_MESH_NO_JUMP$0"
		],
		"description": "8"
	},
	"NAV_MESH_NO_MERGE": {
		"prefix": "NAV_MESH_NO_MERGE",
		"body": [
			"NAV_MESH_NO_MERGE$0"
		],
		"description": "8192"
	},
	"NAV_MESH_OBSTACLE_TOP": {
		"prefix": "NAV_MESH_OBSTACLE_TOP",
		"body": [
			"NAV_MESH_OBSTACLE_TOP$0"
		],
		"description": "16384"
	},
	"NAV_MESH_PRECISE": {
		"prefix": "NAV_MESH_PRECISE",
		"body": [
			"NAV_MESH_PRECISE$0"
		],
		"description": "4"
	},
	"NAV_MESH_RUN": {
		"prefix": "NAV_MESH_RUN",
		"body": [
			"NAV_MESH_RUN$0"
		],
		"description": "32"
	},
	"NAV_MESH_STAIRS": {
		"prefix": "NAV_MESH_STAIRS",
		"body": [
			"NAV_MESH_STAIRS$0"
		],
		"description": "4096"
	},
	"NAV_MESH_STAND": {
		"prefix": "NAV_MESH_STAND",
		"body": [
			"NAV_MESH_STAND$0"
		],
		"description": "1024"
	},
	"NAV_MESH_STOP": {
		"prefix": "NAV_MESH_STOP",
		"body": [
			"NAV_MESH_STOP$0"
		],
		"description": "16"
	},
	"NAV_MESH_TRANSIENT": {
		"prefix": "NAV_MESH_TRANSIENT",
		"body": [
			"NAV_MESH_TRANSIENT$0"
		],
		"description": "256"
	},
	"NAV_MESH_WALK": {
		"prefix": "NAV_MESH_WALK",
		"body": [
			"NAV_MESH_WALK$0"
		],
		"description": "64"
	},
	"NORMAL": {
		"prefix": "NORMAL",
		"body": [
			"NORMAL$0"
		],
		"description": "1"
	},
	"NORTH": {
		"prefix": "NORTH",
		"body": [
			"NORTH$0"
		],
		"description": "0"
	},
	"NORTH_EAST": {
		"prefix": "NORTH_EAST",
		"body": [
			"NORTH_EAST$0"
		],
		"description": "1"
	},
	"NORTH_WEST": {
		"prefix": "NORTH_WEST",
		"body": [
			"NORTH_WEST$0"
		],
		"description": "0"
	},
	"NUM_CORNERS": {
		"prefix": "NUM_CORNERS",
		"body": [
			"NUM_CORNERS$0"
		],
		"description": "4"
	},
	"NUM_DIFFICULTY_LEVELS": {
		"prefix": "NUM_DIFFICULTY_LEVELS",
		"body": [
			"NUM_DIFFICULTY_LEVELS$0"
		],
		"description": "4"
	},
	"NUM_DIRECTIONS": {
		"prefix": "NUM_DIRECTIONS",
		"body": [
			"NUM_DIRECTIONS$0"
		],
		"description": "4"
	},
	"NUM_OBSERVER_MODES": {
		"prefix": "NUM_OBSERVER_MODES",
		"body": [
			"NUM_OBSERVER_MODES$0"
		],
		"description": "8"
	},
	"NUM_RELATIVE_DIRECTIONS": {
		"prefix": "NUM_RELATIVE_DIRECTIONS",
		"body": [
			"NUM_RELATIVE_DIRECTIONS$0"
		],
		"description": "6"
	},
	"NUM_TRAVERSE_TYPES": {
		"prefix": "NUM_TRAVERSE_TYPES",
		"body": [
			"NUM_TRAVERSE_TYPES$0"
		],
		"description": "9"
	},
	"bool NavAreaBuildPath(handle startArea, handle endArea, Vector goalPos, float flMaxPathLength, int teamID, bool ignoreNavBlockers)": {
		"prefix": "NavAreaBuildPath",
		"body": [
			"NavAreaBuildPath(${1:handle startArea}, ${2:handle endArea}, ${3:Vector goalPos}, ${4:float flMaxPathLength}, ${5:int teamID}, ${6:bool ignoreNavBlockers})$0"
		],
		"description": "returns true if a path exists"
	},
	"float NavAreaTravelDistance(handle startArea, handle endArea, float flMaxPathLength)": {
		"prefix": "NavAreaTravelDistance",
		"body": [
			"NavAreaTravelDistance(${1:handle startArea}, ${2:handle endArea}, ${3:float flMaxPathLength})$0"
		],
		"description": "compute distance between two areas. Return -1 if can't reach 'endArea' from 'startArea'"
	},
	"handle Next(handle previous)": {
		"prefix": "Next",
		"body": [
			"Next(${1:handle previous})$0"
		],
		"description": "At the given reference of a previously-found entity, returns the next one after it in the list."
	},
	"handle NextMovePeer()": {
		"prefix": "NextMovePeer",
		"body": [
			"NextMovePeer()$0"
		],
		"description": "Returns the next entity parented with the entity. Intended for iteration use with FirstMoveChild()."
	},
	"float Norm()": {
		"prefix": "Norm",
		"body": [
			"Norm()$0"
		],
		"description": "Normalizes the 4D vector length."
	},
	"OBS_MODE_CHASE": {
		"prefix": "OBS_MODE_CHASE",
		"body": [
			"OBS_MODE_CHASE$0"
		],
		"description": "5"
	},
	"OBS_MODE_DEATHCAM": {
		"prefix": "OBS_MODE_DEATHCAM",
		"body": [
			"OBS_MODE_DEATHCAM$0"
		],
		"description": "1"
	},
	"OBS_MODE_FIXED": {
		"prefix": "OBS_MODE_FIXED",
		"body": [
			"OBS_MODE_FIXED$0"
		],
		"description": "3"
	},
	"OBS_MODE_FREEZECAM": {
		"prefix": "OBS_MODE_FREEZECAM",
		"body": [
			"OBS_MODE_FREEZECAM$0"
		],
		"description": "2"
	},
	"OBS_MODE_IN_EYE": {
		"prefix": "OBS_MODE_IN_EYE",
		"body": [
			"OBS_MODE_IN_EYE$0"
		],
		"description": "4"
	},
	"OBS_MODE_NONE": {
		"prefix": "OBS_MODE_NONE",
		"body": [
			"OBS_MODE_NONE$0"
		],
		"description": "0"
	},
	"OBS_MODE_POI": {
		"prefix": "OBS_MODE_POI",
		"body": [
			"OBS_MODE_POI$0"
		],
		"description": "6"
	},
	"OBS_MODE_ROAMING": {
		"prefix": "OBS_MODE_ROAMING",
		"body": [
			"OBS_MODE_ROAMING$0"
		],
		"description": "7"
	},
	"void OnGameEvent_<name>(table params)": {
		"prefix": "OnGameEvent_<name>",
		"body": [
			"OnGameEvent_<name>(${1:table params})$0"
		],
		"description": "Called each time a game event with the specified name occurs. The name of the function needs to be OnGameEvent_ followed by the name of the game event. E.g. for the player_spawn input, it would be OnGameEvent_player_spawn."
	},
	"void OnLandOnGround(handle ground)": {
		"prefix": "OnLandOnGround",
		"body": [
			"OnLandOnGround(${1:handle ground})$0"
		],
		"description": "Manually run the OnLandOnGround callback. Typically invoked when bot lands on the ground after being in the air"
	},
	"void OnLeaveGround(handle ground)": {
		"prefix": "OnLeaveGround",
		"body": [
			"OnLeaveGround(${1:handle ground})$0"
		],
		"description": "Manually run the OnLeaveGround callback. Typically invoked when bot leaves ground for any reason"
	},
	"void OnPostSpawn()": {
		"prefix": "OnPostSpawn",
		"body": [
			"OnPostSpawn()$0"
		],
		"description": "Called after the entity spawns, which is after scripts and players have loaded. This could be used to have an entity register itself with a master script, or adjusting the entity parameters in a programmatic way."
	},
	"void OnTakeDamage(handle params)": {
		"prefix": "OnTakeDamage",
		"body": [
			"OnTakeDamage(${1:handle params})$0"
		],
		"description": "Called each time an entity takes damage. The script can modify the table entries not suffixed with const, and these will be sent back to the game code"
	},
	"One": {
		"prefix": "One",
		"body": [
			"One$0"
		],
		"description": "1"
	},
	"PARACHUTE": {
		"prefix": "PARACHUTE",
		"body": [
			"PARACHUTE$0"
		],
		"description": "67108864"
	},
	"PI": {
		"prefix": "PI",
		"body": [
			"PI$0"
		],
		"description": "3.14158"
	},
	"PLAYER_FLAG_BITS": {
		"prefix": "PLAYER_FLAG_BITS",
		"body": [
			"PLAYER_FLAG_BITS$0"
		],
		"description": "11"
	},
	"PREFER_VACCINATOR_BLAST": {
		"prefix": "PREFER_VACCINATOR_BLAST",
		"body": [
			"PREFER_VACCINATOR_BLAST$0"
		],
		"description": "2097152"
	},
	"PREFER_VACCINATOR_BULLETS": {
		"prefix": "PREFER_VACCINATOR_BULLETS",
		"body": [
			"PREFER_VACCINATOR_BULLETS$0"
		],
		"description": "1048576"
	},
	"PREFER_VACCINATOR_FIRE": {
		"prefix": "PREFER_VACCINATOR_FIRE",
		"body": [
			"PREFER_VACCINATOR_FIRE$0"
		],
		"description": "4194304"
	},
	"PRIORITIZE_DEFENSE": {
		"prefix": "PRIORITIZE_DEFENSE",
		"body": [
			"PRIORITIZE_DEFENSE$0"
		],
		"description": "4096"
	},
	"PROJECTILE_SHIELD": {
		"prefix": "PROJECTILE_SHIELD",
		"body": [
			"PROJECTILE_SHIELD$0"
		],
		"description": "134217728"
	},
	"Pi": {
		"prefix": "Pi",
		"body": [
			"Pi$0"
		],
		"description": "3.14159"
	},
	"void PickupObject(handle player, handle entity)": {
		"prefix": "PickupObject",
		"body": [
			"PickupObject(${1:handle player}, ${2:handle entity})$0"
		],
		"description": "Object from world is put into the \"Held\" slot of the player. Warning: it will smoothly interpolate from where it is to the players hand - which is a bit goofy if it is on other side of level."
	},
	"float Pitch()": {
		"prefix": "Pitch",
		"body": [
			"Pitch()$0"
		],
		"description": "Returns the pitch angle in degrees."
	},
	"float PlayScene(string scene_file, float delay)": {
		"prefix": "PlayScene",
		"body": [
			"PlayScene(${1:string scene_file}, ${2:float delay})$0"
		],
		"description": "Play the specified .vcd file, causing the related characters to speak and subtitles to play."
	},
	"CBasePlayer PlayerInstanceFromIndex(int index)": {
		"prefix": "PlayerInstanceFromIndex",
		"body": [
			"PlayerInstanceFromIndex(${1:int index})$0"
		],
		"description": "Get a script handle of a player using the player index."
	},
	"bool PlayerReadyStatus_ArePlayersOnTeamReady(int team)": {
		"prefix": "PlayerReadyStatus_ArePlayersOnTeamReady",
		"body": [
			"PlayerReadyStatus_ArePlayersOnTeamReady(${1:int team})$0"
		],
		"description": ""
	},
	"bool PlayerReadyStatus_HaveMinPlayersToEnable()": {
		"prefix": "PlayerReadyStatus_HaveMinPlayersToEnable",
		"body": [
			"PlayerReadyStatus_HaveMinPlayersToEnable()$0"
		],
		"description": ""
	},
	"void PlayerReadyStatus_ResetState()": {
		"prefix": "PlayerReadyStatus_ResetState",
		"body": [
			"PlayerReadyStatus_ResetState()$0"
		],
		"description": ""
	},
	"bool PlayersAreOnMatchSummaryStage()": {
		"prefix": "PlayersAreOnMatchSummaryStage",
		"body": [
			"PlayersAreOnMatchSummaryStage()$0"
		],
		"description": ""
	},
	"bool PointsMayBeCaptured()": {
		"prefix": "PointsMayBeCaptured",
		"body": [
			"PointsMayBeCaptured()$0"
		],
		"description": "Are points able to be captured?"
	},
	"void PostScriptExecute()": {
		"prefix": "PostScriptExecute",
		"body": [
			"PostScriptExecute()$0"
		],
		"description": "Begin searching for all non-native functions with matching prefixes, then push them into the chain array."
	},
	"void PostSpawn(table entities)": {
		"prefix": "PostSpawn",
		"body": [
			"PostSpawn(${1:table entities})$0"
		],
		"description": "Called after the entities are spawned. A table with the handles of the spawned entities indexed by name is passed to the function. Could use this to connect outputs or do whatever needs to be done after the entity was created."
	},
	"table PreSpawnInstance(string entityClass, string entityName)": {
		"prefix": "PreSpawnInstance",
		"body": [
			"PreSpawnInstance(${1:string entityClass}, ${2:string entityName})$0"
		],
		"description": "If this is defined, it will be called right before the entity is created, and any keyvalues returned will be assigned to the entity."
	},
	"void Precache()": {
		"prefix": "Precache",
		"body": [
			"Precache()$0"
		],
		"description": "Called after the script executes. Can be used to call precache functions for models and sounds on map load."
	},
	"bool PrecacheEntityFromTable(table keyvalues)": {
		"prefix": "PrecacheEntityFromTable",
		"body": [
			"PrecacheEntityFromTable(${1:table keyvalues})$0"
		],
		"description": "Precache an entity from KeyValues in a table. Internally this function creates the entity, fire DispatchSpawn and removes it instantly."
	},
	"int PrecacheModel(string filename)": {
		"prefix": "PrecacheModel",
		"body": [
			"PrecacheModel(${1:string filename})$0"
		],
		"description": "Precache a model and return index of the model."
	},
	"bool PrecacheScriptSound(string soundName)": {
		"prefix": "PrecacheScriptSound",
		"body": [
			"PrecacheScriptSound(${1:string soundName})$0"
		],
		"description": "Preache a soundscript."
	},
	"void PrecacheSound(string soundName)": {
		"prefix": "PrecacheSound",
		"body": [
			"PrecacheSound(${1:string soundName})$0"
		],
		"description": "Precache a raw sound."
	},
	"void PrecacheSoundScript(string soundscript)": {
		"prefix": "PrecacheSoundScript",
		"body": [
			"PrecacheSoundScript(${1:string soundscript})$0"
		],
		"description": "Precache a sound script. Same as PrecacheScriptSound."
	},
	"void PressAltFireButton(float duration)": {
		"prefix": "PressAltFireButton",
		"body": [
			"PressAltFireButton(${1:float duration})$0"
		],
		"description": ""
	},
	"void PressFireButton(float duration)": {
		"prefix": "PressFireButton",
		"body": [
			"PressFireButton(${1:float duration})$0"
		],
		"description": ""
	},
	"void PressSpecialFireButton(float duration)": {
		"prefix": "PressSpecialFireButton",
		"body": [
			"PressSpecialFireButton(${1:float duration})$0"
		],
		"description": ""
	},
	"void PrimaryAttack()": {
		"prefix": "PrimaryAttack",
		"body": [
			"PrimaryAttack()$0"
		],
		"description": "Force a primary attack"
	},
	"PrintHelp()": {
		"prefix": "PrintHelp",
		"body": [
			"PrintHelp()$0"
		],
		"description": "Equivalent to running script_help command."
	},
	"QAngle(float pitch = 0, float yaw = 0, float roll = 0)": {
		"prefix": "QAngle",
		"body": [
			"QAngle(${1:float pitch = 0}, ${2:float yaw = 0}, ${3:float roll = 0})$0"
		],
		"description": "Creates a new QAngle."
	},
	"QUOTA_MANANGED": {
		"prefix": "QUOTA_MANANGED",
		"body": [
			"QUOTA_MANANGED$0"
		],
		"description": "64"
	},
	"Quaternion(float x, float y, float z, float w)": {
		"prefix": "Quaternion",
		"body": [
			"Quaternion(${1:float x}, ${2:float y}, ${3:float z}, ${4:float w})$0"
		],
		"description": "Creates a new quaternion of the form w + xi + yj + zk."
	},
	"RAND_MAX": {
		"prefix": "RAND_MAX",
		"body": [
			"RAND_MAX$0"
		],
		"description": "32767"
	},
	"RECIPIENT_FILTER_DEFAULT": {
		"prefix": "RECIPIENT_FILTER_DEFAULT",
		"body": [
			"RECIPIENT_FILTER_DEFAULT$0"
		],
		"description": "0"
	},
	"RECIPIENT_FILTER_GLOBAL": {
		"prefix": "RECIPIENT_FILTER_GLOBAL",
		"body": [
			"RECIPIENT_FILTER_GLOBAL$0"
		],
		"description": "5"
	},
	"RECIPIENT_FILTER_PAS": {
		"prefix": "RECIPIENT_FILTER_PAS",
		"body": [
			"RECIPIENT_FILTER_PAS$0"
		],
		"description": "2"
	},
	"RECIPIENT_FILTER_PAS_ATTENUATION": {
		"prefix": "RECIPIENT_FILTER_PAS_ATTENUATION",
		"body": [
			"RECIPIENT_FILTER_PAS_ATTENUATION$0"
		],
		"description": "1"
	},
	"RECIPIENT_FILTER_PVS": {
		"prefix": "RECIPIENT_FILTER_PVS",
		"body": [
			"RECIPIENT_FILTER_PVS$0"
		],
		"description": "3"
	},
	"RECIPIENT_FILTER_SINGLE_PLAYER": {
		"prefix": "RECIPIENT_FILTER_SINGLE_PLAYER",
		"body": [
			"RECIPIENT_FILTER_SINGLE_PLAYER$0"
		],
		"description": "4"
	},
	"RECIPIENT_FILTER_TEAM": {
		"prefix": "RECIPIENT_FILTER_TEAM",
		"body": [
			"RECIPIENT_FILTER_TEAM$0"
		],
		"description": "6"
	},
	"REMOVE_ON_DEATH": {
		"prefix": "REMOVE_ON_DEATH",
		"body": [
			"REMOVE_ON_DEATH$0"
		],
		"description": "1"
	},
	"RETAIN_BUILDINGS": {
		"prefix": "RETAIN_BUILDINGS",
		"body": [
			"RETAIN_BUILDINGS$0"
		],
		"description": "128"
	},
	"RIGHT": {
		"prefix": "RIGHT",
		"body": [
			"RIGHT$0"
		],
		"description": "1"
	},
	"float RandomFloat(float min, float max)": {
		"prefix": "RandomFloat",
		"body": [
			"RandomFloat(${1:float min}, ${2:float max})$0"
		],
		"description": "Generate a random floating-point number within a range, inclusive."
	},
	"int RandomInt(int min, int max)": {
		"prefix": "RandomInt",
		"body": [
			"RandomInt(${1:int min}, ${2:int max})$0"
		],
		"description": "Generate a random integer within a range, inclusive."
	},
	"void ReapplyProvision()": {
		"prefix": "ReapplyProvision",
		"body": [
			"ReapplyProvision()$0"
		],
		"description": "Relinks attributes to provisioners, e.g. calling this on a weapon will add it's attributes to the player"
	},
	"void Regenerate(bool refill_health_ammo)": {
		"prefix": "Regenerate",
		"body": [
			"Regenerate(${1:bool refill_health_ammo})$0"
		],
		"description": "Resupplies a player. If regen health/ammo is set, clears negative conds, gives back player health/ammo"
	},
	"void RegisterAvoidanceObstacle(handle entity)": {
		"prefix": "RegisterAvoidanceObstacle",
		"body": [
			"RegisterAvoidanceObstacle(${1:handle entity})$0"
		],
		"description": "registers avoidance obstacle"
	},
	"void RegisterFunctionDocumentation(unknown func, string name, string signature, string description)": {
		"prefix": "RegisterFunctionDocumentation",
		"body": [
			"RegisterFunctionDocumentation(${1:unknown func}, ${2:string name}, ${3:string signature}, ${4:string description})$0"
		],
		"description": ""
	},
	"void RegisterScriptGameEventListener(string eventName)": {
		"prefix": "RegisterScriptGameEventListener",
		"body": [
			"RegisterScriptGameEventListener(${1:string eventName})$0"
		],
		"description": "Register as a listener for a game event from script. It's what __CollectGameEventCallbacks() uses to register event callbacks to the C++ code."
	},
	"void RegisterScriptHookListener(string name)": {
		"prefix": "RegisterScriptHookListener",
		"body": [
			"RegisterScriptHookListener(${1:string name})$0"
		],
		"description": "Register as a listener for a script hook from script."
	},
	"void ReleaseKeyValues()": {
		"prefix": "ReleaseKeyValues",
		"body": [
			"ReleaseKeyValues()$0"
		],
		"description": "Releases the contents of the instance."
	},
	"void RemoveAllItems(bool unused)": {
		"prefix": "RemoveAllItems",
		"body": [
			"RemoveAllItems(${1:bool unused})$0"
		],
		"description": ""
	},
	"void RemoveAllObjects(bool explode)": {
		"prefix": "RemoveAllObjects",
		"body": [
			"RemoveAllObjects(${1:bool explode})$0"
		],
		"description": "Remove all player objects. Eg. dispensers/sentries."
	},
	"void RemoveAttribute(string name)": {
		"prefix": "RemoveAttribute",
		"body": [
			"RemoveAttribute(${1:string name})$0"
		],
		"description": "Remove an attribute to the entity"
	},
	"void RemoveAttributes(int bits)": {
		"prefix": "RemoveAttributes",
		"body": [
			"RemoveAttributes(${1:int bits})$0"
		],
		"description": "Removes area attribute bits."
	},
	"void RemoveBotAttribute(int attribute)": {
		"prefix": "RemoveBotAttribute",
		"body": [
			"RemoveBotAttribute(${1:int attribute})$0"
		],
		"description": "Removes attribute flags on this TFBot"
	},
	"void RemoveBotTag(string tag)": {
		"prefix": "RemoveBotTag",
		"body": [
			"RemoveBotTag(${1:string tag})$0"
		],
		"description": "Removes a bot tag"
	},
	"void RemoveBroadcastTeamTarget(int index)": {
		"prefix": "RemoveBroadcastTeamTarget",
		"body": [
			"RemoveBroadcastTeamTarget(${1:int index})$0"
		],
		"description": "Removes a team (by index) from the broadcast list"
	},
	"void RemoveCond(ETFCond cond)": {
		"prefix": "RemoveCond",
		"body": [
			"RemoveCond(${1:ETFCond cond})$0"
		],
		"description": ""
	},
	"void RemoveCondEx(ETFCond cond, bool ignoreDuration)": {
		"prefix": "RemoveCondEx",
		"body": [
			"RemoveCondEx(${1:ETFCond cond}, ${2:bool ignoreDuration})$0"
		],
		"description": ""
	},
	"void RemoveCurrency(int amount)": {
		"prefix": "RemoveCurrency",
		"body": [
			"RemoveCurrency(${1:int amount})$0"
		],
		"description": "Take away money from a player for reasons such as ie. spending."
	},
	"void RemoveCustomAttribute(string name)": {
		"prefix": "RemoveCustomAttribute",
		"body": [
			"RemoveCustomAttribute(${1:string name})$0"
		],
		"description": "Remove a custom attribute to the player"
	},
	"RemoveDelegation()": {
		"prefix": "RemoveDelegation",
		"body": [
			"RemoveDelegation()$0"
		],
		"description": ""
	},
	"void RemoveDisguise()": {
		"prefix": "RemoveDisguise",
		"body": [
			"RemoveDisguise()$0"
		],
		"description": "Undisguise a spy."
	},
	"void RemoveEFlags(int eflags)": {
		"prefix": "RemoveEFlags",
		"body": [
			"RemoveEFlags(${1:int eflags})$0"
		],
		"description": ""
	},
	"void RemoveFlag(int flags)": {
		"prefix": "RemoveFlag",
		"body": [
			"RemoveFlag(${1:int flags})$0"
		],
		"description": ""
	},
	"void RemoveHudHideFlags(int flags)": {
		"prefix": "RemoveHudHideFlags",
		"body": [
			"RemoveHudHideFlags(${1:int flags})$0"
		],
		"description": "Unhides a hud element based on Constants.FHideHUD"
	},
	"void RemoveInvisibility()": {
		"prefix": "RemoveInvisibility",
		"body": [
			"RemoveInvisibility()$0"
		],
		"description": "Un-invisible a spy."
	},
	"void RemoveOrthogonalConnections(ENavDirType dir)": {
		"prefix": "RemoveOrthogonalConnections",
		"body": [
			"RemoveOrthogonalConnections(${1:ENavDirType dir})$0"
		],
		"description": "Removes all connections in directions to left and right of specified direction."
	},
	"void RemoveOutput(handle entity, string outputName, string targetName, string inputName, string parameter)": {
		"prefix": "RemoveOutput",
		"body": [
			"RemoveOutput(${1:handle entity}, ${2:string outputName}, ${3:string targetName}, ${4:string inputName}, ${5:string parameter})$0"
		],
		"description": "Removes an output from the entity."
	},
	"void RemoveSolidFlags(int solidflags)": {
		"prefix": "RemoveSolidFlags",
		"body": [
			"RemoveSolidFlags(${1:int solidflags})$0"
		],
		"description": ""
	},
	"void RemoveTeleportEffect()": {
		"prefix": "RemoveTeleportEffect",
		"body": [
			"RemoveTeleportEffect()$0"
		],
		"description": ""
	},
	"void RemoveWeaponRestriction(int flags)": {
		"prefix": "RemoveWeaponRestriction",
		"body": [
			"RemoveWeaponRestriction(${1:int flags})$0"
		],
		"description": "Removes weapon restriction flags"
	},
	"Reset()": {
		"prefix": "Reset",
		"body": [
			"Reset()$0"
		],
		"description": "Resets motion, stuck state, etc"
	},
	"void ResetScores()": {
		"prefix": "ResetScores",
		"body": [
			"ResetScores()$0"
		],
		"description": ""
	},
	"void ResetSequence(int ID)": {
		"prefix": "ResetSequence",
		"body": [
			"ResetSequence(${1:int ID})$0"
		],
		"description": "Reset a sequence by sequence ID. If the ID is different than the current sequence, switch to the new sequence."
	},
	"Resolve()": {
		"prefix": "Resolve",
		"body": [
			"Resolve()$0"
		],
		"description": ""
	},
	"string RetrieveNativeSignature(function func)": {
		"prefix": "RetrieveNativeSignature",
		"body": [
			"RetrieveNativeSignature(${1:function func})$0"
		],
		"description": ""
	},
	"float Roll()": {
		"prefix": "Roll",
		"body": [
			"Roll()$0"
		],
		"description": "Returns the roll angle in degrees."
	},
	"void RollRareSpell()": {
		"prefix": "RollRareSpell",
		"body": [
			"RollRareSpell()$0"
		],
		"description": ""
	},
	"QAngle RotateOrientation(QAngle, QAngle)": {
		"prefix": "RotateOrientation",
		"body": [
			"RotateOrientation(${1:QAngle}, ${2:QAngle})$0"
		],
		"description": "Rotate a QAngle by another QAngle."
	},
	"Vector RotatePosition(Vector origin, QAngle rotation, Vector input)": {
		"prefix": "RotatePosition",
		"body": [
			"RotatePosition(${1:Vector origin}, ${2:QAngle rotation}, ${3:Vector input})$0"
		],
		"description": "Rotate the input Vector around an origin."
	},
	"void Run()": {
		"prefix": "Run",
		"body": [
			"Run()$0"
		],
		"description": "Set desired movement speed to running"
	},
	"SOLID_BBOX": {
		"prefix": "SOLID_BBOX",
		"body": [
			"SOLID_BBOX$0"
		],
		"description": "2"
	},
	"SOLID_BSP": {
		"prefix": "SOLID_BSP",
		"body": [
			"SOLID_BSP$0"
		],
		"description": "1"
	},
	"SOLID_CUSTOM": {
		"prefix": "SOLID_CUSTOM",
		"body": [
			"SOLID_CUSTOM$0"
		],
		"description": "5"
	},
	"SOLID_LAST": {
		"prefix": "SOLID_LAST",
		"body": [
			"SOLID_LAST$0"
		],
		"description": "7"
	},
	"SOLID_NONE": {
		"prefix": "SOLID_NONE",
		"body": [
			"SOLID_NONE$0"
		],
		"description": "0"
	},
	"SOLID_OBB": {
		"prefix": "SOLID_OBB",
		"body": [
			"SOLID_OBB$0"
		],
		"description": "3"
	},
	"SOLID_OBB_YAW": {
		"prefix": "SOLID_OBB_YAW",
		"body": [
			"SOLID_OBB_YAW$0"
		],
		"description": "4"
	},
	"SOLID_VPHYSICS": {
		"prefix": "SOLID_VPHYSICS",
		"body": [
			"SOLID_VPHYSICS$0"
		],
		"description": "6"
	},
	"SOUTH": {
		"prefix": "SOUTH",
		"body": [
			"SOUTH$0"
		],
		"description": "2"
	},
	"SOUTH_EAST": {
		"prefix": "SOUTH_EAST",
		"body": [
			"SOUTH_EAST$0"
		],
		"description": "2"
	},
	"SOUTH_WEST": {
		"prefix": "SOUTH_WEST",
		"body": [
			"SOUTH_WEST$0"
		],
		"description": "3"
	},
	"SPAWN_WITH_FULL_CHARGE": {
		"prefix": "SPAWN_WITH_FULL_CHARGE",
		"body": [
			"SPAWN_WITH_FULL_CHARGE$0"
		],
		"description": "256"
	},
	"STOPWATCH_CAPTURE_TIME_NOT_SET": {
		"prefix": "STOPWATCH_CAPTURE_TIME_NOT_SET",
		"body": [
			"STOPWATCH_CAPTURE_TIME_NOT_SET$0"
		],
		"description": "0"
	},
	"STOPWATCH_OVERTIME": {
		"prefix": "STOPWATCH_OVERTIME",
		"body": [
			"STOPWATCH_OVERTIME$0"
		],
		"description": "2"
	},
	"STOPWATCH_RUNNING": {
		"prefix": "STOPWATCH_RUNNING",
		"body": [
			"STOPWATCH_RUNNING$0"
		],
		"description": "1"
	},
	"SUPPRESS_FIRE": {
		"prefix": "SUPPRESS_FIRE",
		"body": [
			"SUPPRESS_FIRE$0"
		],
		"description": "8"
	},
	"SURF_BUMPLIGHT": {
		"prefix": "SURF_BUMPLIGHT",
		"body": [
			"SURF_BUMPLIGHT$0"
		],
		"description": "2048"
	},
	"SURF_HINT": {
		"prefix": "SURF_HINT",
		"body": [
			"SURF_HINT$0"
		],
		"description": "256"
	},
	"SURF_HITBOX": {
		"prefix": "SURF_HITBOX",
		"body": [
			"SURF_HITBOX$0"
		],
		"description": "32768"
	},
	"SURF_LIGHT": {
		"prefix": "SURF_LIGHT",
		"body": [
			"SURF_LIGHT$0"
		],
		"description": "1"
	},
	"SURF_NOCHOP": {
		"prefix": "SURF_NOCHOP",
		"body": [
			"SURF_NOCHOP$0"
		],
		"description": "16384"
	},
	"SURF_NODECALS": {
		"prefix": "SURF_NODECALS",
		"body": [
			"SURF_NODECALS$0"
		],
		"description": "8192"
	},
	"SURF_NODRAW": {
		"prefix": "SURF_NODRAW",
		"body": [
			"SURF_NODRAW$0"
		],
		"description": "128"
	},
	"SURF_NOLIGHT": {
		"prefix": "SURF_NOLIGHT",
		"body": [
			"SURF_NOLIGHT$0"
		],
		"description": "1024"
	},
	"SURF_NOPORTAL": {
		"prefix": "SURF_NOPORTAL",
		"body": [
			"SURF_NOPORTAL$0"
		],
		"description": "32"
	},
	"SURF_NOSHADOWS": {
		"prefix": "SURF_NOSHADOWS",
		"body": [
			"SURF_NOSHADOWS$0"
		],
		"description": "4096"
	},
	"SURF_SKIP": {
		"prefix": "SURF_SKIP",
		"body": [
			"SURF_SKIP$0"
		],
		"description": "512"
	},
	"SURF_SKY": {
		"prefix": "SURF_SKY",
		"body": [
			"SURF_SKY$0"
		],
		"description": "4"
	},
	"SURF_SKY2D": {
		"prefix": "SURF_SKY2D",
		"body": [
			"SURF_SKY2D$0"
		],
		"description": "2"
	},
	"SURF_TRANS": {
		"prefix": "SURF_TRANS",
		"body": [
			"SURF_TRANS$0"
		],
		"description": "16"
	},
	"SURF_TRIGGER": {
		"prefix": "SURF_TRIGGER",
		"body": [
			"SURF_TRIGGER$0"
		],
		"description": "64"
	},
	"SURF_WARP": {
		"prefix": "SURF_WARP",
		"body": [
			"SURF_WARP$0"
		],
		"description": "8"
	},
	"void Say(CBasePlayer player, string message, bool teamOnly)": {
		"prefix": "Say",
		"body": [
			"Say(${1:CBasePlayer player}, ${2:string message}, ${3:bool teamOnly})$0"
		],
		"description": "Calling this will have the specified player send the message to chat, either to teamOnly (true) or to everyone."
	},
	"Vector Scale(float factor)": {
		"prefix": "Scale",
		"body": [
			"Scale(${1:float factor})$0"
		],
		"description": "Scales the vector magnitude."
	},
	"void ScreenFade(handle player, int red, int green, int blue, int alpha, float fadeTime, float fadeHold, int flags)": {
		"prefix": "ScreenFade",
		"body": [
			"ScreenFade(${1:handle player}, ${2:int red}, ${3:int green}, ${4:int blue}, ${5:int alpha}, ${6:float fadeTime}, ${7:float fadeHold}, ${8:int flags})$0"
		],
		"description": "Start a customisable screenfade. If no player is specified, the fade will apply to all players."
	},
	"void ScreenShake(Vector vecCenter, float flAmplitude, float flFrequency, float flDuration, float flRadius, int eCommand, bool bAirShake)": {
		"prefix": "ScreenShake",
		"body": [
			"ScreenShake(${1:Vector vecCenter}, ${2:float flAmplitude}, ${3:float flFrequency}, ${4:float flDuration}, ${5:float flRadius}, ${6:int eCommand}, ${7:bool bAirShake})$0"
		],
		"description": "Start a customisable screenshake; eCommand( SHAKE_START = 0, SHAKE_STOP = 1 )."
	},
	"void ScriptDebugAddTextFilter()": {
		"prefix": "ScriptDebugAddTextFilter",
		"body": [
			"ScriptDebugAddTextFilter()$0"
		],
		"description": ""
	},
	"void ScriptDebugAddTrace()": {
		"prefix": "ScriptDebugAddTrace",
		"body": [
			"ScriptDebugAddTrace()$0"
		],
		"description": ""
	},
	"void ScriptDebugAddWatch()": {
		"prefix": "ScriptDebugAddWatch",
		"body": [
			"ScriptDebugAddWatch()$0"
		],
		"description": ""
	},
	"void ScriptDebugAddWatchPattern()": {
		"prefix": "ScriptDebugAddWatchPattern",
		"body": [
			"ScriptDebugAddWatchPattern()$0"
		],
		"description": ""
	},
	"void ScriptDebugAddWatches()": {
		"prefix": "ScriptDebugAddWatches",
		"body": [
			"ScriptDebugAddWatches()$0"
		],
		"description": ""
	},
	"void ScriptDebugClearTraces()": {
		"prefix": "ScriptDebugClearTraces",
		"body": [
			"ScriptDebugClearTraces()$0"
		],
		"description": ""
	},
	"void ScriptDebugClearWatches()": {
		"prefix": "ScriptDebugClearWatches",
		"body": [
			"ScriptDebugClearWatches()$0"
		],
		"description": ""
	},
	"void ScriptDebugDefaultWatchColor()": {
		"prefix": "ScriptDebugDefaultWatchColor",
		"body": [
			"ScriptDebugDefaultWatchColor()$0"
		],
		"description": ""
	},
	"void ScriptDebugDraw()": {
		"prefix": "ScriptDebugDraw",
		"body": [
			"ScriptDebugDraw()$0"
		],
		"description": ""
	},
	"ScriptDebugDrawTextEnabled": {
		"prefix": "ScriptDebugDrawTextEnabled",
		"body": [
			"ScriptDebugDrawTextEnabled$0"
		],
		"description": ""
	},
	"void ScriptDebugDrawWatches()": {
		"prefix": "ScriptDebugDrawWatches",
		"body": [
			"ScriptDebugDrawWatches()$0"
		],
		"description": ""
	},
	"ScriptDebugDrawWatchesEnabled": {
		"prefix": "ScriptDebugDrawWatchesEnabled",
		"body": [
			"ScriptDebugDrawWatchesEnabled$0"
		],
		"description": ""
	},
	"void ScriptDebugDumpKeys()": {
		"prefix": "ScriptDebugDumpKeys",
		"body": [
			"ScriptDebugDumpKeys()$0"
		],
		"description": ""
	},
	"void ScriptDebugHook()": {
		"prefix": "ScriptDebugHook",
		"body": [
			"ScriptDebugHook()$0"
		],
		"description": ""
	},
	"ScriptDebugInDebugDraw": {
		"prefix": "ScriptDebugInDebugDraw",
		"body": [
			"ScriptDebugInDebugDraw$0"
		],
		"description": ""
	},
	"void ScriptDebugIterateKeys()": {
		"prefix": "ScriptDebugIterateKeys",
		"body": [
			"ScriptDebugIterateKeys()$0"
		],
		"description": ""
	},
	"void ScriptDebugIterateKeysRecursive()": {
		"prefix": "ScriptDebugIterateKeysRecursive",
		"body": [
			"ScriptDebugIterateKeysRecursive()$0"
		],
		"description": ""
	},
	"void ScriptDebugRemoveTextFilter()": {
		"prefix": "ScriptDebugRemoveTextFilter",
		"body": [
			"ScriptDebugRemoveTextFilter()$0"
		],
		"description": ""
	},
	"void ScriptDebugRemoveTrace()": {
		"prefix": "ScriptDebugRemoveTrace",
		"body": [
			"ScriptDebugRemoveTrace()$0"
		],
		"description": ""
	},
	"void ScriptDebugRemoveWatch()": {
		"prefix": "ScriptDebugRemoveWatch",
		"body": [
			"ScriptDebugRemoveWatch()$0"
		],
		"description": ""
	},
	"void ScriptDebugRemoveWatchPattern()": {
		"prefix": "ScriptDebugRemoveWatchPattern",
		"body": [
			"ScriptDebugRemoveWatchPattern()$0"
		],
		"description": ""
	},
	"void ScriptDebugRemoveWatches()": {
		"prefix": "ScriptDebugRemoveWatches",
		"body": [
			"ScriptDebugRemoveWatches()$0"
		],
		"description": ""
	},
	"void ScriptDebugText()": {
		"prefix": "ScriptDebugText",
		"body": [
			"ScriptDebugText()$0"
		],
		"description": ""
	},
	"void ScriptDebugTextDraw()": {
		"prefix": "ScriptDebugTextDraw",
		"body": [
			"ScriptDebugTextDraw()$0"
		],
		"description": ""
	},
	"ScriptDebugTextFilters": {
		"prefix": "ScriptDebugTextFilters",
		"body": [
			"ScriptDebugTextFilters$0"
		],
		"description": ""
	},
	"ScriptDebugTextIndent": {
		"prefix": "ScriptDebugTextIndent",
		"body": [
			"ScriptDebugTextIndent$0"
		],
		"description": ""
	},
	"void ScriptDebugTextPrint()": {
		"prefix": "ScriptDebugTextPrint",
		"body": [
			"ScriptDebugTextPrint()$0"
		],
		"description": ""
	},
	"void ScriptDebugTextTrace()": {
		"prefix": "ScriptDebugTextTrace",
		"body": [
			"ScriptDebugTextTrace()$0"
		],
		"description": ""
	},
	"void ScriptDebugTraceAll()": {
		"prefix": "ScriptDebugTraceAll",
		"body": [
			"ScriptDebugTraceAll()$0"
		],
		"description": ""
	},
	"ScriptDebugTraceAllOn": {
		"prefix": "ScriptDebugTraceAllOn",
		"body": [
			"ScriptDebugTraceAllOn$0"
		],
		"description": ""
	},
	"ScriptDebugTraces": {
		"prefix": "ScriptDebugTraces",
		"body": [
			"ScriptDebugTraces$0"
		],
		"description": ""
	},
	"void ScriptDebugWatches()": {
		"prefix": "ScriptDebugWatches",
		"body": [
			"ScriptDebugWatches()$0"
		],
		"description": ""
	},
	"ScriptEventCallbacks": {
		"prefix": "ScriptEventCallbacks",
		"body": [
			"ScriptEventCallbacks$0"
		],
		"description": "Table of registered script event callbacks."
	},
	"ScriptHookCallbacks": {
		"prefix": "ScriptHookCallbacks",
		"body": [
			"ScriptHookCallbacks$0"
		],
		"description": "Table of registered script hook callbacks."
	},
	"bool ScriptHooksEnabled()": {
		"prefix": "ScriptHooksEnabled",
		"body": [
			"ScriptHooksEnabled()$0"
		],
		"description": "Returns whether script hooks are currently enabled."
	},
	"void SecondaryAttack()": {
		"prefix": "SecondaryAttack",
		"body": [
			"SecondaryAttack()$0"
		],
		"description": "Force a secondary attack"
	},
	"bool SendGlobalGameEvent(string event_name, handle params)": {
		"prefix": "SendGlobalGameEvent",
		"body": [
			"SendGlobalGameEvent(${1:string event_name}, ${2:handle params})$0"
		],
		"description": "Sends a real game event to everything. Parameters are passed in a squirrel table."
	},
	"void SendToConsole(string command)": {
		"prefix": "SendToConsole",
		"body": [
			"SendToConsole(${1:string command})$0"
		],
		"description": "Issues a command to the local client, as if they typed in the command in their console. Does nothing on dedicated servers."
	},
	"void SendToConsoleServer(string command)": {
		"prefix": "SendToConsoleServer",
		"body": [
			"SendToConsoleServer(${1:string command})$0"
		],
		"description": "Copy of SendToServerConsole with another name for compat."
	},
	"void SendToServerConsole(string command)": {
		"prefix": "SendToServerConsole",
		"body": [
			"SendToServerConsole(${1:string command})$0"
		],
		"description": "Issues a command to the server, as if typed in the console."
	},
	"void SetAbsAngles(QAngle angles)": {
		"prefix": "SetAbsAngles",
		"body": [
			"SetAbsAngles(${1:QAngle angles})$0"
		],
		"description": "Set entity pitch, yaw, roll as QAngles"
	},
	"void SetAbsOrigin(Vector origin)": {
		"prefix": "SetAbsOrigin",
		"body": [
			"SetAbsOrigin(${1:Vector origin})$0"
		],
		"description": "Sets the absolute origin of the entity."
	},
	"void SetAbsVelocity(Vector)": {
		"prefix": "SetAbsVelocity",
		"body": [
			"SetAbsVelocity(${1:Vector})$0"
		],
		"description": "Sets the current absolute velocity velocity of the entity"
	},
	"void SetAngles(float pitch, float yaw, float roll)": {
		"prefix": "SetAngles",
		"body": [
			"SetAngles(${1:float pitch}, ${2:float yaw}, ${3:float roll})$0"
		],
		"description": "Set entity angles."
	},
	"void SetAngularVelocity(float pitch, float yaw, float roll)": {
		"prefix": "SetAngularVelocity",
		"body": [
			"SetAngularVelocity(${1:float pitch}, ${2:float yaw}, ${3:float roll})$0"
		],
		"description": "Set the local angular velocity."
	},
	"void SetAttentionFocus(handle entity)": {
		"prefix": "SetAttentionFocus",
		"body": [
			"SetAttentionFocus(${1:handle entity})$0"
		],
		"description": "Sets our current attention focus to this entity"
	},
	"void SetAttributeTF(int bits)": {
		"prefix": "SetAttributeTF",
		"body": [
			"SetAttributeTF(${1:int bits})$0"
		],
		"description": "Set TF-specific area attributes."
	},
	"void SetAttributes(int bits)": {
		"prefix": "SetAttributes",
		"body": [
			"SetAttributes(${1:int bits})$0"
		],
		"description": "Set area attribute bits."
	},
	"void SetAutoJump(float minTime, float maxTime)": {
		"prefix": "SetAutoJump",
		"body": [
			"SetAutoJump(${1:float minTime}, ${2:float maxTime})$0"
		],
		"description": "Sets if the bot should automatically jump"
	},
	"void SetBodygroup(int ID, int value)": {
		"prefix": "SetBodygroup",
		"body": [
			"SetBodygroup(${1:int ID}, ${2:int value})$0"
		],
		"description": "Set the bodygroup by ID."
	},
	"void SetClip1(int)": {
		"prefix": "SetClip1",
		"body": [
			"SetClip1(${1:int})$0"
		],
		"description": "Set current ammo in clip1"
	},
	"void SetClip2(int)": {
		"prefix": "SetClip2",
		"body": [
			"SetClip2(${1:int})$0"
		],
		"description": "Set current ammo in clip2"
	},
	"void SetCollisionGroup(int collision_group)": {
		"prefix": "SetCollisionGroup",
		"body": [
			"SetCollisionGroup(${1:int collision_group})$0"
		],
		"description": "Set the current collision group of the entity. See Constants.ECollisionGroup"
	},
	"void SetCondDuration(ETFCond cond, float duration)": {
		"prefix": "SetCondDuration",
		"body": [
			"SetCondDuration(${1:ETFCond cond}, ${2:float duration})$0"
		],
		"description": ""
	},
	"void SetCurrency(int amount)": {
		"prefix": "SetCurrency",
		"body": [
			"SetCurrency(${1:int amount})$0"
		],
		"description": "Set player's cash for game modes with upgrades, ie. MvM"
	},
	"void SetCurrentTauntMoveSpeed(float speed)": {
		"prefix": "SetCurrentTauntMoveSpeed",
		"body": [
			"SetCurrentTauntMoveSpeed(${1:float speed})$0"
		],
		"description": ""
	},
	"void SetCustomModel(string model_name)": {
		"prefix": "SetCustomModel",
		"body": [
			"SetCustomModel(${1:string model_name})$0"
		],
		"description": ""
	},
	"void SetCustomModelOffset(Vector offset)": {
		"prefix": "SetCustomModelOffset",
		"body": [
			"SetCustomModelOffset(${1:Vector offset})$0"
		],
		"description": ""
	},
	"void SetCustomModelRotates(bool toggle)": {
		"prefix": "SetCustomModelRotates",
		"body": [
			"SetCustomModelRotates(${1:bool toggle})$0"
		],
		"description": ""
	},
	"void SetCustomModelRotation(QAngle angles)": {
		"prefix": "SetCustomModelRotation",
		"body": [
			"SetCustomModelRotation(${1:QAngle angles})$0"
		],
		"description": ""
	},
	"void SetCustomModelVisibleToSelf(bool toggle)": {
		"prefix": "SetCustomModelVisibleToSelf",
		"body": [
			"SetCustomModelVisibleToSelf(${1:bool toggle})$0"
		],
		"description": ""
	},
	"void SetCustomModelWithClassAnimations(string model_name)": {
		"prefix": "SetCustomModelWithClassAnimations",
		"body": [
			"SetCustomModelWithClassAnimations(${1:string model_name})$0"
		],
		"description": ""
	},
	"void SetCustomViewModel(string model_name)": {
		"prefix": "SetCustomViewModel",
		"body": [
			"SetCustomViewModel(${1:string model_name})$0"
		],
		"description": "Sets a custom view model for this weapon by model name"
	},
	"void SetCustomViewModelModelIndex(int model_index)": {
		"prefix": "SetCustomViewModelModelIndex",
		"body": [
			"SetCustomViewModelModelIndex(${1:int model_index})$0"
		],
		"description": "Sets a custom view model for this weapon by modelindex"
	},
	"void SetCycle(float cycle)": {
		"prefix": "SetCycle",
		"body": [
			"SetCycle(${1:float cycle})$0"
		],
		"description": "Sets the model's current animation cycle from 0 to 1."
	},
	"void SetDesiredSpeed(float)": {
		"prefix": "SetDesiredSpeed",
		"body": [
			"SetDesiredSpeed(${1:float})$0"
		],
		"description": "Set desired speed for locomotor movement"
	},
	"void SetDifficulty(int difficulty)": {
		"prefix": "SetDifficulty",
		"body": [
			"SetDifficulty(${1:int difficulty})$0"
		],
		"description": "Sets the bots difficulty level"
	},
	"void SetDisguiseAmmoCount(int count)": {
		"prefix": "SetDisguiseAmmoCount",
		"body": [
			"SetDisguiseAmmoCount(${1:int count})$0"
		],
		"description": ""
	},
	"void SetDrawEnabled(bool toggle)": {
		"prefix": "SetDrawEnabled",
		"body": [
			"SetDrawEnabled(${1:bool toggle})$0"
		],
		"description": "Enables drawing if you pass true, disables drawing if you pass false."
	},
	"void SetEFlags(int eflags)": {
		"prefix": "SetEFlags",
		"body": [
			"SetEFlags(${1:int eflags})$0"
		],
		"description": ""
	},
	"void SetFakeClientConVarValue(handle bot, string cvar, string value)": {
		"prefix": "SetFakeClientConVarValue",
		"body": [
			"SetFakeClientConVarValue(${1:handle bot}, ${2:string cvar}, ${3:string value})$0"
		],
		"description": "Sets a USERINFO client ConVar for a fakeclient."
	},
	"void SetForceLocalDraw(bool forceDraw)": {
		"prefix": "SetForceLocalDraw",
		"body": [
			"SetForceLocalDraw(${1:bool forceDraw})$0"
		],
		"description": "Forces the player to be drawn as if they were in thirdperson."
	},
	"void SetForcedTauntCam(int toggle)": {
		"prefix": "SetForcedTauntCam",
		"body": [
			"SetForcedTauntCam(${1:int toggle})$0"
		],
		"description": ""
	},
	"void SetForwardVector(Vector forward)": {
		"prefix": "SetForwardVector",
		"body": [
			"SetForwardVector(${1:Vector forward})$0"
		],
		"description": "Set the orientation of the entity to have this forward vector"
	},
	"void SetFriction(float friction)": {
		"prefix": "SetFriction",
		"body": [
			"SetFriction(${1:float friction})$0"
		],
		"description": ""
	},
	"void SetGrapplingHookTarget(handle entity, bool bleed)": {
		"prefix": "SetGrapplingHookTarget",
		"body": [
			"SetGrapplingHookTarget(${1:handle entity}, ${2:bool bleed})$0"
		],
		"description": "Set the player's target grapple entity"
	},
	"void SetGravity(float gravity)": {
		"prefix": "SetGravity",
		"body": [
			"SetGravity(${1:float gravity})$0"
		],
		"description": ""
	},
	"void SetGravityMultiplier(float multiplier)": {
		"prefix": "SetGravityMultiplier",
		"body": [
			"SetGravityMultiplier(${1:float multiplier})$0"
		],
		"description": ""
	},
	"void SetGroupSpawnTables(table)": {
		"prefix": "SetGroupSpawnTables",
		"body": [
			"SetGroupSpawnTables(${1:table})$0"
		],
		"description": "Cache the group spawn tables"
	},
	"void SetHealth(int health)": {
		"prefix": "SetHealth",
		"body": [
			"SetHealth(${1:int health})$0"
		],
		"description": ""
	},
	"void SetHomeArea(handle area)": {
		"prefix": "SetHomeArea",
		"body": [
			"SetHomeArea(${1:handle area})$0"
		],
		"description": "Set the home nav area of the bot, may be null."
	},
	"void SetHudHideFlags(int flags)": {
		"prefix": "SetHudHideFlags",
		"body": [
			"SetHudHideFlags(${1:int flags})$0"
		],
		"description": "Force hud hide flags to a value based on Constants.FHideHUD"
	},
	"void SetIsMiniBoss(bool toggle)": {
		"prefix": "SetIsMiniBoss",
		"body": [
			"SetIsMiniBoss(${1:bool toggle})$0"
		],
		"description": "Make this player an MvM mini-boss."
	},
	"void SetLocalAngles(QAngle angles)": {
		"prefix": "SetLocalAngles",
		"body": [
			"SetLocalAngles(${1:QAngle angles})$0"
		],
		"description": ""
	},
	"void SetLocalOrigin(Vector origin)": {
		"prefix": "SetLocalOrigin",
		"body": [
			"SetLocalOrigin(${1:Vector origin})$0"
		],
		"description": ""
	},
	"void SetMannVsMachineAlarmStatus(bool status)": {
		"prefix": "SetMannVsMachineAlarmStatus",
		"body": [
			"SetMannVsMachineAlarmStatus(${1:bool status})$0"
		],
		"description": ""
	},
	"void SetMaxHealth(int health)": {
		"prefix": "SetMaxHealth",
		"body": [
			"SetMaxHealth(${1:int health})$0"
		],
		"description": "Sets the maximum health this entity can have. Does not update the current health, so SetHealth should be used afterwards."
	},
	"void SetMaxVisionRangeOverride(float range)": {
		"prefix": "SetMaxVisionRangeOverride",
		"body": [
			"SetMaxVisionRangeOverride(${1:float range})$0"
		],
		"description": "Sets max vision range override for the bot"
	},
	"void SetModel(string model_name)": {
		"prefix": "SetModel",
		"body": [
			"SetModel(${1:string model_name})$0"
		],
		"description": "Set a model for this entity"
	},
	"void SetModelScale(float scale, float change_duration)": {
		"prefix": "SetModelScale",
		"body": [
			"SetModelScale(${1:float scale}, ${2:float change_duration})$0"
		],
		"description": "Changes a model's scale over time. Set the change duration to 0.0 to change the scale instantly."
	},
	"void SetModelSimple(string model_name)": {
		"prefix": "SetModelSimple",
		"body": [
			"SetModelSimple(${1:string model_name})$0"
		],
		"description": "Set a model for this entity. Matches easier behaviour of the SetModel input, automatically precaches, maintains sequence/cycle if possible."
	},
	"void SetMoveType(EMoveType movetype, EMoveCollide movecollide)": {
		"prefix": "SetMoveType",
		"body": [
			"SetMoveType(${1:EMoveType movetype}, ${2:EMoveCollide movecollide})$0"
		],
		"description": ""
	},
	"void SetNextChangeClassTime(float time)": {
		"prefix": "SetNextChangeClassTime",
		"body": [
			"SetNextChangeClassTime(${1:float time})$0"
		],
		"description": "Set next change class time."
	},
	"void SetNextChangeTeamTime(float time)": {
		"prefix": "SetNextChangeTeamTime",
		"body": [
			"SetNextChangeTeamTime(${1:float time})$0"
		],
		"description": "Set next change team time."
	},
	"void SetNextRegenTime(float time)": {
		"prefix": "SetNextRegenTime",
		"body": [
			"SetNextRegenTime(${1:float time})$0"
		],
		"description": "Set next available resupply time."
	},
	"void SetOrigin(Vector origin)": {
		"prefix": "SetOrigin",
		"body": [
			"SetOrigin(${1:Vector origin})$0"
		],
		"description": ""
	},
	"void SetOvertimeAllowedForCTF(bool state)": {
		"prefix": "SetOvertimeAllowedForCTF",
		"body": [
			"SetOvertimeAllowedForCTF(${1:bool state})$0"
		],
		"description": ""
	},
	"void SetOwner(handle entity)": {
		"prefix": "SetOwner",
		"body": [
			"SetOwner(${1:handle entity})$0"
		],
		"description": "Sets this entity's owner"
	},
	"void SetPhysAngularVelocity(Vector angular_velocity)": {
		"prefix": "SetPhysAngularVelocity",
		"body": [
			"SetPhysAngularVelocity(${1:Vector angular_velocity})$0"
		],
		"description": ""
	},
	"void SetPhysVelocity(Vector velocity)": {
		"prefix": "SetPhysVelocity",
		"body": [
			"SetPhysVelocity(${1:Vector velocity})$0"
		],
		"description": ""
	},
	"void SetPitchYawRoll(float pitch, float yaw, float roll)": {
		"prefix": "SetPitchYawRoll",
		"body": [
			"SetPitchYawRoll(${1:float pitch}, ${2:float yaw}, ${3:float roll})$0"
		],
		"description": "Recomputes the quaternion from the supplied Euler angles."
	},
	"void SetPlaceName(string name)": {
		"prefix": "SetPlaceName",
		"body": [
			"SetPlaceName(${1:string name})$0"
		],
		"description": "Set place name. If you pass null, the place name will be set to nothing."
	},
	"void SetPlaybackRate(float rate)": {
		"prefix": "SetPlaybackRate",
		"body": [
			"SetPlaybackRate(${1:float rate})$0"
		],
		"description": "Set the current animation's playback rate."
	},
	"void SetPlayerClass(int class)": {
		"prefix": "SetPlayerClass",
		"body": [
			"SetPlayerClass(${1:int class})$0"
		],
		"description": "Sets the player class. Updates the player's visuals and model."
	},
	"void SetPlayersInHell(bool state)": {
		"prefix": "SetPlayersInHell",
		"body": [
			"SetPlayersInHell(${1:bool state})$0"
		],
		"description": ""
	},
	"float SetPoseParameter(int ID, float value)": {
		"prefix": "SetPoseParameter",
		"body": [
			"SetPoseParameter(${1:int ID}, ${2:float value})$0"
		],
		"description": "Sets a pose parameter value. Returns the effective value after clamping or looping."
	},
	"void SetPropBool(handle entity, string propertyName, bool value)": {
		"prefix": "SetPropBool",
		"body": [
			"SetPropBool(${1:handle entity}, ${2:string propertyName}, ${3:bool value})$0"
		],
		"description": "Sets a netprop to the specified boolean."
	},
	"void SetPropBoolArray(handle entity, string propertyName, bool value, int arrayElement)": {
		"prefix": "SetPropBoolArray",
		"body": [
			"SetPropBoolArray(${1:handle entity}, ${2:string propertyName}, ${3:bool value}, ${4:int arrayElement})$0"
		],
		"description": "Sets a netprop from an array to the specified boolean."
	},
	"void SetPropEntity(handle entity, string propertyName, handle value)": {
		"prefix": "SetPropEntity",
		"body": [
			"SetPropEntity(${1:handle entity}, ${2:string propertyName}, ${3:handle value})$0"
		],
		"description": "Sets an EHANDLE-valued netprop (21 bit integer) to reference the specified entity."
	},
	"void SetPropEntityArray(handle entity, string propertyName, handle value, int arrayElement)": {
		"prefix": "SetPropEntityArray",
		"body": [
			"SetPropEntityArray(${1:handle entity}, ${2:string propertyName}, ${3:handle value}, ${4:int arrayElement})$0"
		],
		"description": "Sets an EHANDLE-valued netprop (21 bit integer) from an array to reference the specified entity."
	},
	"void SetPropFloat(handle entity, string propertyName, float value)": {
		"prefix": "SetPropFloat",
		"body": [
			"SetPropFloat(${1:handle entity}, ${2:string propertyName}, ${3:float value})$0"
		],
		"description": "Sets a netprop to the specified float."
	},
	"void SetPropFloatArray(handle entity, string propertyName, float value, int arrayElement)": {
		"prefix": "SetPropFloatArray",
		"body": [
			"SetPropFloatArray(${1:handle entity}, ${2:string propertyName}, ${3:float value}, ${4:int arrayElement})$0"
		],
		"description": "Sets a netprop from an array to the specified float."
	},
	"void SetPropInt(handle entity, string propertyName, int value)": {
		"prefix": "SetPropInt",
		"body": [
			"SetPropInt(${1:handle entity}, ${2:string propertyName}, ${3:int value})$0"
		],
		"description": "Sets a netprop to the specified integer."
	},
	"void SetPropIntArray(handle entity, string propertyName, int value, int arrayElement)": {
		"prefix": "SetPropIntArray",
		"body": [
			"SetPropIntArray(${1:handle entity}, ${2:string propertyName}, ${3:int value}, ${4:int arrayElement})$0"
		],
		"description": "Sets a netprop from an array to the specified integer."
	},
	"void SetPropString(handle entity, string propertyName, string value)": {
		"prefix": "SetPropString",
		"body": [
			"SetPropString(${1:handle entity}, ${2:string propertyName}, ${3:string value})$0"
		],
		"description": "Sets a netprop to the specified string."
	},
	"void SetPropStringArray(handle entity, string propertyName, string value, int arrayElement)": {
		"prefix": "SetPropStringArray",
		"body": [
			"SetPropStringArray(${1:handle entity}, ${2:string propertyName}, ${3:string value}, ${4:int arrayElement})$0"
		],
		"description": "Sets a netprop from an array to the specified string."
	},
	"void SetPropVector(handle entity, string propertyName, Vector value)": {
		"prefix": "SetPropVector",
		"body": [
			"SetPropVector(${1:handle entity}, ${2:string propertyName}, ${3:Vector value})$0"
		],
		"description": "Sets a netprop to the specified vector."
	},
	"void SetPropVectorArray(handle entity, string propertyName, Vector value, int arrayElement)": {
		"prefix": "SetPropVectorArray",
		"body": [
			"SetPropVectorArray(${1:handle entity}, ${2:string propertyName}, ${3:Vector value}, ${4:int arrayElement})$0"
		],
		"description": "Sets a netprop from an array to the specified vector."
	},
	"void SetRPSResult(int result)": {
		"prefix": "SetRPSResult",
		"body": [
			"SetRPSResult(${1:int result})$0"
		],
		"description": "Rig the result of Rock-Paper-Scissors (0 - rock, 1 - paper, 2 - scissors)"
	},
	"void SetRageMeter(float percent)": {
		"prefix": "SetRageMeter",
		"body": [
			"SetRageMeter(${1:float percent})$0"
		],
		"description": "Sets rage meter from 0 - 100."
	},
	"void SetScaleOverride(float scale)": {
		"prefix": "SetScaleOverride",
		"body": [
			"SetScaleOverride(${1:float scale})$0"
		],
		"description": "Sets the scale override for the bot"
	},
	"void SetScoutHypeMeter(float percent)": {
		"prefix": "SetScoutHypeMeter",
		"body": [
			"SetScoutHypeMeter(${1:float percent})$0"
		],
		"description": "Sets hype meter from 0 - 100."
	},
	"void SetScriptOverlayMaterial(string material)": {
		"prefix": "SetScriptOverlayMaterial",
		"body": [
			"SetScriptOverlayMaterial(${1:string material})$0"
		],
		"description": "Sets the overlay material that can't be overriden by other overlays. E.g. Jarate."
	},
	"void SetSequence(int ID)": {
		"prefix": "SetSequence",
		"body": [
			"SetSequence(${1:int ID})$0"
		],
		"description": "Plays a sequence by sequence ID."
	},
	"void SetShouldQuickBuild(bool toggle)": {
		"prefix": "SetShouldQuickBuild",
		"body": [
			"SetShouldQuickBuild(${1:bool toggle})$0"
		],
		"description": "Sets if the bot should build instantly"
	},
	"void SetSize(Vector mins, Vector maxs)": {
		"prefix": "SetSize",
		"body": [
			"SetSize(${1:Vector mins}, ${2:Vector maxs})$0"
		],
		"description": "Sets the bounding box's scale for this entity."
	},
	"void SetSkin(int index)": {
		"prefix": "SetSkin",
		"body": [
			"SetSkin(${1:int index})$0"
		],
		"description": "Sets the model's skin."
	},
	"void SetSkyboxTexture(string texture)": {
		"prefix": "SetSkyboxTexture",
		"body": [
			"SetSkyboxTexture(${1:string texture})$0"
		],
		"description": "Sets the current skybox texture. The path is relative to \"materials/skybox/\". Only the main name of a skybox texture is needed, for example \"sky_gravel_01\"."
	},
	"SetSolid(int solid)": {
		"prefix": "SetSolid",
		"body": [
			"SetSolid(${1:int solid})$0"
		],
		"description": ""
	},
	"SetSolidFlags solid_flags(int)": {
		"prefix": "solid_flags",
		"body": [
			"solid_flags(${1:int})$0"
		],
		"description": ""
	},
	"void SetSpeedLimit(float)": {
		"prefix": "SetSpeedLimit",
		"body": [
			"SetSpeedLimit(${1:float})$0"
		],
		"description": "Set maximum speed bot can reach, regardless of desired speed"
	},
	"void SetSpyCloakMeter(float percent)": {
		"prefix": "SetSpyCloakMeter",
		"body": [
			"SetSpyCloakMeter(${1:float percent})$0"
		],
		"description": "Sets cloak meter from 0 - 100."
	},
	"void SetSquadFormationError(float coefficient)": {
		"prefix": "SetSquadFormationError",
		"body": [
			"SetSquadFormationError(${1:float coefficient})$0"
		],
		"description": "Sets our formation error coefficient."
	},
	"void SetSubType(int subtype)": {
		"prefix": "SetSubType",
		"body": [
			"SetSubType(${1:int subtype})$0"
		],
		"description": "Set the weapon subtype"
	},
	"void SetTeam(int team)": {
		"prefix": "SetTeam",
		"body": [
			"SetTeam(${1:int team})$0"
		],
		"description": "Sets entity team."
	},
	"void SetUseBossHealthBar(bool toggle)": {
		"prefix": "SetUseBossHealthBar",
		"body": [
			"SetUseBossHealthBar(${1:bool toggle})$0"
		],
		"description": ""
	},
	"void SetUsingSpells(bool state)": {
		"prefix": "SetUsingSpells",
		"body": [
			"SetUsingSpells(${1:bool state})$0"
		],
		"description": ""
	},
	"void SetValue(string name, value)": {
		"prefix": "SetValue",
		"body": [
			"SetValue(${1:string name}, ${2:value})$0"
		],
		"description": "Sets the value of the convar. The convar must be in cfg/vscript_convar_allowlist.txt to be set. Convars marked as cheat-only can be set even if sv_cheats is off. Supported types are bool, int, float, string."
	},
	"void SetVehicleReverseTime(float time)": {
		"prefix": "SetVehicleReverseTime",
		"body": [
			"SetVehicleReverseTime(${1:float time})$0"
		],
		"description": "Set the timestamp when kart was reversed"
	},
	"void SetVelocity(Vector velocity)": {
		"prefix": "SetVelocity",
		"body": [
			"SetVelocity(${1:Vector velocity})$0"
		],
		"description": ""
	},
	"SetWaterLevel(int water_level)": {
		"prefix": "SetWaterLevel",
		"body": [
			"SetWaterLevel(${1:int water_level})$0"
		],
		"description": "This sets how much of the entity is underwater. Setting it to 0 means it is not underwater, 1 if the feet are (touching water brush), 2 if the waist is (center of the hull of the entity), and 3 if the head is (eyes position)."
	},
	"SetWaterType(int water_type)": {
		"prefix": "SetWaterType",
		"body": [
			"SetWaterType(${1:int water_type})$0"
		],
		"description": "Set the type of water the entity is currently submerged in. Generic values to use are 32 for water and 16 for slime."
	},
	"bool ShouldAutoJump()": {
		"prefix": "ShouldAutoJump",
		"body": [
			"ShouldAutoJump()$0"
		],
		"description": "Returns if the bot should automatically jump"
	},
	"bool ShouldQuickBuild()": {
		"prefix": "ShouldQuickBuild",
		"body": [
			"ShouldQuickBuild()$0"
		],
		"description": "Returns if the bot should build instantly"
	},
	"void ShowMessage(string message)": {
		"prefix": "ShowMessage",
		"body": [
			"ShowMessage(${1:string message})$0"
		],
		"description": "Print a hud message on all clients"
	},
	"void SnapEyeAngles(QAngle angles)": {
		"prefix": "SnapEyeAngles",
		"body": [
			"SnapEyeAngles(${1:QAngle angles})$0"
		],
		"description": "Snap the player's eye angles to this."
	},
	"void SpawnEntity()": {
		"prefix": "SpawnEntity",
		"body": [
			"SpawnEntity()$0"
		],
		"description": "Create an entity at the location of the maker"
	},
	"void SpawnEntityAtEntityOrigin(handle entity)": {
		"prefix": "SpawnEntityAtEntityOrigin",
		"body": [
			"SpawnEntityAtEntityOrigin(${1:handle entity})$0"
		],
		"description": "Create an entity at the location of a specified entity instance"
	},
	"void SpawnEntityAtLocation(Vector origin, Vector orientation)": {
		"prefix": "SpawnEntityAtLocation",
		"body": [
			"SpawnEntityAtLocation(${1:Vector origin}, ${2:Vector orientation})$0"
		],
		"description": "Create an entity at a specified location and orientaton, orientation is Euler angle in degrees (pitch, yaw, roll)"
	},
	"void SpawnEntityAtNamedEntityOrigin(string targetname)": {
		"prefix": "SpawnEntityAtNamedEntityOrigin",
		"body": [
			"SpawnEntityAtNamedEntityOrigin(${1:string targetname})$0"
		],
		"description": "Create an entity at the location of a named entity. If multiple entities have the same name, only the one with the lowest entity index will be targeted."
	},
	"handle SpawnEntityFromTable(string name, handle keyvalues)": {
		"prefix": "SpawnEntityFromTable",
		"body": [
			"SpawnEntityFromTable(${1:string name}, ${2:handle keyvalues})$0"
		],
		"description": "Spawn entity from KeyValues in table - 'name' is entity name, rest are KeyValues for spawn."
	},
	"bool SpawnEntityGroupFromTable(handle groups)": {
		"prefix": "SpawnEntityGroupFromTable",
		"body": [
			"SpawnEntityGroupFromTable(${1:handle groups})$0"
		],
		"description": "Hierarchically spawn an entity group from a set of spawn tables. This computes a spawn order for entities so that parenting is resolved correctly."
	},
	"Sqrt2": {
		"prefix": "Sqrt2",
		"body": [
			"Sqrt2$0"
		],
		"description": "1.41421"
	},
	"Sqrt3": {
		"prefix": "Sqrt3",
		"body": [
			"Sqrt3$0"
		],
		"description": "1.73205"
	},
	"void Stop()": {
		"prefix": "Stop",
		"body": [
			"Stop()$0"
		],
		"description": "Set desired movement speed to stopped"
	},
	"void StopAmbientSoundOn(string soundName, handle entity)": {
		"prefix": "StopAmbientSoundOn",
		"body": [
			"StopAmbientSoundOn(${1:string soundName}, ${2:handle entity})$0"
		],
		"description": "Stop named sound on an entity using configurations similar to ambient_generic."
	},
	"void StopAnimation()": {
		"prefix": "StopAnimation",
		"body": [
			"StopAnimation()$0"
		],
		"description": "Stop the current animation (same as SetPlaybackRate 0.0)"
	},
	"void StopSound(string sound_name)": {
		"prefix": "StopSound",
		"body": [
			"StopSound(${1:string sound_name})$0"
		],
		"description": "Stops a sound on this entity."
	},
	"void StopSoundOn(string soundScript, handle entity)": {
		"prefix": "StopSoundOn",
		"body": [
			"StopSoundOn(${1:string soundScript}, ${2:handle entity})$0"
		],
		"description": "Stop named sound on an entity."
	},
	"void StopTaunt(bool remove_prop)": {
		"prefix": "StopTaunt",
		"body": [
			"StopTaunt(${1:bool remove_prop})$0"
		],
		"description": "Stops current taunt. If remove_prop is true, the taunt prop will be immediately deleted instead of potentially delaying"
	},
	"void StringToFile(string file, string string)": {
		"prefix": "StringToFile",
		"body": [
			"StringToFile(${1:string file}, ${2:string string})$0"
		],
		"description": "Stores a string as a file, located in the game's scriptdata folder."
	},
	"void StudioFrameAdvance()": {
		"prefix": "StudioFrameAdvance",
		"body": [
			"StudioFrameAdvance()$0"
		],
		"description": "Advance animation frame to some time in the future with an automatically calculated interval"
	},
	"void StudioFrameAdvanceManual(float dt)": {
		"prefix": "StudioFrameAdvanceManual",
		"body": [
			"StudioFrameAdvanceManual(${1:float dt})$0"
		],
		"description": "Advance animation frame to some time in the future with a manual interval"
	},
	"TAUNT_BASE_WEAPON": {
		"prefix": "TAUNT_BASE_WEAPON",
		"body": [
			"TAUNT_BASE_WEAPON$0"
		],
		"description": "0"
	},
	"TAUNT_LONG": {
		"prefix": "TAUNT_LONG",
		"body": [
			"TAUNT_LONG$0"
		],
		"description": "3"
	},
	"TAUNT_MISC_ITEM": {
		"prefix": "TAUNT_MISC_ITEM",
		"body": [
			"TAUNT_MISC_ITEM$0"
		],
		"description": "1"
	},
	"TAUNT_SHOW_ITEM": {
		"prefix": "TAUNT_SHOW_ITEM",
		"body": [
			"TAUNT_SHOW_ITEM$0"
		],
		"description": "2"
	},
	"TAUNT_SPECIAL": {
		"prefix": "TAUNT_SPECIAL",
		"body": [
			"TAUNT_SPECIAL$0"
		],
		"description": "4"
	},
	"TEAM_ANY": {
		"prefix": "TEAM_ANY",
		"body": [
			"TEAM_ANY$0"
		],
		"description": "-2"
	},
	"TEAM_INVALID": {
		"prefix": "TEAM_INVALID",
		"body": [
			"TEAM_INVALID$0"
		],
		"description": "-1"
	},
	"TEAM_SPECTATOR": {
		"prefix": "TEAM_SPECTATOR",
		"body": [
			"TEAM_SPECTATOR$0"
		],
		"description": "1"
	},
	"TEAM_UNASSIGNED": {
		"prefix": "TEAM_UNASSIGNED",
		"body": [
			"TEAM_UNASSIGNED$0"
		],
		"description": "0"
	},
	"TELEPORT_TO_HINT": {
		"prefix": "TELEPORT_TO_HINT",
		"body": [
			"TELEPORT_TO_HINT$0"
		],
		"description": "16384"
	},
	"void TFMark()": {
		"prefix": "TFMark",
		"body": [
			"TFMark()$0"
		],
		"description": "Mark this nav area with the current marking scope."
	},
	"TF_BOT_TYPE": {
		"prefix": "TF_BOT_TYPE",
		"body": [
			"TF_BOT_TYPE$0"
		],
		"description": "1337"
	},
	"TF_CLASS_CIVILIAN": {
		"prefix": "TF_CLASS_CIVILIAN",
		"body": [
			"TF_CLASS_CIVILIAN$0"
		],
		"description": "10"
	},
	"TF_CLASS_COUNT_ALL": {
		"prefix": "TF_CLASS_COUNT_ALL",
		"body": [
			"TF_CLASS_COUNT_ALL$0"
		],
		"description": "11"
	},
	"TF_CLASS_DEMOMAN": {
		"prefix": "TF_CLASS_DEMOMAN",
		"body": [
			"TF_CLASS_DEMOMAN$0"
		],
		"description": "4"
	},
	"TF_CLASS_ENGINEER": {
		"prefix": "TF_CLASS_ENGINEER",
		"body": [
			"TF_CLASS_ENGINEER$0"
		],
		"description": "9"
	},
	"TF_CLASS_HEAVYWEAPONS": {
		"prefix": "TF_CLASS_HEAVYWEAPONS",
		"body": [
			"TF_CLASS_HEAVYWEAPONS$0"
		],
		"description": "6"
	},
	"TF_CLASS_MEDIC": {
		"prefix": "TF_CLASS_MEDIC",
		"body": [
			"TF_CLASS_MEDIC$0"
		],
		"description": "5"
	},
	"TF_CLASS_PYRO": {
		"prefix": "TF_CLASS_PYRO",
		"body": [
			"TF_CLASS_PYRO$0"
		],
		"description": "7"
	},
	"TF_CLASS_RANDOM": {
		"prefix": "TF_CLASS_RANDOM",
		"body": [
			"TF_CLASS_RANDOM$0"
		],
		"description": "12"
	},
	"TF_CLASS_SCOUT": {
		"prefix": "TF_CLASS_SCOUT",
		"body": [
			"TF_CLASS_SCOUT$0"
		],
		"description": "1"
	},
	"TF_CLASS_SNIPER": {
		"prefix": "TF_CLASS_SNIPER",
		"body": [
			"TF_CLASS_SNIPER$0"
		],
		"description": "2"
	},
	"TF_CLASS_SOLDIER": {
		"prefix": "TF_CLASS_SOLDIER",
		"body": [
			"TF_CLASS_SOLDIER$0"
		],
		"description": "3"
	},
	"TF_CLASS_SPY": {
		"prefix": "TF_CLASS_SPY",
		"body": [
			"TF_CLASS_SPY$0"
		],
		"description": "8"
	},
	"TF_CLASS_UNDEFINED": {
		"prefix": "TF_CLASS_UNDEFINED",
		"body": [
			"TF_CLASS_UNDEFINED$0"
		],
		"description": "0"
	},
	"TF_COND_AFTERBURN_IMMUNE": {
		"prefix": "TF_COND_AFTERBURN_IMMUNE",
		"body": [
			"TF_COND_AFTERBURN_IMMUNE$0"
		],
		"description": "102"
	},
	"TF_COND_AIMING": {
		"prefix": "TF_COND_AIMING",
		"body": [
			"TF_COND_AIMING$0"
		],
		"description": "0"
	},
	"TF_COND_AIR_CURRENT": {
		"prefix": "TF_COND_AIR_CURRENT",
		"body": [
			"TF_COND_AIR_CURRENT$0"
		],
		"description": "127"
	},
	"TF_COND_BALLOON_HEAD": {
		"prefix": "TF_COND_BALLOON_HEAD",
		"body": [
			"TF_COND_BALLOON_HEAD$0"
		],
		"description": "84"
	},
	"TF_COND_BLASTJUMPING": {
		"prefix": "TF_COND_BLASTJUMPING",
		"body": [
			"TF_COND_BLASTJUMPING$0"
		],
		"description": "81"
	},
	"TF_COND_BLAST_IMMUNE": {
		"prefix": "TF_COND_BLAST_IMMUNE",
		"body": [
			"TF_COND_BLAST_IMMUNE$0"
		],
		"description": "68"
	},
	"TF_COND_BLEEDING": {
		"prefix": "TF_COND_BLEEDING",
		"body": [
			"TF_COND_BLEEDING$0"
		],
		"description": "25"
	},
	"TF_COND_BULLET_IMMUNE": {
		"prefix": "TF_COND_BULLET_IMMUNE",
		"body": [
			"TF_COND_BULLET_IMMUNE$0"
		],
		"description": "67"
	},
	"TF_COND_BURNING": {
		"prefix": "TF_COND_BURNING",
		"body": [
			"TF_COND_BURNING$0"
		],
		"description": "22"
	},
	"TF_COND_BURNING_PYRO": {
		"prefix": "TF_COND_BURNING_PYRO",
		"body": [
			"TF_COND_BURNING_PYRO$0"
		],
		"description": "124"
	},
	"TF_COND_CANNOT_SWITCH_FROM_MELEE": {
		"prefix": "TF_COND_CANNOT_SWITCH_FROM_MELEE",
		"body": [
			"TF_COND_CANNOT_SWITCH_FROM_MELEE$0"
		],
		"description": "41"
	},
	"TF_COND_COMPETITIVE_LOSER": {
		"prefix": "TF_COND_COMPETITIVE_LOSER",
		"body": [
			"TF_COND_COMPETITIVE_LOSER$0"
		],
		"description": "117"
	},
	"TF_COND_COMPETITIVE_WINNER": {
		"prefix": "TF_COND_COMPETITIVE_WINNER",
		"body": [
			"TF_COND_COMPETITIVE_WINNER$0"
		],
		"description": "116"
	},
	"TF_COND_CRITBOOSTED": {
		"prefix": "TF_COND_CRITBOOSTED",
		"body": [
			"TF_COND_CRITBOOSTED$0"
		],
		"description": "11"
	},
	"TF_COND_CRITBOOSTED_BONUS_TIME": {
		"prefix": "TF_COND_CRITBOOSTED_BONUS_TIME",
		"body": [
			"TF_COND_CRITBOOSTED_BONUS_TIME$0"
		],
		"description": "38"
	},
	"TF_COND_CRITBOOSTED_CARD_EFFECT": {
		"prefix": "TF_COND_CRITBOOSTED_CARD_EFFECT",
		"body": [
			"TF_COND_CRITBOOSTED_CARD_EFFECT$0"
		],
		"description": "56"
	},
	"TF_COND_CRITBOOSTED_CTF_CAPTURE": {
		"prefix": "TF_COND_CRITBOOSTED_CTF_CAPTURE",
		"body": [
			"TF_COND_CRITBOOSTED_CTF_CAPTURE$0"
		],
		"description": "39"
	},
	"TF_COND_CRITBOOSTED_DEMO_CHARGE": {
		"prefix": "TF_COND_CRITBOOSTED_DEMO_CHARGE",
		"body": [
			"TF_COND_CRITBOOSTED_DEMO_CHARGE$0"
		],
		"description": "35"
	},
	"TF_COND_CRITBOOSTED_FIRST_BLOOD": {
		"prefix": "TF_COND_CRITBOOSTED_FIRST_BLOOD",
		"body": [
			"TF_COND_CRITBOOSTED_FIRST_BLOOD$0"
		],
		"description": "37"
	},
	"TF_COND_CRITBOOSTED_ON_KILL": {
		"prefix": "TF_COND_CRITBOOSTED_ON_KILL",
		"body": [
			"TF_COND_CRITBOOSTED_ON_KILL$0"
		],
		"description": "40"
	},
	"TF_COND_CRITBOOSTED_PUMPKIN": {
		"prefix": "TF_COND_CRITBOOSTED_PUMPKIN",
		"body": [
			"TF_COND_CRITBOOSTED_PUMPKIN$0"
		],
		"description": "33"
	},
	"TF_COND_CRITBOOSTED_RAGE_BUFF": {
		"prefix": "TF_COND_CRITBOOSTED_RAGE_BUFF",
		"body": [
			"TF_COND_CRITBOOSTED_RAGE_BUFF$0"
		],
		"description": "44"
	},
	"TF_COND_CRITBOOSTED_RUNE_TEMP": {
		"prefix": "TF_COND_CRITBOOSTED_RUNE_TEMP",
		"body": [
			"TF_COND_CRITBOOSTED_RUNE_TEMP$0"
		],
		"description": "105"
	},
	"TF_COND_CRITBOOSTED_USER_BUFF": {
		"prefix": "TF_COND_CRITBOOSTED_USER_BUFF",
		"body": [
			"TF_COND_CRITBOOSTED_USER_BUFF$0"
		],
		"description": "34"
	},
	"TF_COND_DEFENSEBUFF": {
		"prefix": "TF_COND_DEFENSEBUFF",
		"body": [
			"TF_COND_DEFENSEBUFF$0"
		],
		"description": "26"
	},
	"TF_COND_DEFENSEBUFF_HIGH": {
		"prefix": "TF_COND_DEFENSEBUFF_HIGH",
		"body": [
			"TF_COND_DEFENSEBUFF_HIGH$0"
		],
		"description": "45"
	},
	"TF_COND_DEFENSEBUFF_NO_CRIT_BLOCK": {
		"prefix": "TF_COND_DEFENSEBUFF_NO_CRIT_BLOCK",
		"body": [
			"TF_COND_DEFENSEBUFF_NO_CRIT_BLOCK$0"
		],
		"description": "42"
	},
	"TF_COND_DEMO_BUFF": {
		"prefix": "TF_COND_DEMO_BUFF",
		"body": [
			"TF_COND_DEMO_BUFF$0"
		],
		"description": "18"
	},
	"TF_COND_DISGUISED": {
		"prefix": "TF_COND_DISGUISED",
		"body": [
			"TF_COND_DISGUISED$0"
		],
		"description": "3"
	},
	"TF_COND_DISGUISED_AS_DISPENSER": {
		"prefix": "TF_COND_DISGUISED_AS_DISPENSER",
		"body": [
			"TF_COND_DISGUISED_AS_DISPENSER$0"
		],
		"description": "49"
	},
	"TF_COND_DISGUISE_WEARINGOFF": {
		"prefix": "TF_COND_DISGUISE_WEARINGOFF",
		"body": [
			"TF_COND_DISGUISE_WEARINGOFF$0"
		],
		"description": "47"
	},
	"TF_COND_DISGUISING": {
		"prefix": "TF_COND_DISGUISING",
		"body": [
			"TF_COND_DISGUISING$0"
		],
		"description": "2"
	},
	"TF_COND_DONOTUSE_0": {
		"prefix": "TF_COND_DONOTUSE_0",
		"body": [
			"TF_COND_DONOTUSE_0$0"
		],
		"description": "89"
	},
	"TF_COND_ENERGY_BUFF": {
		"prefix": "TF_COND_ENERGY_BUFF",
		"body": [
			"TF_COND_ENERGY_BUFF$0"
		],
		"description": "19"
	},
	"TF_COND_FEIGN_DEATH": {
		"prefix": "TF_COND_FEIGN_DEATH",
		"body": [
			"TF_COND_FEIGN_DEATH$0"
		],
		"description": "13"
	},
	"TF_COND_FIRE_IMMUNE": {
		"prefix": "TF_COND_FIRE_IMMUNE",
		"body": [
			"TF_COND_FIRE_IMMUNE$0"
		],
		"description": "69"
	},
	"TF_COND_FREEZE_INPUT": {
		"prefix": "TF_COND_FREEZE_INPUT",
		"body": [
			"TF_COND_FREEZE_INPUT$0"
		],
		"description": "87"
	},
	"TF_COND_GAS": {
		"prefix": "TF_COND_GAS",
		"body": [
			"TF_COND_GAS$0"
		],
		"description": "123"
	},
	"TF_COND_GRAPPLED_BY_PLAYER": {
		"prefix": "TF_COND_GRAPPLED_BY_PLAYER",
		"body": [
			"TF_COND_GRAPPLED_BY_PLAYER$0"
		],
		"description": "121"
	},
	"TF_COND_GRAPPLED_TO_PLAYER": {
		"prefix": "TF_COND_GRAPPLED_TO_PLAYER",
		"body": [
			"TF_COND_GRAPPLED_TO_PLAYER$0"
		],
		"description": "120"
	},
	"TF_COND_GRAPPLINGHOOK": {
		"prefix": "TF_COND_GRAPPLINGHOOK",
		"body": [
			"TF_COND_GRAPPLINGHOOK$0"
		],
		"description": "98"
	},
	"TF_COND_GRAPPLINGHOOK_BLEEDING": {
		"prefix": "TF_COND_GRAPPLINGHOOK_BLEEDING",
		"body": [
			"TF_COND_GRAPPLINGHOOK_BLEEDING$0"
		],
		"description": "101"
	},
	"TF_COND_GRAPPLINGHOOK_LATCHED": {
		"prefix": "TF_COND_GRAPPLINGHOOK_LATCHED",
		"body": [
			"TF_COND_GRAPPLINGHOOK_LATCHED$0"
		],
		"description": "100"
	},
	"TF_COND_GRAPPLINGHOOK_SAFEFALL": {
		"prefix": "TF_COND_GRAPPLINGHOOK_SAFEFALL",
		"body": [
			"TF_COND_GRAPPLINGHOOK_SAFEFALL$0"
		],
		"description": "99"
	},
	"TF_COND_HALLOWEEN_BOMB_HEAD": {
		"prefix": "TF_COND_HALLOWEEN_BOMB_HEAD",
		"body": [
			"TF_COND_HALLOWEEN_BOMB_HEAD$0"
		],
		"description": "53"
	},
	"TF_COND_HALLOWEEN_GHOST_MODE": {
		"prefix": "TF_COND_HALLOWEEN_GHOST_MODE",
		"body": [
			"TF_COND_HALLOWEEN_GHOST_MODE$0"
		],
		"description": "77"
	},
	"TF_COND_HALLOWEEN_GIANT": {
		"prefix": "TF_COND_HALLOWEEN_GIANT",
		"body": [
			"TF_COND_HALLOWEEN_GIANT$0"
		],
		"description": "74"
	},
	"TF_COND_HALLOWEEN_HELL_HEAL": {
		"prefix": "TF_COND_HALLOWEEN_HELL_HEAL",
		"body": [
			"TF_COND_HALLOWEEN_HELL_HEAL$0"
		],
		"description": "128"
	},
	"TF_COND_HALLOWEEN_IN_HELL": {
		"prefix": "TF_COND_HALLOWEEN_IN_HELL",
		"body": [
			"TF_COND_HALLOWEEN_IN_HELL$0"
		],
		"description": "76"
	},
	"TF_COND_HALLOWEEN_KART": {
		"prefix": "TF_COND_HALLOWEEN_KART",
		"body": [
			"TF_COND_HALLOWEEN_KART$0"
		],
		"description": "82"
	},
	"TF_COND_HALLOWEEN_KART_CAGE": {
		"prefix": "TF_COND_HALLOWEEN_KART_CAGE",
		"body": [
			"TF_COND_HALLOWEEN_KART_CAGE$0"
		],
		"description": "88"
	},
	"TF_COND_HALLOWEEN_KART_DASH": {
		"prefix": "TF_COND_HALLOWEEN_KART_DASH",
		"body": [
			"TF_COND_HALLOWEEN_KART_DASH$0"
		],
		"description": "83"
	},
	"TF_COND_HALLOWEEN_QUICK_HEAL": {
		"prefix": "TF_COND_HALLOWEEN_QUICK_HEAL",
		"body": [
			"TF_COND_HALLOWEEN_QUICK_HEAL$0"
		],
		"description": "73"
	},
	"TF_COND_HALLOWEEN_SPEED_BOOST": {
		"prefix": "TF_COND_HALLOWEEN_SPEED_BOOST",
		"body": [
			"TF_COND_HALLOWEEN_SPEED_BOOST$0"
		],
		"description": "72"
	},
	"TF_COND_HALLOWEEN_THRILLER": {
		"prefix": "TF_COND_HALLOWEEN_THRILLER",
		"body": [
			"TF_COND_HALLOWEEN_THRILLER$0"
		],
		"description": "54"
	},
	"TF_COND_HALLOWEEN_TINY": {
		"prefix": "TF_COND_HALLOWEEN_TINY",
		"body": [
			"TF_COND_HALLOWEEN_TINY$0"
		],
		"description": "75"
	},
	"TF_COND_HEALING_DEBUFF": {
		"prefix": "TF_COND_HEALING_DEBUFF",
		"body": [
			"TF_COND_HEALING_DEBUFF$0"
		],
		"description": "118"
	},
	"TF_COND_HEALTH_BUFF": {
		"prefix": "TF_COND_HEALTH_BUFF",
		"body": [
			"TF_COND_HEALTH_BUFF$0"
		],
		"description": "21"
	},
	"TF_COND_HEALTH_OVERHEALED": {
		"prefix": "TF_COND_HEALTH_OVERHEALED",
		"body": [
			"TF_COND_HEALTH_OVERHEALED$0"
		],
		"description": "23"
	},
	"TF_COND_IMMUNE_TO_PUSHBACK": {
		"prefix": "TF_COND_IMMUNE_TO_PUSHBACK",
		"body": [
			"TF_COND_IMMUNE_TO_PUSHBACK$0"
		],
		"description": "130"
	},
	"TF_COND_INVALID": {
		"prefix": "TF_COND_INVALID",
		"body": [
			"TF_COND_INVALID$0"
		],
		"description": "-1"
	},
	"TF_COND_INVULNERABLE": {
		"prefix": "TF_COND_INVULNERABLE",
		"body": [
			"TF_COND_INVULNERABLE$0"
		],
		"description": "5"
	},
	"TF_COND_INVULNERABLE_CARD_EFFECT": {
		"prefix": "TF_COND_INVULNERABLE_CARD_EFFECT",
		"body": [
			"TF_COND_INVULNERABLE_CARD_EFFECT$0"
		],
		"description": "57"
	},
	"TF_COND_INVULNERABLE_HIDE_UNLESS_DAMAGED": {
		"prefix": "TF_COND_INVULNERABLE_HIDE_UNLESS_DAMAGED",
		"body": [
			"TF_COND_INVULNERABLE_HIDE_UNLESS_DAMAGED$0"
		],
		"description": "51"
	},
	"TF_COND_INVULNERABLE_USER_BUFF": {
		"prefix": "TF_COND_INVULNERABLE_USER_BUFF",
		"body": [
			"TF_COND_INVULNERABLE_USER_BUFF$0"
		],
		"description": "52"
	},
	"TF_COND_INVULNERABLE_WEARINGOFF": {
		"prefix": "TF_COND_INVULNERABLE_WEARINGOFF",
		"body": [
			"TF_COND_INVULNERABLE_WEARINGOFF$0"
		],
		"description": "8"
	},
	"TF_COND_KING_BUFFED": {
		"prefix": "TF_COND_KING_BUFFED",
		"body": [
			"TF_COND_KING_BUFFED$0"
		],
		"description": "113"
	},
	"TF_COND_KNOCKED_INTO_AIR": {
		"prefix": "TF_COND_KNOCKED_INTO_AIR",
		"body": [
			"TF_COND_KNOCKED_INTO_AIR$0"
		],
		"description": "115"
	},
	"TF_COND_LOST_FOOTING": {
		"prefix": "TF_COND_LOST_FOOTING",
		"body": [
			"TF_COND_LOST_FOOTING$0"
		],
		"description": "126"
	},
	"TF_COND_MAD_MILK": {
		"prefix": "TF_COND_MAD_MILK",
		"body": [
			"TF_COND_MAD_MILK$0"
		],
		"description": "27"
	},
	"TF_COND_MARKEDFORDEATH": {
		"prefix": "TF_COND_MARKEDFORDEATH",
		"body": [
			"TF_COND_MARKEDFORDEATH$0"
		],
		"description": "30"
	},
	"TF_COND_MARKEDFORDEATH_SILENT": {
		"prefix": "TF_COND_MARKEDFORDEATH_SILENT",
		"body": [
			"TF_COND_MARKEDFORDEATH_SILENT$0"
		],
		"description": "48"
	},
	"TF_COND_MEDIGUN_DEBUFF": {
		"prefix": "TF_COND_MEDIGUN_DEBUFF",
		"body": [
			"TF_COND_MEDIGUN_DEBUFF$0"
		],
		"description": "65"
	},
	"TF_COND_MEDIGUN_SMALL_BLAST_RESIST": {
		"prefix": "TF_COND_MEDIGUN_SMALL_BLAST_RESIST",
		"body": [
			"TF_COND_MEDIGUN_SMALL_BLAST_RESIST$0"
		],
		"description": "62"
	},
	"TF_COND_MEDIGUN_SMALL_BULLET_RESIST": {
		"prefix": "TF_COND_MEDIGUN_SMALL_BULLET_RESIST",
		"body": [
			"TF_COND_MEDIGUN_SMALL_BULLET_RESIST$0"
		],
		"description": "61"
	},
	"TF_COND_MEDIGUN_SMALL_FIRE_RESIST": {
		"prefix": "TF_COND_MEDIGUN_SMALL_FIRE_RESIST",
		"body": [
			"TF_COND_MEDIGUN_SMALL_FIRE_RESIST$0"
		],
		"description": "63"
	},
	"TF_COND_MEDIGUN_UBER_BLAST_RESIST": {
		"prefix": "TF_COND_MEDIGUN_UBER_BLAST_RESIST",
		"body": [
			"TF_COND_MEDIGUN_UBER_BLAST_RESIST$0"
		],
		"description": "59"
	},
	"TF_COND_MEDIGUN_UBER_BULLET_RESIST": {
		"prefix": "TF_COND_MEDIGUN_UBER_BULLET_RESIST",
		"body": [
			"TF_COND_MEDIGUN_UBER_BULLET_RESIST$0"
		],
		"description": "58"
	},
	"TF_COND_MEDIGUN_UBER_FIRE_RESIST": {
		"prefix": "TF_COND_MEDIGUN_UBER_FIRE_RESIST",
		"body": [
			"TF_COND_MEDIGUN_UBER_FIRE_RESIST$0"
		],
		"description": "60"
	},
	"TF_COND_MEGAHEAL": {
		"prefix": "TF_COND_MEGAHEAL",
		"body": [
			"TF_COND_MEGAHEAL$0"
		],
		"description": "28"
	},
	"TF_COND_MELEE_ONLY": {
		"prefix": "TF_COND_MELEE_ONLY",
		"body": [
			"TF_COND_MELEE_ONLY$0"
		],
		"description": "85"
	},
	"TF_COND_MINICRITBOOSTED_ON_KILL": {
		"prefix": "TF_COND_MINICRITBOOSTED_ON_KILL",
		"body": [
			"TF_COND_MINICRITBOOSTED_ON_KILL$0"
		],
		"description": "78"
	},
	"TF_COND_MVM_BOT_STUN_RADIOWAVE": {
		"prefix": "TF_COND_MVM_BOT_STUN_RADIOWAVE",
		"body": [
			"TF_COND_MVM_BOT_STUN_RADIOWAVE$0"
		],
		"description": "71"
	},
	"TF_COND_NOHEALINGDAMAGEBUFF": {
		"prefix": "TF_COND_NOHEALINGDAMAGEBUFF",
		"body": [
			"TF_COND_NOHEALINGDAMAGEBUFF$0"
		],
		"description": "31"
	},
	"TF_COND_OBSCURED_SMOKE": {
		"prefix": "TF_COND_OBSCURED_SMOKE",
		"body": [
			"TF_COND_OBSCURED_SMOKE$0"
		],
		"description": "79"
	},
	"TF_COND_OFFENSEBUFF": {
		"prefix": "TF_COND_OFFENSEBUFF",
		"body": [
			"TF_COND_OFFENSEBUFF$0"
		],
		"description": "16"
	},
	"TF_COND_PARACHUTE_ACTIVE": {
		"prefix": "TF_COND_PARACHUTE_ACTIVE",
		"body": [
			"TF_COND_PARACHUTE_ACTIVE$0"
		],
		"description": "80"
	},
	"TF_COND_PARACHUTE_DEPLOYED": {
		"prefix": "TF_COND_PARACHUTE_DEPLOYED",
		"body": [
			"TF_COND_PARACHUTE_DEPLOYED$0"
		],
		"description": "122"
	},
	"TF_COND_PASSTIME_INTERCEPTION": {
		"prefix": "TF_COND_PASSTIME_INTERCEPTION",
		"body": [
			"TF_COND_PASSTIME_INTERCEPTION$0"
		],
		"description": "106"
	},
	"TF_COND_PASSTIME_PENALTY_DEBUFF": {
		"prefix": "TF_COND_PASSTIME_PENALTY_DEBUFF",
		"body": [
			"TF_COND_PASSTIME_PENALTY_DEBUFF$0"
		],
		"description": "119"
	},
	"TF_COND_PHASE": {
		"prefix": "TF_COND_PHASE",
		"body": [
			"TF_COND_PHASE$0"
		],
		"description": "14"
	},
	"TF_COND_PLAGUE": {
		"prefix": "TF_COND_PLAGUE",
		"body": [
			"TF_COND_PLAGUE$0"
		],
		"description": "112"
	},
	"TF_COND_POWERUPMODE_DOMINANT": {
		"prefix": "TF_COND_POWERUPMODE_DOMINANT",
		"body": [
			"TF_COND_POWERUPMODE_DOMINANT$0"
		],
		"description": "129"
	},
	"TF_COND_PREVENT_DEATH": {
		"prefix": "TF_COND_PREVENT_DEATH",
		"body": [
			"TF_COND_PREVENT_DEATH$0"
		],
		"description": "70"
	},
	"TF_COND_PURGATORY": {
		"prefix": "TF_COND_PURGATORY",
		"body": [
			"TF_COND_PURGATORY$0"
		],
		"description": "108"
	},
	"TF_COND_RADIUSHEAL": {
		"prefix": "TF_COND_RADIUSHEAL",
		"body": [
			"TF_COND_RADIUSHEAL$0"
		],
		"description": "20"
	},
	"TF_COND_RADIUSHEAL_ON_DAMAGE": {
		"prefix": "TF_COND_RADIUSHEAL_ON_DAMAGE",
		"body": [
			"TF_COND_RADIUSHEAL_ON_DAMAGE$0"
		],
		"description": "55"
	},
	"TF_COND_REGENONDAMAGEBUFF": {
		"prefix": "TF_COND_REGENONDAMAGEBUFF",
		"body": [
			"TF_COND_REGENONDAMAGEBUFF$0"
		],
		"description": "29"
	},
	"TF_COND_REPROGRAMMED": {
		"prefix": "TF_COND_REPROGRAMMED",
		"body": [
			"TF_COND_REPROGRAMMED$0"
		],
		"description": "43"
	},
	"TF_COND_ROCKETPACK": {
		"prefix": "TF_COND_ROCKETPACK",
		"body": [
			"TF_COND_ROCKETPACK$0"
		],
		"description": "125"
	},
	"TF_COND_RUNE_AGILITY": {
		"prefix": "TF_COND_RUNE_AGILITY",
		"body": [
			"TF_COND_RUNE_AGILITY$0"
		],
		"description": "97"
	},
	"TF_COND_RUNE_HASTE": {
		"prefix": "TF_COND_RUNE_HASTE",
		"body": [
			"TF_COND_RUNE_HASTE$0"
		],
		"description": "91"
	},
	"TF_COND_RUNE_IMBALANCE": {
		"prefix": "TF_COND_RUNE_IMBALANCE",
		"body": [
			"TF_COND_RUNE_IMBALANCE$0"
		],
		"description": "104"
	},
	"TF_COND_RUNE_KING": {
		"prefix": "TF_COND_RUNE_KING",
		"body": [
			"TF_COND_RUNE_KING$0"
		],
		"description": "109"
	},
	"TF_COND_RUNE_KNOCKOUT": {
		"prefix": "TF_COND_RUNE_KNOCKOUT",
		"body": [
			"TF_COND_RUNE_KNOCKOUT$0"
		],
		"description": "103"
	},
	"TF_COND_RUNE_PLAGUE": {
		"prefix": "TF_COND_RUNE_PLAGUE",
		"body": [
			"TF_COND_RUNE_PLAGUE$0"
		],
		"description": "110"
	},
	"TF_COND_RUNE_PRECISION": {
		"prefix": "TF_COND_RUNE_PRECISION",
		"body": [
			"TF_COND_RUNE_PRECISION$0"
		],
		"description": "96"
	},
	"TF_COND_RUNE_REFLECT": {
		"prefix": "TF_COND_RUNE_REFLECT",
		"body": [
			"TF_COND_RUNE_REFLECT$0"
		],
		"description": "95"
	},
	"TF_COND_RUNE_REGEN": {
		"prefix": "TF_COND_RUNE_REGEN",
		"body": [
			"TF_COND_RUNE_REGEN$0"
		],
		"description": "92"
	},
	"TF_COND_RUNE_RESIST": {
		"prefix": "TF_COND_RUNE_RESIST",
		"body": [
			"TF_COND_RUNE_RESIST$0"
		],
		"description": "93"
	},
	"TF_COND_RUNE_STRENGTH": {
		"prefix": "TF_COND_RUNE_STRENGTH",
		"body": [
			"TF_COND_RUNE_STRENGTH$0"
		],
		"description": "90"
	},
	"TF_COND_RUNE_SUPERNOVA": {
		"prefix": "TF_COND_RUNE_SUPERNOVA",
		"body": [
			"TF_COND_RUNE_SUPERNOVA$0"
		],
		"description": "111"
	},
	"TF_COND_RUNE_VAMPIRE": {
		"prefix": "TF_COND_RUNE_VAMPIRE",
		"body": [
			"TF_COND_RUNE_VAMPIRE$0"
		],
		"description": "94"
	},
	"TF_COND_SAPPED": {
		"prefix": "TF_COND_SAPPED",
		"body": [
			"TF_COND_SAPPED$0"
		],
		"description": "50"
	},
	"TF_COND_SELECTED_TO_TELEPORT": {
		"prefix": "TF_COND_SELECTED_TO_TELEPORT",
		"body": [
			"TF_COND_SELECTED_TO_TELEPORT$0"
		],
		"description": "10"
	},
	"TF_COND_SHIELD_CHARGE": {
		"prefix": "TF_COND_SHIELD_CHARGE",
		"body": [
			"TF_COND_SHIELD_CHARGE$0"
		],
		"description": "17"
	},
	"TF_COND_SNIPERCHARGE_RAGE_BUFF": {
		"prefix": "TF_COND_SNIPERCHARGE_RAGE_BUFF",
		"body": [
			"TF_COND_SNIPERCHARGE_RAGE_BUFF$0"
		],
		"description": "46"
	},
	"TF_COND_SODAPOPPER_HYPE": {
		"prefix": "TF_COND_SODAPOPPER_HYPE",
		"body": [
			"TF_COND_SODAPOPPER_HYPE$0"
		],
		"description": "36"
	},
	"TF_COND_SPEED_BOOST": {
		"prefix": "TF_COND_SPEED_BOOST",
		"body": [
			"TF_COND_SPEED_BOOST$0"
		],
		"description": "32"
	},
	"TF_COND_STEALTHED": {
		"prefix": "TF_COND_STEALTHED",
		"body": [
			"TF_COND_STEALTHED$0"
		],
		"description": "4"
	},
	"TF_COND_STEALTHED_BLINK": {
		"prefix": "TF_COND_STEALTHED_BLINK",
		"body": [
			"TF_COND_STEALTHED_BLINK$0"
		],
		"description": "9"
	},
	"TF_COND_STEALTHED_USER_BUFF": {
		"prefix": "TF_COND_STEALTHED_USER_BUFF",
		"body": [
			"TF_COND_STEALTHED_USER_BUFF$0"
		],
		"description": "64"
	},
	"TF_COND_STEALTHED_USER_BUFF_FADING": {
		"prefix": "TF_COND_STEALTHED_USER_BUFF_FADING",
		"body": [
			"TF_COND_STEALTHED_USER_BUFF_FADING$0"
		],
		"description": "66"
	},
	"TF_COND_STUNNED": {
		"prefix": "TF_COND_STUNNED",
		"body": [
			"TF_COND_STUNNED$0"
		],
		"description": "15"
	},
	"TF_COND_SWIMMING_CURSE": {
		"prefix": "TF_COND_SWIMMING_CURSE",
		"body": [
			"TF_COND_SWIMMING_CURSE$0"
		],
		"description": "86"
	},
	"TF_COND_SWIMMING_NO_EFFECTS": {
		"prefix": "TF_COND_SWIMMING_NO_EFFECTS",
		"body": [
			"TF_COND_SWIMMING_NO_EFFECTS$0"
		],
		"description": "107"
	},
	"TF_COND_TAUNTING": {
		"prefix": "TF_COND_TAUNTING",
		"body": [
			"TF_COND_TAUNTING$0"
		],
		"description": "7"
	},
	"TF_COND_TEAM_GLOWS": {
		"prefix": "TF_COND_TEAM_GLOWS",
		"body": [
			"TF_COND_TEAM_GLOWS$0"
		],
		"description": "114"
	},
	"TF_COND_TELEPORTED": {
		"prefix": "TF_COND_TELEPORTED",
		"body": [
			"TF_COND_TELEPORTED$0"
		],
		"description": "6"
	},
	"TF_COND_TMPDAMAGEBONUS": {
		"prefix": "TF_COND_TMPDAMAGEBONUS",
		"body": [
			"TF_COND_TMPDAMAGEBONUS$0"
		],
		"description": "12"
	},
	"TF_COND_URINE": {
		"prefix": "TF_COND_URINE",
		"body": [
			"TF_COND_URINE$0"
		],
		"description": "24"
	},
	"TF_COND_ZOOMED": {
		"prefix": "TF_COND_ZOOMED",
		"body": [
			"TF_COND_ZOOMED$0"
		],
		"description": "1"
	},
	"TF_DMG_CUSTOM_AEGIS_ROUND": {
		"prefix": "TF_DMG_CUSTOM_AEGIS_ROUND",
		"body": [
			"TF_DMG_CUSTOM_AEGIS_ROUND$0"
		],
		"description": "43"
	},
	"TF_DMG_CUSTOM_AIR_STICKY_BURST": {
		"prefix": "TF_DMG_CUSTOM_AIR_STICKY_BURST",
		"body": [
			"TF_DMG_CUSTOM_AIR_STICKY_BURST$0"
		],
		"description": "25"
	},
	"TF_DMG_CUSTOM_AXTINGUISHER_BOOSTED": {
		"prefix": "TF_DMG_CUSTOM_AXTINGUISHER_BOOSTED",
		"body": [
			"TF_DMG_CUSTOM_AXTINGUISHER_BOOSTED$0"
		],
		"description": "83"
	},
	"TF_DMG_CUSTOM_BACKSTAB": {
		"prefix": "TF_DMG_CUSTOM_BACKSTAB",
		"body": [
			"TF_DMG_CUSTOM_BACKSTAB$0"
		],
		"description": "2"
	},
	"TF_DMG_CUSTOM_BASEBALL": {
		"prefix": "TF_DMG_CUSTOM_BASEBALL",
		"body": [
			"TF_DMG_CUSTOM_BASEBALL$0"
		],
		"description": "22"
	},
	"TF_DMG_CUSTOM_BLEEDING": {
		"prefix": "TF_DMG_CUSTOM_BLEEDING",
		"body": [
			"TF_DMG_CUSTOM_BLEEDING$0"
		],
		"description": "34"
	},
	"TF_DMG_CUSTOM_BOOTS_STOMP": {
		"prefix": "TF_DMG_CUSTOM_BOOTS_STOMP",
		"body": [
			"TF_DMG_CUSTOM_BOOTS_STOMP$0"
		],
		"description": "45"
	},
	"TF_DMG_CUSTOM_BURNING": {
		"prefix": "TF_DMG_CUSTOM_BURNING",
		"body": [
			"TF_DMG_CUSTOM_BURNING$0"
		],
		"description": "3"
	},
	"TF_DMG_CUSTOM_BURNING_ARROW": {
		"prefix": "TF_DMG_CUSTOM_BURNING_ARROW",
		"body": [
			"TF_DMG_CUSTOM_BURNING_ARROW$0"
		],
		"description": "17"
	},
	"TF_DMG_CUSTOM_BURNING_FLARE": {
		"prefix": "TF_DMG_CUSTOM_BURNING_FLARE",
		"body": [
			"TF_DMG_CUSTOM_BURNING_FLARE$0"
		],
		"description": "8"
	},
	"TF_DMG_CUSTOM_CANNONBALL_PUSH": {
		"prefix": "TF_DMG_CUSTOM_CANNONBALL_PUSH",
		"body": [
			"TF_DMG_CUSTOM_CANNONBALL_PUSH$0"
		],
		"description": "61"
	},
	"TF_DMG_CUSTOM_CARRIED_BUILDING": {
		"prefix": "TF_DMG_CUSTOM_CARRIED_BUILDING",
		"body": [
			"TF_DMG_CUSTOM_CARRIED_BUILDING$0"
		],
		"description": "36"
	},
	"TF_DMG_CUSTOM_CHARGE_IMPACT": {
		"prefix": "TF_DMG_CUSTOM_CHARGE_IMPACT",
		"body": [
			"TF_DMG_CUSTOM_CHARGE_IMPACT$0"
		],
		"description": "23"
	},
	"TF_DMG_CUSTOM_CLEAVER": {
		"prefix": "TF_DMG_CUSTOM_CLEAVER",
		"body": [
			"TF_DMG_CUSTOM_CLEAVER$0"
		],
		"description": "54"
	},
	"TF_DMG_CUSTOM_CLEAVER_CRIT": {
		"prefix": "TF_DMG_CUSTOM_CLEAVER_CRIT",
		"body": [
			"TF_DMG_CUSTOM_CLEAVER_CRIT$0"
		],
		"description": "55"
	},
	"TF_DMG_CUSTOM_COMBO_PUNCH": {
		"prefix": "TF_DMG_CUSTOM_COMBO_PUNCH",
		"body": [
			"TF_DMG_CUSTOM_COMBO_PUNCH$0"
		],
		"description": "37"
	},
	"TF_DMG_CUSTOM_CROC": {
		"prefix": "TF_DMG_CUSTOM_CROC",
		"body": [
			"TF_DMG_CUSTOM_CROC$0"
		],
		"description": "81"
	},
	"TF_DMG_CUSTOM_DECAPITATION": {
		"prefix": "TF_DMG_CUSTOM_DECAPITATION",
		"body": [
			"TF_DMG_CUSTOM_DECAPITATION$0"
		],
		"description": "20"
	},
	"TF_DMG_CUSTOM_DECAPITATION_BOSS": {
		"prefix": "TF_DMG_CUSTOM_DECAPITATION_BOSS",
		"body": [
			"TF_DMG_CUSTOM_DECAPITATION_BOSS$0"
		],
		"description": "41"
	},
	"TF_DMG_CUSTOM_DEFENSIVE_STICKY": {
		"prefix": "TF_DMG_CUSTOM_DEFENSIVE_STICKY",
		"body": [
			"TF_DMG_CUSTOM_DEFENSIVE_STICKY$0"
		],
		"description": "26"
	},
	"TF_DMG_CUSTOM_DRAGONS_FURY_BONUS_BURNING": {
		"prefix": "TF_DMG_CUSTOM_DRAGONS_FURY_BONUS_BURNING",
		"body": [
			"TF_DMG_CUSTOM_DRAGONS_FURY_BONUS_BURNING$0"
		],
		"description": "79"
	},
	"TF_DMG_CUSTOM_DRAGONS_FURY_IGNITE": {
		"prefix": "TF_DMG_CUSTOM_DRAGONS_FURY_IGNITE",
		"body": [
			"TF_DMG_CUSTOM_DRAGONS_FURY_IGNITE$0"
		],
		"description": "78"
	},
	"TF_DMG_CUSTOM_END": {
		"prefix": "TF_DMG_CUSTOM_END",
		"body": [
			"TF_DMG_CUSTOM_END$0"
		],
		"description": "84"
	},
	"TF_DMG_CUSTOM_EYEBALL_ROCKET": {
		"prefix": "TF_DMG_CUSTOM_EYEBALL_ROCKET",
		"body": [
			"TF_DMG_CUSTOM_EYEBALL_ROCKET$0"
		],
		"description": "50"
	},
	"TF_DMG_CUSTOM_FISH_KILL": {
		"prefix": "TF_DMG_CUSTOM_FISH_KILL",
		"body": [
			"TF_DMG_CUSTOM_FISH_KILL$0"
		],
		"description": "39"
	},
	"TF_DMG_CUSTOM_FLARE_EXPLOSION": {
		"prefix": "TF_DMG_CUSTOM_FLARE_EXPLOSION",
		"body": [
			"TF_DMG_CUSTOM_FLARE_EXPLOSION$0"
		],
		"description": "44"
	},
	"TF_DMG_CUSTOM_FLARE_PELLET": {
		"prefix": "TF_DMG_CUSTOM_FLARE_PELLET",
		"body": [
			"TF_DMG_CUSTOM_FLARE_PELLET$0"
		],
		"description": "53"
	},
	"TF_DMG_CUSTOM_FLYINGBURN": {
		"prefix": "TF_DMG_CUSTOM_FLYINGBURN",
		"body": [
			"TF_DMG_CUSTOM_FLYINGBURN$0"
		],
		"description": "18"
	},
	"TF_DMG_CUSTOM_GIANT_HAMMER": {
		"prefix": "TF_DMG_CUSTOM_GIANT_HAMMER",
		"body": [
			"TF_DMG_CUSTOM_GIANT_HAMMER$0"
		],
		"description": "76"
	},
	"TF_DMG_CUSTOM_GOLD_WRENCH": {
		"prefix": "TF_DMG_CUSTOM_GOLD_WRENCH",
		"body": [
			"TF_DMG_CUSTOM_GOLD_WRENCH$0"
		],
		"description": "35"
	},
	"TF_DMG_CUSTOM_HEADSHOT": {
		"prefix": "TF_DMG_CUSTOM_HEADSHOT",
		"body": [
			"TF_DMG_CUSTOM_HEADSHOT$0"
		],
		"description": "1"
	},
	"TF_DMG_CUSTOM_HEADSHOT_DECAPITATION": {
		"prefix": "TF_DMG_CUSTOM_HEADSHOT_DECAPITATION",
		"body": [
			"TF_DMG_CUSTOM_HEADSHOT_DECAPITATION$0"
		],
		"description": "51"
	},
	"TF_DMG_CUSTOM_KART": {
		"prefix": "TF_DMG_CUSTOM_KART",
		"body": [
			"TF_DMG_CUSTOM_KART$0"
		],
		"description": "75"
	},
	"TF_DMG_CUSTOM_MERASMUS_DECAPITATION": {
		"prefix": "TF_DMG_CUSTOM_MERASMUS_DECAPITATION",
		"body": [
			"TF_DMG_CUSTOM_MERASMUS_DECAPITATION$0"
		],
		"description": "60"
	},
	"TF_DMG_CUSTOM_MERASMUS_GRENADE": {
		"prefix": "TF_DMG_CUSTOM_MERASMUS_GRENADE",
		"body": [
			"TF_DMG_CUSTOM_MERASMUS_GRENADE$0"
		],
		"description": "58"
	},
	"TF_DMG_CUSTOM_MERASMUS_PLAYER_BOMB": {
		"prefix": "TF_DMG_CUSTOM_MERASMUS_PLAYER_BOMB",
		"body": [
			"TF_DMG_CUSTOM_MERASMUS_PLAYER_BOMB$0"
		],
		"description": "57"
	},
	"TF_DMG_CUSTOM_MERASMUS_ZAP": {
		"prefix": "TF_DMG_CUSTOM_MERASMUS_ZAP",
		"body": [
			"TF_DMG_CUSTOM_MERASMUS_ZAP$0"
		],
		"description": "59"
	},
	"TF_DMG_CUSTOM_MINIGUN": {
		"prefix": "TF_DMG_CUSTOM_MINIGUN",
		"body": [
			"TF_DMG_CUSTOM_MINIGUN$0"
		],
		"description": "5"
	},
	"TF_DMG_CUSTOM_NONE": {
		"prefix": "TF_DMG_CUSTOM_NONE",
		"body": [
			"TF_DMG_CUSTOM_NONE$0"
		],
		"description": "0"
	},
	"TF_DMG_CUSTOM_PENETRATE_ALL_PLAYERS": {
		"prefix": "TF_DMG_CUSTOM_PENETRATE_ALL_PLAYERS",
		"body": [
			"TF_DMG_CUSTOM_PENETRATE_ALL_PLAYERS$0"
		],
		"description": "12"
	},
	"TF_DMG_CUSTOM_PENETRATE_MY_TEAM": {
		"prefix": "TF_DMG_CUSTOM_PENETRATE_MY_TEAM",
		"body": [
			"TF_DMG_CUSTOM_PENETRATE_MY_TEAM$0"
		],
		"description": "11"
	},
	"TF_DMG_CUSTOM_PENETRATE_NONBURNING_TEAMMATE": {
		"prefix": "TF_DMG_CUSTOM_PENETRATE_NONBURNING_TEAMMATE",
		"body": [
			"TF_DMG_CUSTOM_PENETRATE_NONBURNING_TEAMMATE$0"
		],
		"description": "14"
	},
	"TF_DMG_CUSTOM_PICKAXE": {
		"prefix": "TF_DMG_CUSTOM_PICKAXE",
		"body": [
			"TF_DMG_CUSTOM_PICKAXE$0"
		],
		"description": "27"
	},
	"TF_DMG_CUSTOM_PLASMA": {
		"prefix": "TF_DMG_CUSTOM_PLASMA",
		"body": [
			"TF_DMG_CUSTOM_PLASMA$0"
		],
		"description": "46"
	},
	"TF_DMG_CUSTOM_PLASMA_CHARGED": {
		"prefix": "TF_DMG_CUSTOM_PLASMA_CHARGED",
		"body": [
			"TF_DMG_CUSTOM_PLASMA_CHARGED$0"
		],
		"description": "47"
	},
	"TF_DMG_CUSTOM_PLASMA_GIB": {
		"prefix": "TF_DMG_CUSTOM_PLASMA_GIB",
		"body": [
			"TF_DMG_CUSTOM_PLASMA_GIB$0"
		],
		"description": "48"
	},
	"TF_DMG_CUSTOM_PLAYER_SENTRY": {
		"prefix": "TF_DMG_CUSTOM_PLAYER_SENTRY",
		"body": [
			"TF_DMG_CUSTOM_PLAYER_SENTRY$0"
		],
		"description": "30"
	},
	"TF_DMG_CUSTOM_PRACTICE_STICKY": {
		"prefix": "TF_DMG_CUSTOM_PRACTICE_STICKY",
		"body": [
			"TF_DMG_CUSTOM_PRACTICE_STICKY$0"
		],
		"description": "49"
	},
	"TF_DMG_CUSTOM_PUMPKIN_BOMB": {
		"prefix": "TF_DMG_CUSTOM_PUMPKIN_BOMB",
		"body": [
			"TF_DMG_CUSTOM_PUMPKIN_BOMB$0"
		],
		"description": "19"
	},
	"TF_DMG_CUSTOM_ROCKET_DIRECTHIT": {
		"prefix": "TF_DMG_CUSTOM_ROCKET_DIRECTHIT",
		"body": [
			"TF_DMG_CUSTOM_ROCKET_DIRECTHIT$0"
		],
		"description": "28"
	},
	"TF_DMG_CUSTOM_RUNE_REFLECT": {
		"prefix": "TF_DMG_CUSTOM_RUNE_REFLECT",
		"body": [
			"TF_DMG_CUSTOM_RUNE_REFLECT$0"
		],
		"description": "77"
	},
	"TF_DMG_CUSTOM_SAPPER_RECORDER_DEATH": {
		"prefix": "TF_DMG_CUSTOM_SAPPER_RECORDER_DEATH",
		"body": [
			"TF_DMG_CUSTOM_SAPPER_RECORDER_DEATH$0"
		],
		"description": "56"
	},
	"TF_DMG_CUSTOM_SHOTGUN_REVENGE_CRIT": {
		"prefix": "TF_DMG_CUSTOM_SHOTGUN_REVENGE_CRIT",
		"body": [
			"TF_DMG_CUSTOM_SHOTGUN_REVENGE_CRIT$0"
		],
		"description": "32"
	},
	"TF_DMG_CUSTOM_SLAP_KILL": {
		"prefix": "TF_DMG_CUSTOM_SLAP_KILL",
		"body": [
			"TF_DMG_CUSTOM_SLAP_KILL$0"
		],
		"description": "80"
	},
	"TF_DMG_CUSTOM_SPELL_BATS": {
		"prefix": "TF_DMG_CUSTOM_SPELL_BATS",
		"body": [
			"TF_DMG_CUSTOM_SPELL_BATS$0"
		],
		"description": "73"
	},
	"TF_DMG_CUSTOM_SPELL_BLASTJUMP": {
		"prefix": "TF_DMG_CUSTOM_SPELL_BLASTJUMP",
		"body": [
			"TF_DMG_CUSTOM_SPELL_BLASTJUMP$0"
		],
		"description": "72"
	},
	"TF_DMG_CUSTOM_SPELL_FIREBALL": {
		"prefix": "TF_DMG_CUSTOM_SPELL_FIREBALL",
		"body": [
			"TF_DMG_CUSTOM_SPELL_FIREBALL$0"
		],
		"description": "70"
	},
	"TF_DMG_CUSTOM_SPELL_LIGHTNING": {
		"prefix": "TF_DMG_CUSTOM_SPELL_LIGHTNING",
		"body": [
			"TF_DMG_CUSTOM_SPELL_LIGHTNING$0"
		],
		"description": "69"
	},
	"TF_DMG_CUSTOM_SPELL_METEOR": {
		"prefix": "TF_DMG_CUSTOM_SPELL_METEOR",
		"body": [
			"TF_DMG_CUSTOM_SPELL_METEOR$0"
		],
		"description": "68"
	},
	"TF_DMG_CUSTOM_SPELL_MIRV": {
		"prefix": "TF_DMG_CUSTOM_SPELL_MIRV",
		"body": [
			"TF_DMG_CUSTOM_SPELL_MIRV$0"
		],
		"description": "67"
	},
	"TF_DMG_CUSTOM_SPELL_MONOCULUS": {
		"prefix": "TF_DMG_CUSTOM_SPELL_MONOCULUS",
		"body": [
			"TF_DMG_CUSTOM_SPELL_MONOCULUS$0"
		],
		"description": "71"
	},
	"TF_DMG_CUSTOM_SPELL_SKELETON": {
		"prefix": "TF_DMG_CUSTOM_SPELL_SKELETON",
		"body": [
			"TF_DMG_CUSTOM_SPELL_SKELETON$0"
		],
		"description": "66"
	},
	"TF_DMG_CUSTOM_SPELL_TELEPORT": {
		"prefix": "TF_DMG_CUSTOM_SPELL_TELEPORT",
		"body": [
			"TF_DMG_CUSTOM_SPELL_TELEPORT$0"
		],
		"description": "65"
	},
	"TF_DMG_CUSTOM_SPELL_TINY": {
		"prefix": "TF_DMG_CUSTOM_SPELL_TINY",
		"body": [
			"TF_DMG_CUSTOM_SPELL_TINY$0"
		],
		"description": "74"
	},
	"TF_DMG_CUSTOM_STANDARD_STICKY": {
		"prefix": "TF_DMG_CUSTOM_STANDARD_STICKY",
		"body": [
			"TF_DMG_CUSTOM_STANDARD_STICKY$0"
		],
		"description": "31"
	},
	"TF_DMG_CUSTOM_STICKBOMB_EXPLOSION": {
		"prefix": "TF_DMG_CUSTOM_STICKBOMB_EXPLOSION",
		"body": [
			"TF_DMG_CUSTOM_STICKBOMB_EXPLOSION$0"
		],
		"description": "42"
	},
	"TF_DMG_CUSTOM_SUICIDE": {
		"prefix": "TF_DMG_CUSTOM_SUICIDE",
		"body": [
			"TF_DMG_CUSTOM_SUICIDE$0"
		],
		"description": "6"
	},
	"TF_DMG_CUSTOM_TAUNTATK_ALLCLASS_GUITAR_RIFF": {
		"prefix": "TF_DMG_CUSTOM_TAUNTATK_ALLCLASS_GUITAR_RIFF",
		"body": [
			"TF_DMG_CUSTOM_TAUNTATK_ALLCLASS_GUITAR_RIFF$0"
		],
		"description": "62"
	},
	"TF_DMG_CUSTOM_TAUNTATK_ARMAGEDDON": {
		"prefix": "TF_DMG_CUSTOM_TAUNTATK_ARMAGEDDON",
		"body": [
			"TF_DMG_CUSTOM_TAUNTATK_ARMAGEDDON$0"
		],
		"description": "52"
	},
	"TF_DMG_CUSTOM_TAUNTATK_ARROW_STAB": {
		"prefix": "TF_DMG_CUSTOM_TAUNTATK_ARROW_STAB",
		"body": [
			"TF_DMG_CUSTOM_TAUNTATK_ARROW_STAB$0"
		],
		"description": "15"
	},
	"TF_DMG_CUSTOM_TAUNTATK_BARBARIAN_SWING": {
		"prefix": "TF_DMG_CUSTOM_TAUNTATK_BARBARIAN_SWING",
		"body": [
			"TF_DMG_CUSTOM_TAUNTATK_BARBARIAN_SWING$0"
		],
		"description": "24"
	},
	"TF_DMG_CUSTOM_TAUNTATK_ENGINEER_ARM_KILL": {
		"prefix": "TF_DMG_CUSTOM_TAUNTATK_ENGINEER_ARM_KILL",
		"body": [
			"TF_DMG_CUSTOM_TAUNTATK_ENGINEER_ARM_KILL$0"
		],
		"description": "38"
	},
	"TF_DMG_CUSTOM_TAUNTATK_ENGINEER_GUITAR_SMASH": {
		"prefix": "TF_DMG_CUSTOM_TAUNTATK_ENGINEER_GUITAR_SMASH",
		"body": [
			"TF_DMG_CUSTOM_TAUNTATK_ENGINEER_GUITAR_SMASH$0"
		],
		"description": "33"
	},
	"TF_DMG_CUSTOM_TAUNTATK_FENCING": {
		"prefix": "TF_DMG_CUSTOM_TAUNTATK_FENCING",
		"body": [
			"TF_DMG_CUSTOM_TAUNTATK_FENCING$0"
		],
		"description": "13"
	},
	"TF_DMG_CUSTOM_TAUNTATK_GASBLAST": {
		"prefix": "TF_DMG_CUSTOM_TAUNTATK_GASBLAST",
		"body": [
			"TF_DMG_CUSTOM_TAUNTATK_GASBLAST$0"
		],
		"description": "82"
	},
	"TF_DMG_CUSTOM_TAUNTATK_GRAND_SLAM": {
		"prefix": "TF_DMG_CUSTOM_TAUNTATK_GRAND_SLAM",
		"body": [
			"TF_DMG_CUSTOM_TAUNTATK_GRAND_SLAM$0"
		],
		"description": "10"
	},
	"TF_DMG_CUSTOM_TAUNTATK_GRENADE": {
		"prefix": "TF_DMG_CUSTOM_TAUNTATK_GRENADE",
		"body": [
			"TF_DMG_CUSTOM_TAUNTATK_GRENADE$0"
		],
		"description": "21"
	},
	"TF_DMG_CUSTOM_TAUNTATK_HADOUKEN": {
		"prefix": "TF_DMG_CUSTOM_TAUNTATK_HADOUKEN",
		"body": [
			"TF_DMG_CUSTOM_TAUNTATK_HADOUKEN$0"
		],
		"description": "7"
	},
	"TF_DMG_CUSTOM_TAUNTATK_HIGH_NOON": {
		"prefix": "TF_DMG_CUSTOM_TAUNTATK_HIGH_NOON",
		"body": [
			"TF_DMG_CUSTOM_TAUNTATK_HIGH_NOON$0"
		],
		"description": "9"
	},
	"TF_DMG_CUSTOM_TAUNTATK_UBERSLICE": {
		"prefix": "TF_DMG_CUSTOM_TAUNTATK_UBERSLICE",
		"body": [
			"TF_DMG_CUSTOM_TAUNTATK_UBERSLICE$0"
		],
		"description": "29"
	},
	"TF_DMG_CUSTOM_TELEFRAG": {
		"prefix": "TF_DMG_CUSTOM_TELEFRAG",
		"body": [
			"TF_DMG_CUSTOM_TELEFRAG$0"
		],
		"description": "16"
	},
	"TF_DMG_CUSTOM_THROWABLE": {
		"prefix": "TF_DMG_CUSTOM_THROWABLE",
		"body": [
			"TF_DMG_CUSTOM_THROWABLE$0"
		],
		"description": "63"
	},
	"TF_DMG_CUSTOM_THROWABLE_KILL": {
		"prefix": "TF_DMG_CUSTOM_THROWABLE_KILL",
		"body": [
			"TF_DMG_CUSTOM_THROWABLE_KILL$0"
		],
		"description": "64"
	},
	"TF_DMG_CUSTOM_TRIGGER_HURT": {
		"prefix": "TF_DMG_CUSTOM_TRIGGER_HURT",
		"body": [
			"TF_DMG_CUSTOM_TRIGGER_HURT$0"
		],
		"description": "40"
	},
	"TF_DMG_WRENCH_FIX": {
		"prefix": "TF_DMG_WRENCH_FIX",
		"body": [
			"TF_DMG_WRENCH_FIX$0"
		],
		"description": "4"
	},
	"TF_NAV_BLOCKED": {
		"prefix": "TF_NAV_BLOCKED",
		"body": [
			"TF_NAV_BLOCKED$0"
		],
		"description": "1"
	},
	"TF_NAV_BLOCKED_AFTER_POINT_CAPTURE": {
		"prefix": "TF_NAV_BLOCKED_AFTER_POINT_CAPTURE",
		"body": [
			"TF_NAV_BLOCKED_AFTER_POINT_CAPTURE$0"
		],
		"description": "8192"
	},
	"TF_NAV_BLOCKED_UNTIL_POINT_CAPTURE": {
		"prefix": "TF_NAV_BLOCKED_UNTIL_POINT_CAPTURE",
		"body": [
			"TF_NAV_BLOCKED_UNTIL_POINT_CAPTURE$0"
		],
		"description": "16384"
	},
	"TF_NAV_BLUE_ONE_WAY_DOOR": {
		"prefix": "TF_NAV_BLUE_ONE_WAY_DOOR",
		"body": [
			"TF_NAV_BLUE_ONE_WAY_DOOR$0"
		],
		"description": "32768"
	},
	"TF_NAV_BLUE_SENTRY_DANGER": {
		"prefix": "TF_NAV_BLUE_SENTRY_DANGER",
		"body": [
			"TF_NAV_BLUE_SENTRY_DANGER$0"
		],
		"description": "128"
	},
	"TF_NAV_BLUE_SETUP_GATE": {
		"prefix": "TF_NAV_BLUE_SETUP_GATE",
		"body": [
			"TF_NAV_BLUE_SETUP_GATE$0"
		],
		"description": "2048"
	},
	"TF_NAV_BOMB_CAN_DROP_HERE": {
		"prefix": "TF_NAV_BOMB_CAN_DROP_HERE",
		"body": [
			"TF_NAV_BOMB_CAN_DROP_HERE$0"
		],
		"description": "134217728"
	},
	"TF_NAV_CONTROL_POINT": {
		"prefix": "TF_NAV_CONTROL_POINT",
		"body": [
			"TF_NAV_CONTROL_POINT$0"
		],
		"description": "64"
	},
	"TF_NAV_DOOR_ALWAYS_BLOCKS": {
		"prefix": "TF_NAV_DOOR_ALWAYS_BLOCKS",
		"body": [
			"TF_NAV_DOOR_ALWAYS_BLOCKS$0"
		],
		"description": "536870912"
	},
	"TF_NAV_DOOR_NEVER_BLOCKS": {
		"prefix": "TF_NAV_DOOR_NEVER_BLOCKS",
		"body": [
			"TF_NAV_DOOR_NEVER_BLOCKS$0"
		],
		"description": "268435456"
	},
	"TF_NAV_ESCAPE_ROUTE": {
		"prefix": "TF_NAV_ESCAPE_ROUTE",
		"body": [
			"TF_NAV_ESCAPE_ROUTE$0"
		],
		"description": "8388608"
	},
	"TF_NAV_ESCAPE_ROUTE_VISIBLE": {
		"prefix": "TF_NAV_ESCAPE_ROUTE_VISIBLE",
		"body": [
			"TF_NAV_ESCAPE_ROUTE_VISIBLE$0"
		],
		"description": "16777216"
	},
	"TF_NAV_HAS_AMMO": {
		"prefix": "TF_NAV_HAS_AMMO",
		"body": [
			"TF_NAV_HAS_AMMO$0"
		],
		"description": "16"
	},
	"TF_NAV_HAS_HEALTH": {
		"prefix": "TF_NAV_HAS_HEALTH",
		"body": [
			"TF_NAV_HAS_HEALTH$0"
		],
		"description": "32"
	},
	"TF_NAV_INVALID": {
		"prefix": "TF_NAV_INVALID",
		"body": [
			"TF_NAV_INVALID$0"
		],
		"description": "0"
	},
	"TF_NAV_NO_SPAWNING": {
		"prefix": "TF_NAV_NO_SPAWNING",
		"body": [
			"TF_NAV_NO_SPAWNING$0"
		],
		"description": "33554432"
	},
	"TF_NAV_PERSISTENT_ATTRIBUTES": {
		"prefix": "TF_NAV_PERSISTENT_ATTRIBUTES",
		"body": [
			"TF_NAV_PERSISTENT_ATTRIBUTES$0"
		],
		"description": "198809804"
	},
	"TF_NAV_RED_ONE_WAY_DOOR": {
		"prefix": "TF_NAV_RED_ONE_WAY_DOOR",
		"body": [
			"TF_NAV_RED_ONE_WAY_DOOR$0"
		],
		"description": "65536"
	},
	"TF_NAV_RED_SENTRY_DANGER": {
		"prefix": "TF_NAV_RED_SENTRY_DANGER",
		"body": [
			"TF_NAV_RED_SENTRY_DANGER$0"
		],
		"description": "256"
	},
	"TF_NAV_RED_SETUP_GATE": {
		"prefix": "TF_NAV_RED_SETUP_GATE",
		"body": [
			"TF_NAV_RED_SETUP_GATE$0"
		],
		"description": "4096"
	},
	"TF_NAV_RESCUE_CLOSET": {
		"prefix": "TF_NAV_RESCUE_CLOSET",
		"body": [
			"TF_NAV_RESCUE_CLOSET$0"
		],
		"description": "67108864"
	},
	"TF_NAV_SENTRY_SPOT": {
		"prefix": "TF_NAV_SENTRY_SPOT",
		"body": [
			"TF_NAV_SENTRY_SPOT$0"
		],
		"description": "4194304"
	},
	"TF_NAV_SNIPER_SPOT": {
		"prefix": "TF_NAV_SNIPER_SPOT",
		"body": [
			"TF_NAV_SNIPER_SPOT$0"
		],
		"description": "2097152"
	},
	"TF_NAV_SPAWN_ROOM_BLUE": {
		"prefix": "TF_NAV_SPAWN_ROOM_BLUE",
		"body": [
			"TF_NAV_SPAWN_ROOM_BLUE$0"
		],
		"description": "4"
	},
	"TF_NAV_SPAWN_ROOM_EXIT": {
		"prefix": "TF_NAV_SPAWN_ROOM_EXIT",
		"body": [
			"TF_NAV_SPAWN_ROOM_EXIT$0"
		],
		"description": "8"
	},
	"TF_NAV_SPAWN_ROOM_RED": {
		"prefix": "TF_NAV_SPAWN_ROOM_RED",
		"body": [
			"TF_NAV_SPAWN_ROOM_RED$0"
		],
		"description": "2"
	},
	"TF_NAV_UNBLOCKABLE": {
		"prefix": "TF_NAV_UNBLOCKABLE",
		"body": [
			"TF_NAV_UNBLOCKABLE$0"
		],
		"description": "1073741824"
	},
	"TF_NAV_WITH_FIFTH_POINT": {
		"prefix": "TF_NAV_WITH_FIFTH_POINT",
		"body": [
			"TF_NAV_WITH_FIFTH_POINT$0"
		],
		"description": "1048576"
	},
	"TF_NAV_WITH_FOURTH_POINT": {
		"prefix": "TF_NAV_WITH_FOURTH_POINT",
		"body": [
			"TF_NAV_WITH_FOURTH_POINT$0"
		],
		"description": "524288"
	},
	"TF_NAV_WITH_SECOND_POINT": {
		"prefix": "TF_NAV_WITH_SECOND_POINT",
		"body": [
			"TF_NAV_WITH_SECOND_POINT$0"
		],
		"description": "131072"
	},
	"TF_NAV_WITH_THIRD_POINT": {
		"prefix": "TF_NAV_WITH_THIRD_POINT",
		"body": [
			"TF_NAV_WITH_THIRD_POINT$0"
		],
		"description": "262144"
	},
	"TF_TEAM_BLUE": {
		"prefix": "TF_TEAM_BLUE",
		"body": [
			"TF_TEAM_BLUE$0"
		],
		"description": "3"
	},
	"TF_TEAM_COUNT": {
		"prefix": "TF_TEAM_COUNT",
		"body": [
			"TF_TEAM_COUNT$0"
		],
		"description": "4"
	},
	"TF_TEAM_PVE_DEFENDERS": {
		"prefix": "TF_TEAM_PVE_DEFENDERS",
		"body": [
			"TF_TEAM_PVE_DEFENDERS$0"
		],
		"description": "2"
	},
	"TF_TEAM_PVE_INVADERS": {
		"prefix": "TF_TEAM_PVE_INVADERS",
		"body": [
			"TF_TEAM_PVE_INVADERS$0"
		],
		"description": "3"
	},
	"TF_TEAM_PVE_INVADERS_GIANTS": {
		"prefix": "TF_TEAM_PVE_INVADERS_GIANTS",
		"body": [
			"TF_TEAM_PVE_INVADERS_GIANTS$0"
		],
		"description": "4"
	},
	"TF_TEAM_RED": {
		"prefix": "TF_TEAM_RED",
		"body": [
			"TF_TEAM_RED$0"
		],
		"description": "2"
	},
	"void TakeDamage(float flDamage, int nDamageType, handle hAttacker)": {
		"prefix": "TakeDamage",
		"body": [
			"TakeDamage(${1:float flDamage}, ${2:int nDamageType}, ${3:handle hAttacker})$0"
		],
		"description": "Deals damage to the entity."
	},
	"void TakeDamageCustom(handle hInflictor, handle hAttacker, handle hWeapon, Vector vecDamageForce, Vector vecDamagePosition, float flDamage, int nDamageType, Constants.ETFDmgCustom nCustomDamageType)": {
		"prefix": "TakeDamageCustom",
		"body": [
			"TakeDamageCustom(${1:handle hInflictor}, ${2:handle hAttacker}, ${3:handle hWeapon}, ${4:Vector vecDamageForce}, ${5:Vector vecDamagePosition}, ${6:float flDamage}, ${7:int nDamageType}, ${8:Constants.ETFDmgCustom nCustomDamageType})$0"
		],
		"description": "Extended version of TakeDamageEx that can apply a custom damage type."
	},
	"void TakeDamageEx(handle hInflictor, handle hAttacker, handle hWeapon, Vector vecDamageForce, Vector vecDamagePosition, float flDamage, int nDamageType)": {
		"prefix": "TakeDamageEx",
		"body": [
			"TakeDamageEx(${1:handle hInflictor}, ${2:handle hAttacker}, ${3:handle hWeapon}, ${4:Vector vecDamageForce}, ${5:Vector vecDamagePosition}, ${6:float flDamage}, ${7:int nDamageType})$0"
		],
		"description": "Extended version of TakeDamage."
	},
	"Tau": {
		"prefix": "Tau",
		"body": [
			"Tau$0"
		],
		"description": "6.28319"
	},
	"void Taunt(int taunt_index, int taunt_concept)": {
		"prefix": "Taunt",
		"body": [
			"Taunt(${1:int taunt_index}, ${2:int taunt_concept})$0"
		],
		"description": "Performs a taunt if allowed. For taunt index, see Constants.FTaunts. For concepts, see MP_CONCEPT List. Concept is the \"voiceline\" index to use with the taunt. For TAUNT_SHOW_ITEM and TAUNT_BASE_WEAPON this is set automatically. TAUNT_LONG is not supported."
	},
	"void Teleport(bool use_origin, Vector origin, bool use_angles, QAngle angles, bool use_velocity, Vector velocity)": {
		"prefix": "Teleport",
		"body": [
			"Teleport(${1:bool use_origin}, ${2:Vector origin}, ${3:bool use_angles}, ${4:QAngle angles}, ${5:bool use_velocity}, ${6:Vector velocity})$0"
		],
		"description": "Teleports this entity. For this function, set the bools to false if you want that entity's property unchanged. (do not use null arguments!)"
	},
	"void TerminateScriptScope()": {
		"prefix": "TerminateScriptScope",
		"body": [
			"TerminateScriptScope()$0"
		],
		"description": "Clear the current script scope for this entity"
	},
	"float Time()": {
		"prefix": "Time",
		"body": [
			"Time()$0"
		],
		"description": "Get the current server time"
	},
	"string ToKVString()": {
		"prefix": "ToKVString",
		"body": [
			"ToKVString()$0"
		],
		"description": "Returns a string with the values separated by one space."
	},
	"QAngle ToQAngle()": {
		"prefix": "ToQAngle",
		"body": [
			"ToQAngle()$0"
		],
		"description": "Returns the angles resulting from the rotation."
	},
	"Quaternion ToQuat()": {
		"prefix": "ToQuat",
		"body": [
			"ToQuat()$0"
		],
		"description": "Returns a quaternion representation of the orientation."
	},
	"ToggleFlag(int flags)": {
		"prefix": "ToggleFlag",
		"body": [
			"ToggleFlag(${1:int flags})$0"
		],
		"description": ""
	},
	"bool TraceHull(table traceTable)": {
		"prefix": "TraceHull",
		"body": [
			"TraceHull(${1:table traceTable})$0"
		],
		"description": "Input Table: start, end, hullmin, hullmax, mask (optional), ignore (optional). Output Table: pos, fraction, hit, enthit, allsolid, startpos, endpos, startsolid, plane_normal, plane_dist, surface_name, surface_flags, surface_props. Returns false if start, end, hullmin or hullmax is not specified."
	},
	"float TraceLine(Vector start, Vector end, handle ignore)": {
		"prefix": "TraceLine",
		"body": [
			"TraceLine(${1:Vector start}, ${2:Vector end}, ${3:handle ignore})$0"
		],
		"description": "Return fraction along line that hits world or models"
	},
	"bool TraceLineEx(table traceTable)": {
		"prefix": "TraceLineEx",
		"body": [
			"TraceLineEx(${1:table traceTable})$0"
		],
		"description": "Input Table: start, end, mask (optional), ignore (optional). Output Table: pos, fraction, hit, enthit, allsolid, startpos, endpos, startsolid, plane_normal, plane_dist, surface_name, surface_flags, surface_props. Returns false if start or end is not specified."
	},
	"float TraceLinePlayersIncluded(Vector, Vector, handle)": {
		"prefix": "TraceLinePlayersIncluded",
		"body": [
			"TraceLinePlayersIncluded(${1:Vector}, ${2:Vector}, ${3:handle})$0"
		],
		"description": "given 2 points & ent to ignore, return fraction along line that hits world, models, players or npcs"
	},
	"bool TryToPickupBuilding()": {
		"prefix": "TryToPickupBuilding",
		"body": [
			"TryToPickupBuilding()$0"
		],
		"description": "Make the player attempt to pick up a building in front of them"
	},
	"UNDEFINED": {
		"prefix": "UNDEFINED",
		"body": [
			"UNDEFINED$0"
		],
		"description": "-1"
	},
	"UP": {
		"prefix": "UP",
		"body": [
			"UP$0"
		],
		"description": "4"
	},
	"USE_BOSS_HEALTH_BAR": {
		"prefix": "USE_BOSS_HEALTH_BAR",
		"body": [
			"USE_BOSS_HEALTH_BAR$0"
		],
		"description": "65536"
	},
	"void UnblockArea()": {
		"prefix": "UnblockArea",
		"body": [
			"UnblockArea()$0"
		],
		"description": "Unblocks this area."
	},
	"UnhookRootMetamethod()": {
		"prefix": "UnhookRootMetamethod",
		"body": [
			"UnhookRootMetamethod()$0"
		],
		"description": ""
	},
	"string UniqueString(string input)": {
		"prefix": "UniqueString",
		"body": [
			"UniqueString(${1:string input})$0"
		],
		"description": "Generate a string guaranteed to be unique across the life of the script VM, with an optional root string. Useful for adding data to tables when not sure what keys are already in use in that table."
	},
	"void UnregisterAvoidanceObstacle(handle entity)": {
		"prefix": "UnregisterAvoidanceObstacle",
		"body": [
			"UnregisterAvoidanceObstacle(${1:handle entity})$0"
		],
		"description": "unregisters avoidance obstacle"
	},
	"Vector Up()": {
		"prefix": "Up",
		"body": [
			"Up()$0"
		],
		"description": "Returns the Up Vector of the angles."
	},
	"void UpdateDelayedThreatNotices()": {
		"prefix": "UpdateDelayedThreatNotices",
		"body": [
			"UpdateDelayedThreatNotices()$0"
		],
		"description": ""
	},
	"void UpdateSkin(int skin)": {
		"prefix": "UpdateSkin",
		"body": [
			"UpdateSkin(${1:int skin})$0"
		],
		"description": ""
	},
	"bool UsePlayerReadyStatusMode()": {
		"prefix": "UsePlayerReadyStatusMode",
		"body": [
			"UsePlayerReadyStatusMode()$0"
		],
		"description": ""
	},
	"bool UsesClipsForAmmo1()": {
		"prefix": "UsesClipsForAmmo1",
		"body": [
			"UsesClipsForAmmo1()$0"
		],
		"description": "Do we use clips for ammo 1?"
	},
	"bool UsesClipsForAmmo2()": {
		"prefix": "UsesClipsForAmmo2",
		"body": [
			"UsesClipsForAmmo2()$0"
		],
		"description": "Do we use clips for ammo 2?"
	},
	"bool UsesPrimaryAmmo()": {
		"prefix": "UsesPrimaryAmmo",
		"body": [
			"UsesPrimaryAmmo()$0"
		],
		"description": "Do we use primary ammo?"
	},
	"bool UsesSecondaryAmmo()": {
		"prefix": "UsesSecondaryAmmo",
		"body": [
			"UsesSecondaryAmmo()$0"
		],
		"description": "Do we use secondary ammo?"
	},
	"table VSquirrel_OnCreateScope(any value, table scope)": {
		"prefix": "VSquirrel_OnCreateScope",
		"body": [
			"VSquirrel_OnCreateScope(${1:any value}, ${2:table scope})$0"
		],
		"description": "Creates a new scope with the name of value in the submitted table (includes unique params)."
	},
	"void VSquirrel_OnReleaseScope(table createdScope)": {
		"prefix": "VSquirrel_OnReleaseScope",
		"body": [
			"VSquirrel_OnReleaseScope(${1:table createdScope})$0"
		],
		"description": "Removes a scope created via VSquirrel_OnCreateScope."
	},
	"bool ValidateScriptScope()": {
		"prefix": "ValidateScriptScope",
		"body": [
			"ValidateScriptScope()$0"
		],
		"description": "Ensure that an entity's script scope has been created"
	},
	"Vector(float x = 0, float y = 0, float z = 0)": {
		"prefix": "Vector",
		"body": [
			"Vector(${1:float x = 0}, ${2:float y = 0}, ${3:float z = 0})$0"
		],
		"description": "Creates a new vector with the specified Cartesian coordiantes."
	},
	"Vector2D(float x, float y)": {
		"prefix": "Vector2D",
		"body": [
			"Vector2D(${1:float x}, ${2:float y})$0"
		],
		"description": "Creates a new 2D vector with the specified Cartesian coordiantes."
	},
	"Vector4D(float x, float y, float z, float w)": {
		"prefix": "Vector4D",
		"body": [
			"Vector4D(${1:float x}, ${2:float y}, ${3:float z}, ${4:float w})$0"
		],
		"description": "Creates a new 4D vector with the specified Cartesian coordiantes."
	},
	"void ViewPunch(QAngle angleOffset)": {
		"prefix": "ViewPunch",
		"body": [
			"ViewPunch(${1:QAngle angleOffset})$0"
		],
		"description": "Ow! Punches the player's view"
	},
	"void ViewPunchReset(float tolerance)": {
		"prefix": "ViewPunchReset",
		"body": [
			"ViewPunchReset(${1:float tolerance})$0"
		],
		"description": "Reset's the player's view punch if the offset stays below the given tolerance."
	},
	"bool VisibleInWeaponSelection()": {
		"prefix": "VisibleInWeaponSelection",
		"body": [
			"VisibleInWeaponSelection()$0"
		],
		"description": "Is this weapon visible in weapon selection"
	},
	"WEST": {
		"prefix": "WEST",
		"body": [
			"WEST$0"
		],
		"description": "3"
	},
	"void Walk()": {
		"prefix": "Walk",
		"body": [
			"Walk()$0"
		],
		"description": "Set desired movement speed to walking"
	},
	"bool WasInCond(ETFCond cond)": {
		"prefix": "WasInCond",
		"body": [
			"WasInCond(${1:ETFCond cond})$0"
		],
		"description": ""
	},
	"bool Weapon_CanUse(handle weapon)": {
		"prefix": "Weapon_CanUse",
		"body": [
			"Weapon_CanUse(${1:handle weapon})$0"
		],
		"description": ""
	},
	"void Weapon_Drop(handle weapon)": {
		"prefix": "Weapon_Drop",
		"body": [
			"Weapon_Drop(${1:handle weapon})$0"
		],
		"description": "Does nothing!"
	},
	"void Weapon_Drop(handle weapon, Vector target, Vector velocity)": {
		"prefix": "Weapon_Drop",
		"body": [
			"Weapon_Drop(${1:handle weapon}, ${2:Vector target}, ${3:Vector velocity})$0"
		],
		"description": "Does nothing!"
	},
	"void Weapon_Equip(handle weapon)": {
		"prefix": "Weapon_Equip",
		"body": [
			"Weapon_Equip(${1:handle weapon})$0"
		],
		"description": ""
	},
	"void Weapon_SetLast(handle weapon)": {
		"prefix": "Weapon_SetLast",
		"body": [
			"Weapon_SetLast(${1:handle weapon})$0"
		],
		"description": ""
	},
	"vector Weapon_ShootPosition()": {
		"prefix": "Weapon_ShootPosition",
		"body": [
			"Weapon_ShootPosition()$0"
		],
		"description": ""
	},
	"void Weapon_Switch(handle weapon)": {
		"prefix": "Weapon_Switch",
		"body": [
			"Weapon_Switch(${1:handle weapon})$0"
		],
		"description": ""
	},
	"float Yaw()": {
		"prefix": "Yaw",
		"body": [
			"Yaw()$0"
		],
		"description": "Returns the yaw angle in degrees."
	},
	"Zero": {
		"prefix": "Zero",
		"body": [
			"Zero$0"
		],
		"description": "0"
	},
	"_PublishedHelp": {
		"prefix": "_PublishedHelp",
		"body": [
			"_PublishedHelp$0"
		],
		"description": ""
	},
	"void __CollectEventCallbacks(scope, prefix, globalTableName, regFunc)": {
		"prefix": "__CollectEventCallbacks",
		"body": [
			"__CollectEventCallbacks(${1:scope}, ${2:prefix}, ${3:globalTableName}, ${4:regFunc})$0"
		],
		"description": "Overloaded function. Its only used for this: __CollectEventCallbacks(scope, \"OnGameEvent_\", \"GameEventCallbacks\", ::RegisterScriptGameEventListener)"
	},
	"void __CollectGameEventCallbacks(table scope)": {
		"prefix": "__CollectGameEventCallbacks",
		"body": [
			"__CollectGameEventCallbacks(${1:table scope})$0"
		],
		"description": "Wrapper that registers callbacks for both OnGameEvent_x and OnScriptEvent_ functions. Done using the __CollectEventCallbacks function."
	},
	"void __DumpScope(int indentation, handle scope)": {
		"prefix": "__DumpScope",
		"body": [
			"__DumpScope(${1:int indentation}, ${2:handle scope})$0"
		],
		"description": "Dumps a scope's contents and expands all tables and arrays; this is what the ent_script_dump command uses."
	},
	"__FILE__": {
		"prefix": "__FILE__",
		"body": [
			"__FILE__$0"
		],
		"description": "File name of the currently executing script"
	},
	"bool __KeyValueFromFloat(string key, float value)": {
		"prefix": "__KeyValueFromFloat",
		"body": [
			"__KeyValueFromFloat(${1:string key}, ${2:float value})$0"
		],
		"description": "Behaves the same as KeyValueFromFloat, use that instead."
	},
	"bool __KeyValueFromInt(string key, int value)": {
		"prefix": "__KeyValueFromInt",
		"body": [
			"__KeyValueFromInt(${1:string key}, ${2:int value})$0"
		],
		"description": "Behaves the same as KeyValueFromInt, use that instead."
	},
	"bool __KeyValueFromString(string key, string value)": {
		"prefix": "__KeyValueFromString",
		"body": [
			"__KeyValueFromString(${1:string key}, ${2:string value})$0"
		],
		"description": "Behaves the same as KeyValueFromString, use that instead."
	},
	"bool __KeyValueFromVector(string key, Vector value)": {
		"prefix": "__KeyValueFromVector",
		"body": [
			"__KeyValueFromVector(${1:string key}, ${2:Vector value})$0"
		],
		"description": "Behaves the same as KeyValueFromVector, use that instead."
	},
	"__LINE__": {
		"prefix": "__LINE__",
		"body": [
			"__LINE__$0"
		],
		"description": "Line number of the currently executing code"
	},
	"void __ReplaceClosures(script, scope)": {
		"prefix": "__ReplaceClosures",
		"body": [
			"__ReplaceClosures(${1:script}, ${2:scope})$0"
		],
		"description": ""
	},
	"void __RunEventCallbacks(event, params, prefix, globalTableName, bWarnIfMissing)": {
		"prefix": "__RunEventCallbacks",
		"body": [
			"__RunEventCallbacks(${1:event}, ${2:params}, ${3:prefix}, ${4:globalTableName}, ${5:bWarnIfMissing})$0"
		],
		"description": "Call all functions in the callback array for the given game event"
	},
	"void __RunGameEventCallbacks(event, params)": {
		"prefix": "__RunGameEventCallbacks",
		"body": [
			"__RunGameEventCallbacks(${1:event}, ${2:params})$0"
		],
		"description": "Wrapper for __RunEventCallbacks()"
	},
	"void __RunScriptHookCallbacks()": {
		"prefix": "__RunScriptHookCallbacks",
		"body": [
			"__RunScriptHookCallbacks()$0"
		],
		"description": ""
	},
	"__VScriptServerDebugHook()": {
		"prefix": "__VScriptServerDebugHook",
		"body": [
			"__VScriptServerDebugHook()$0"
		],
		"description": ""
	},
	"_charsize_": {
		"prefix": "_charsize_",
		"body": [
			"_charsize_$0"
		],
		"description": "1"
	},
	"_floatsize_": {
		"prefix": "_floatsize_",
		"body": [
			"_floatsize_$0"
		],
		"description": "4"
	},
	"_intsize_": {
		"prefix": "_intsize_",
		"body": [
			"_intsize_$0"
		],
		"description": "4"
	},
	"_version_": {
		"prefix": "_version_",
		"body": [
			"_version_$0"
		],
		"description": "\"Squirrel 3.2 stable\""
	},
	"_versionnumber_": {
		"prefix": "_versionnumber_",
		"body": [
			"_versionnumber_$0"
		],
		"description": "320"
	},
	"abs(num x)": {
		"prefix": "abs",
		"body": [
			"abs(${1:num x})$0"
		],
		"description": "Returns |x| as integer unlike fabs()"
	},
	"acos(num x)": {
		"prefix": "acos",
		"body": [
			"acos(${1:num x})$0"
		],
		"description": "Returns cos^-1(x), -1 <= x <= 1"
	},
	"array(int length, any fill = null)": {
		"prefix": "array",
		"body": [
			"array(${1:int length}, ${2:any fill = null})$0"
		],
		"description": "Returns a new array of the given length where each element is set to fill (null by default)."
	},
	"asin(num x)": {
		"prefix": "asin",
		"body": [
			"asin(${1:num x})$0"
		],
		"description": "Returns sin^-1(x), -1 <= x <= 1"
	},
	"assert(bool exp)": {
		"prefix": "assert",
		"body": [
			"assert(${1:bool exp})$0"
		],
		"description": "Throws an assertion error if the given expression evaluates to false (i.e. the values 0, 0.0, null and false)"
	},
	"atan(num x)": {
		"prefix": "atan",
		"body": [
			"atan(${1:num x})$0"
		],
		"description": "Returns tan^-1(x)"
	},
	"atan2(num y, num x) (!)": {
		"prefix": "atan2",
		"body": [
			"atan2(${1:num y}, ${2:num x) (!})$0"
		],
		"description": "Returns the angle between the ray from the point (0, 0) through (x, y) and the positive x-axis, confined to (-PI, PI). Note the order of the parameters x and y!"
	},
	"blob(int initSize = 0)": {
		"prefix": "blob",
		"body": [
			"blob(${1:int initSize = 0})$0"
		],
		"description": ""
	},
	"function callee()": {
		"prefix": "callee",
		"body": [
			"callee()$0"
		],
		"description": "Returns the currently running closure."
	},
	"table capture(str, [start])": {
		"prefix": "capture",
		"body": [
			"capture(${1:str}, ${2:[start]})$0"
		],
		"description": "Returns an array of tables containing two indexes (\"begin\" and \"end\") of the first match of the regular expression in the string str. An array entry is created for each captured sub expressions. If no match occurs returns null. The search starts from the index start of the string, if start is omitted the search starts from the beginning of the string."
	},
	"int castf2i(float value)": {
		"prefix": "castf2i",
		"body": [
			"castf2i(${1:float value})$0"
		],
		"description": "Interprets the float's bytes as if it were a 32-bit integer representation"
	},
	"float casti2f(int value)": {
		"prefix": "casti2f",
		"body": [
			"casti2f(${1:int value})$0"
		],
		"description": "Interprets the integer's bytes as if it were a floating-point encoding"
	},
	"ceil(num x)": {
		"prefix": "ceil",
		"body": [
			"ceil(${1:num x})$0"
		],
		"description": "Returns the smallest integer that is >= x"
	},
	"chain": {
		"prefix": "chain",
		"body": [
			"chain$0"
		],
		"description": "All functions to be called by the Call() method."
	},
	"chains": {
		"prefix": "chains",
		"body": [
			"chains$0"
		],
		"description": "Contains names of unprefixed functions, each with an array of functions to call."
	},
	"int collectgarbage()": {
		"prefix": "collectgarbage",
		"body": [
			"collectgarbage()$0"
		],
		"description": "Runs the garbage collector and returns the number of reference cycles found(and deleted) This function only works on garbage collector builds."
	},
	"any compilestring(string string, string buffername = null)": {
		"prefix": "compilestring",
		"body": [
			"compilestring(${1:string string}, ${2:string buffername = null})$0"
		],
		"description": "Compiles a string containing a squirrel script into a function and returns it."
	},
	"cos(num x)": {
		"prefix": "cos",
		"body": [
			"cos(${1:num x})$0"
		],
		"description": "Returns cos(x)"
	},
	"int developer()": {
		"prefix": "developer",
		"body": [
			"developer()$0"
		],
		"description": "The current level of the developer console variable."
	},
	"dummy()": {
		"prefix": "dummy",
		"body": [
			"dummy()$0"
		],
		"description": ""
	},
	"void enabledebuginfo(any enable)": {
		"prefix": "enabledebuginfo",
		"body": [
			"enabledebuginfo(${1:any enable})$0"
		],
		"description": "Enable/disable the debug line information generation at compile time. enable != null enables . enable == null disables."
	},
	"bool endswith(string str, string cmp)": {
		"prefix": "endswith",
		"body": [
			"endswith(${1:string str}, ${2:string cmp})$0"
		],
		"description": "Returns true if the end of the string matches the comparison string."
	},
	"int entindex()": {
		"prefix": "entindex",
		"body": [
			"entindex()$0"
		],
		"description": "Returns the entity index."
	},
	"int eos()": {
		"prefix": "eos",
		"body": [
			"eos()$0"
		],
		"description": ""
	},
	"void error(string x)": {
		"prefix": "error",
		"body": [
			"error(${1:string x})$0"
		],
		"description": "Prints x in the standard error output ."
	},
	"string escape(string str)": {
		"prefix": "escape",
		"body": [
			"escape(${1:string str})$0"
		],
		"description": "Returns a string with backslashes before characters that need to be escaped: “ a b t n v f r \\ ” ’ 0 xNN"
	},
	"exactMatch": {
		"prefix": "exactMatch",
		"body": [
			"exactMatch$0"
		],
		"description": "If set, names of non-native functions and prefix must be an exact match. Set by the constructor."
	},
	"exp(num x)": {
		"prefix": "exp",
		"body": [
			"exp(${1:num x})$0"
		],
		"description": "Returns exp(x) = e^x"
	},
	"fabs(num x)": {
		"prefix": "fabs",
		"body": [
			"fabs(${1:num x})$0"
		],
		"description": "Returns |x| as float unlike abs()"
	},
	"int find(string searchString, int startIndex = null)": {
		"prefix": "find",
		"body": [
			"find(${1:string searchString}, ${2:int startIndex = null})$0"
		],
		"description": "Looks for the sub-string passed as its first parameter, starting at either the beginning of the string or at a specific character index if one is provided as a second parameter. If the sub-string is found, returns the index at which it first occurs, otherwise returns null."
	},
	"floor(num x)": {
		"prefix": "floor",
		"body": [
			"floor(${1:num x})$0"
		],
		"description": "Returns the largest integer that is <= x"
	},
	"flush()": {
		"prefix": "flush",
		"body": [
			"flush()$0"
		],
		"description": ""
	},
	"format(string format, args...)": {
		"prefix": "format",
		"body": [
			"format(${1:string format}, ${2:args...})$0"
		],
		"description": "Returns a formatted string. Same rules as the standard C functions (except * is not supported)."
	},
	"table getconsttable()": {
		"prefix": "getconsttable",
		"body": [
			"getconsttable()$0"
		],
		"description": "Returns the const table of the VM."
	},
	"table getroottable()": {
		"prefix": "getroottable",
		"body": [
			"getroottable()$0"
		],
		"description": "Returns the root table of the VM."
	},
	"table getstackinfos(int stacklevel)": {
		"prefix": "getstackinfos",
		"body": [
			"getstackinfos(${1:int stacklevel})$0"
		],
		"description": "Returns the stack frame informations at the given stack level (0 is the current function 1 is the caller and so on). If the stack level doesn't exist the function returns null."
	},
	"kHolidayCount": {
		"prefix": "kHolidayCount",
		"body": [
			"kHolidayCount$0"
		],
		"description": "14"
	},
	"kHoliday_AprilFools": {
		"prefix": "kHoliday_AprilFools",
		"body": [
			"kHoliday_AprilFools$0"
		],
		"description": "11"
	},
	"kHoliday_Christmas": {
		"prefix": "kHoliday_Christmas",
		"body": [
			"kHoliday_Christmas$0"
		],
		"description": "3"
	},
	"kHoliday_CommunityUpdate": {
		"prefix": "kHoliday_CommunityUpdate",
		"body": [
			"kHoliday_CommunityUpdate$0"
		],
		"description": "4"
	},
	"kHoliday_EOTL": {
		"prefix": "kHoliday_EOTL",
		"body": [
			"kHoliday_EOTL$0"
		],
		"description": "5"
	},
	"kHoliday_FullMoon": {
		"prefix": "kHoliday_FullMoon",
		"body": [
			"kHoliday_FullMoon$0"
		],
		"description": "8"
	},
	"kHoliday_Halloween": {
		"prefix": "kHoliday_Halloween",
		"body": [
			"kHoliday_Halloween$0"
		],
		"description": "2"
	},
	"kHoliday_HalloweenOrFullMoon": {
		"prefix": "kHoliday_HalloweenOrFullMoon",
		"body": [
			"kHoliday_HalloweenOrFullMoon$0"
		],
		"description": "9"
	},
	"kHoliday_HalloweenOrFullMoonOrValentines": {
		"prefix": "kHoliday_HalloweenOrFullMoonOrValentines",
		"body": [
			"kHoliday_HalloweenOrFullMoonOrValentines$0"
		],
		"description": "10"
	},
	"kHoliday_MeetThePyro": {
		"prefix": "kHoliday_MeetThePyro",
		"body": [
			"kHoliday_MeetThePyro$0"
		],
		"description": "7"
	},
	"kHoliday_None": {
		"prefix": "kHoliday_None",
		"body": [
			"kHoliday_None$0"
		],
		"description": "0"
	},
	"kHoliday_Soldier": {
		"prefix": "kHoliday_Soldier",
		"body": [
			"kHoliday_Soldier$0"
		],
		"description": "12"
	},
	"kHoliday_Summer": {
		"prefix": "kHoliday_Summer",
		"body": [
			"kHoliday_Summer$0"
		],
		"description": "13"
	},
	"kHoliday_TFBirthday": {
		"prefix": "kHoliday_TFBirthday",
		"body": [
			"kHoliday_TFBirthday$0"
		],
		"description": "1"
	},
	"kHoliday_Valentines": {
		"prefix": "kHoliday_Valentines",
		"body": [
			"kHoliday_Valentines$0"
		],
		"description": "6"
	},
	"kRenderEnvironmental": {
		"prefix": "kRenderEnvironmental",
		"body": [
			"kRenderEnvironmental$0"
		],
		"description": "6"
	},
	"kRenderFxClampMinScale": {
		"prefix": "kRenderFxClampMinScale",
		"body": [
			"kRenderFxClampMinScale$0"
		],
		"description": "19"
	},
	"kRenderFxDistort": {
		"prefix": "kRenderFxDistort",
		"body": [
			"kRenderFxDistort$0"
		],
		"description": "15"
	},
	"kRenderFxEnvRain": {
		"prefix": "kRenderFxEnvRain",
		"body": [
			"kRenderFxEnvRain$0"
		],
		"description": "20"
	},
	"kRenderFxEnvSnow": {
		"prefix": "kRenderFxEnvSnow",
		"body": [
			"kRenderFxEnvSnow$0"
		],
		"description": "21"
	},
	"kRenderFxExplode": {
		"prefix": "kRenderFxExplode",
		"body": [
			"kRenderFxExplode$0"
		],
		"description": "17"
	},
	"kRenderFxFadeFast": {
		"prefix": "kRenderFxFadeFast",
		"body": [
			"kRenderFxFadeFast$0"
		],
		"description": "6"
	},
	"kRenderFxFadeSlow": {
		"prefix": "kRenderFxFadeSlow",
		"body": [
			"kRenderFxFadeSlow$0"
		],
		"description": "5"
	},
	"kRenderFxFlickerFast": {
		"prefix": "kRenderFxFlickerFast",
		"body": [
			"kRenderFxFlickerFast$0"
		],
		"description": "13"
	},
	"kRenderFxFlickerSlow": {
		"prefix": "kRenderFxFlickerSlow",
		"body": [
			"kRenderFxFlickerSlow$0"
		],
		"description": "12"
	},
	"kRenderFxGlowShell": {
		"prefix": "kRenderFxGlowShell",
		"body": [
			"kRenderFxGlowShell$0"
		],
		"description": "18"
	},
	"kRenderFxHologram": {
		"prefix": "kRenderFxHologram",
		"body": [
			"kRenderFxHologram$0"
		],
		"description": "16"
	},
	"kRenderFxMax": {
		"prefix": "kRenderFxMax",
		"body": [
			"kRenderFxMax$0"
		],
		"description": "25"
	},
	"kRenderFxNoDissipation": {
		"prefix": "kRenderFxNoDissipation",
		"body": [
			"kRenderFxNoDissipation$0"
		],
		"description": "14"
	},
	"kRenderFxNone": {
		"prefix": "kRenderFxNone",
		"body": [
			"kRenderFxNone$0"
		],
		"description": "0"
	},
	"kRenderFxPulseFast": {
		"prefix": "kRenderFxPulseFast",
		"body": [
			"kRenderFxPulseFast$0"
		],
		"description": "2"
	},
	"kRenderFxPulseFastWide": {
		"prefix": "kRenderFxPulseFastWide",
		"body": [
			"kRenderFxPulseFastWide$0"
		],
		"description": "4"
	},
	"kRenderFxPulseFastWider": {
		"prefix": "kRenderFxPulseFastWider",
		"body": [
			"kRenderFxPulseFastWider$0"
		],
		"description": "24"
	},
	"kRenderFxPulseSlow": {
		"prefix": "kRenderFxPulseSlow",
		"body": [
			"kRenderFxPulseSlow$0"
		],
		"description": "1"
	},
	"kRenderFxPulseSlowWide": {
		"prefix": "kRenderFxPulseSlowWide",
		"body": [
			"kRenderFxPulseSlowWide$0"
		],
		"description": "3"
	},
	"kRenderFxRagdoll": {
		"prefix": "kRenderFxRagdoll",
		"body": [
			"kRenderFxRagdoll$0"
		],
		"description": "23"
	},
	"kRenderFxSolidFast": {
		"prefix": "kRenderFxSolidFast",
		"body": [
			"kRenderFxSolidFast$0"
		],
		"description": "8"
	},
	"kRenderFxSolidSlow": {
		"prefix": "kRenderFxSolidSlow",
		"body": [
			"kRenderFxSolidSlow$0"
		],
		"description": "7"
	},
	"kRenderFxSpotlight": {
		"prefix": "kRenderFxSpotlight",
		"body": [
			"kRenderFxSpotlight$0"
		],
		"description": "22"
	},
	"kRenderFxStrobeFast": {
		"prefix": "kRenderFxStrobeFast",
		"body": [
			"kRenderFxStrobeFast$0"
		],
		"description": "10"
	},
	"kRenderFxStrobeFaster": {
		"prefix": "kRenderFxStrobeFaster",
		"body": [
			"kRenderFxStrobeFaster$0"
		],
		"description": "11"
	},
	"kRenderFxStrobeSlow": {
		"prefix": "kRenderFxStrobeSlow",
		"body": [
			"kRenderFxStrobeSlow$0"
		],
		"description": "9"
	},
	"kRenderGlow": {
		"prefix": "kRenderGlow",
		"body": [
			"kRenderGlow$0"
		],
		"description": "3"
	},
	"kRenderModeCount": {
		"prefix": "kRenderModeCount",
		"body": [
			"kRenderModeCount$0"
		],
		"description": "11"
	},
	"kRenderNone": {
		"prefix": "kRenderNone",
		"body": [
			"kRenderNone$0"
		],
		"description": "10"
	},
	"kRenderNormal": {
		"prefix": "kRenderNormal",
		"body": [
			"kRenderNormal$0"
		],
		"description": "0"
	},
	"kRenderTransAdd": {
		"prefix": "kRenderTransAdd",
		"body": [
			"kRenderTransAdd$0"
		],
		"description": "5"
	},
	"kRenderTransAddFrameBlend": {
		"prefix": "kRenderTransAddFrameBlend",
		"body": [
			"kRenderTransAddFrameBlend$0"
		],
		"description": "7"
	},
	"kRenderTransAlpha": {
		"prefix": "kRenderTransAlpha",
		"body": [
			"kRenderTransAlpha$0"
		],
		"description": "4"
	},
	"kRenderTransAlphaAdd": {
		"prefix": "kRenderTransAlphaAdd",
		"body": [
			"kRenderTransAlphaAdd$0"
		],
		"description": "8"
	},
	"kRenderTransColor": {
		"prefix": "kRenderTransColor",
		"body": [
			"kRenderTransColor$0"
		],
		"description": "1"
	},
	"kRenderTransTexture": {
		"prefix": "kRenderTransTexture",
		"body": [
			"kRenderTransTexture$0"
		],
		"description": "2"
	},
	"kRenderWorldGlow": {
		"prefix": "kRenderWorldGlow",
		"body": [
			"kRenderWorldGlow$0"
		],
		"description": "9"
	},
	"int len()": {
		"prefix": "len",
		"body": [
			"len()$0"
		],
		"description": "Returns the length of the string, ie. the number of characters it comprises."
	},
	"log(num x)": {
		"prefix": "log",
		"body": [
			"log(${1:num x})$0"
		],
		"description": "Returns log_e(x) = ln(x)"
	},
	"log10(num x)": {
		"prefix": "log10",
		"body": [
			"log10(${1:num x})$0"
		],
		"description": "Returns log_10(x)"
	},
	"lstrip(string str)": {
		"prefix": "lstrip",
		"body": [
			"lstrip(${1:string str})$0"
		],
		"description": "Removes whitespace at the beginning of the given string"
	},
	"m_bindNamesStack": {
		"prefix": "m_bindNamesStack",
		"body": [
			"m_bindNamesStack$0"
		],
		"description": ""
	},
	"m_fixupSet": {
		"prefix": "m_fixupSet",
		"body": [
			"m_fixupSet$0"
		],
		"description": ""
	},
	"m_log": {
		"prefix": "m_log",
		"body": [
			"m_log$0"
		],
		"description": ""
	},
	"m_logIndent": {
		"prefix": "m_logIndent",
		"body": [
			"m_logIndent$0"
		],
		"description": ""
	},
	"m_targetTable": {
		"prefix": "m_targetTable",
		"body": [
			"m_targetTable$0"
		],
		"description": ""
	},
	"bool match(str)": {
		"prefix": "match",
		"body": [
			"match(${1:str})$0"
		],
		"description": "Returns a true if the regular expression matches the string str, otherwise returns false."
	},
	"coroutine newthread(function threadfunc)": {
		"prefix": "newthread",
		"body": [
			"newthread(${1:function threadfunc})$0"
		],
		"description": "Creates a new cooperative thread object(coroutine) and returns it ."
	},
	"pow(num x, num y)": {
		"prefix": "pow",
		"body": [
			"pow(${1:num x}, ${2:num y})$0"
		],
		"description": "Returns x^y"
	},
	"prefix": {
		"prefix": "prefix",
		"body": [
			"prefix$0"
		],
		"description": "Prefix that functions should have to be added into the chain array. Set by the constructor."
	},
	"print(string message)": {
		"prefix": "print",
		"body": [
			"print(${1:string message})$0"
		],
		"description": "Prints the given parameter but with no newline unlike printl()"
	},
	"print_indent": {
		"prefix": "print_indent",
		"body": [
			"print_indent$0"
		],
		"description": "0. Spaces to indent prints by, except ones from realPrint."
	},
	"void printf(string format, args...)": {
		"prefix": "printf",
		"body": [
			"printf(${1:string format}, ${2:args...})$0"
		],
		"description": "Prints message to console with C style formatting. The line feed is not included."
	},
	"void printl(string message)": {
		"prefix": "printl",
		"body": [
			"printl(${1:string message})$0"
		],
		"description": "Prints message to console with a line feed after."
	},
	"rand()": {
		"prefix": "rand",
		"body": [
			"rand()$0"
		],
		"description": "Returns a random integer with 0 <= rand() <= RAND_MAX"
	},
	"blob readblob(int numberOfBytes)": {
		"prefix": "readblob",
		"body": [
			"readblob(${1:int numberOfBytes})$0"
		],
		"description": ""
	},
	"any readn(char dataType)": {
		"prefix": "readn",
		"body": [
			"readn(${1:char dataType})$0"
		],
		"description": ""
	},
	"void realPrint(string message)": {
		"prefix": "realPrint",
		"body": [
			"realPrint(${1:string message})$0"
		],
		"description": "Identical to print. print seems to be a wrapper for this."
	},
	"regexp()": {
		"prefix": "regexp",
		"body": [
			"regexp()$0"
		],
		"description": ""
	},
	"void resize(int newSize)": {
		"prefix": "resize",
		"body": [
			"resize(${1:int newSize})$0"
		],
		"description": ""
	},
	"array resurrectunreachable()": {
		"prefix": "resurrectunreachable",
		"body": [
			"resurrectunreachable()$0"
		],
		"description": "Runs the garbage collector and returns an array containing all unreachable object found. If no unreachable object is found, null is returned instead. This function is meant to help debugging reference cycles. This function only works on garbage collector builds."
	},
	"rstrip(string str)": {
		"prefix": "rstrip",
		"body": [
			"rstrip(${1:string str})$0"
		],
		"description": "Removes whitespace at the end of the given string"
	},
	"scope": {
		"prefix": "scope",
		"body": [
			"scope$0"
		],
		"description": "If set, seek functions in this scope instead. Set by the constructor."
	},
	"table search(str, [start])": {
		"prefix": "search",
		"body": [
			"search(${1:str}, ${2:[start]})$0"
		],
		"description": "Returns a table containing two indexes (\"begin\" and \"end\") of the first match of the regular expression in the string st, otherwise if no match occurs returns null. The search starts from the index start of the string, if start is omitted the search starts from the beginning of the string."
	},
	"int seek(int offset, int offsetBasis)": {
		"prefix": "seek",
		"body": [
			"seek(${1:int offset}, ${2:int offsetBasis})$0"
		],
		"description": ""
	},
	"table setconsttable(table consttable)": {
		"prefix": "setconsttable",
		"body": [
			"setconsttable(${1:table consttable})$0"
		],
		"description": "Sets the const table of the VM which also returns the previous const table."
	},
	"void setdebughook(function hook_func)": {
		"prefix": "setdebughook",
		"body": [
			"setdebughook(${1:function hook_func})$0"
		],
		"description": "Sets the debug hook."
	},
	"void seterrorhandler(function func)": {
		"prefix": "seterrorhandler",
		"body": [
			"seterrorhandler(${1:function func})$0"
		],
		"description": "Sets the runtime error handler."
	},
	"table setroottable(table roottable)": {
		"prefix": "setroottable",
		"body": [
			"setroottable(${1:table roottable})$0"
		],
		"description": "Sets the root table of the VM which also returns the previous root table."
	},
	"sin(num x)": {
		"prefix": "sin",
		"body": [
			"sin(${1:num x})$0"
		],
		"description": "Returns sin(x)"
	},
	"string slice(int startIndex, int endIndex = null)": {
		"prefix": "slice",
		"body": [
			"slice(${1:int startIndex}, ${2:int endIndex = null})$0"
		],
		"description": "Creates a sub-string from a string. Copies characters from startIndex to endIndex. If endIndex is not specified, copies until the last character. If the provided end index is beyond the string, an exception is thrown."
	},
	"string split(string str, string separator, bool skipempty = false)": {
		"prefix": "split",
		"body": [
			"split(${1:string str}, ${2:string separator}, ${3:bool skipempty = false})$0"
		],
		"description": "Returns an array of strings split at each point where a separator character occurs in str. The separator is not returned as part of any array element. the parameter separators is a string that specifies the characters as to be used for the splitting. If skipempty is true, empty strings are not added to array."
	},
	"sqrt(num x)": {
		"prefix": "sqrt",
		"body": [
			"sqrt(${1:num x})$0"
		],
		"description": "Returns the square root of x"
	},
	"srand(num seed)": {
		"prefix": "srand",
		"body": [
			"srand(${1:num seed})$0"
		],
		"description": "Sets the starting point for generating a series of pseudorandom integers"
	},
	"bool startswith(string str, string cmp)": {
		"prefix": "startswith",
		"body": [
			"startswith(${1:string str}, ${2:string cmp})$0"
		],
		"description": "Returns true if the beginning of the string matches the comparison string."
	},
	"strip(string str)": {
		"prefix": "strip",
		"body": [
			"strip(${1:string str})$0"
		],
		"description": "Removes whitespace at the beginning and end of the given string"
	},
	"subexpcount()": {
		"prefix": "subexpcount",
		"body": [
			"subexpcount()$0"
		],
		"description": ""
	},
	"void suspend(any ret)": {
		"prefix": "suspend",
		"body": [
			"suspend(${1:any ret})$0"
		],
		"description": "Suspends the coroutine that called this function."
	},
	"void swap2()": {
		"prefix": "swap2",
		"body": [
			"swap2()$0"
		],
		"description": ""
	},
	"void swap4()": {
		"prefix": "swap4",
		"body": [
			"swap4()$0"
		],
		"description": ""
	},
	"float swapfloat(float value)": {
		"prefix": "swapfloat",
		"body": [
			"swapfloat(${1:float value})$0"
		],
		"description": "Reverse byte order of the four bytes"
	},
	"tan(num x)": {
		"prefix": "tan",
		"body": [
			"tan(${1:num x})$0"
		],
		"description": "Returns tan(x)"
	},
	"int tell()": {
		"prefix": "tell",
		"body": [
			"tell()$0"
		],
		"description": ""
	},
	"float tofloat()": {
		"prefix": "tofloat",
		"body": [
			"tofloat()$0"
		],
		"description": "Returns float value represented by the string. Must only contain numeric characters and/or plus and minus symbols. An exception is thrown otherwise."
	},
	"int tointeger()": {
		"prefix": "tointeger",
		"body": [
			"tointeger()$0"
		],
		"description": "Returns integer value represented by the string. Must only contain numeric characters. An exception is thrown otherwise. Hexadecimal notation is supported (i.e. 0xFF). If a hexadecimal string contains more than 10 characters, including the 0x, returns -1."
	},
	"string tolower()": {
		"prefix": "tolower",
		"body": [
			"tolower()$0"
		],
		"description": "Returns a new string with all upper-case characters converted to lower-case."
	},
	"string tostring()": {
		"prefix": "tostring",
		"body": [
			"tostring()$0"
		],
		"description": "Returns a human-readable string."
	},
	"string toupper()": {
		"prefix": "toupper",
		"body": [
			"toupper()$0"
		],
		"description": "Returns a new string with all lower-case characters converted to upper-case."
	},
	"type(var)": {
		"prefix": "type",
		"body": [
			"type(${1:var})$0"
		],
		"description": "Returns var._typeof(), i.e. the type of the given parameter as a string"
	},
	"void writeblob (blob blob)": {
		"prefix": "",
		"body": [
			"(${1:blob blob})$0"
		],
		"description": ""
	},
	"void writen(num value, char dataType)": {
		"prefix": "writen",
		"body": [
			"writen(${1:num value}, ${2:char dataType})$0"
		],
		"description": ""
	}
	///// END TF2 VScript Snippets /////
}