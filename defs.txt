__FILE__
__FILE__
File name of the currently executing script

__LINE__
__LINE__
Line number of the currently executing code

Constants
Constants
Enumerations for various function arguments or netprops.

Documentation
Documentation
Contains the printed strings from the script_help command.

GameEventCallbacks
GameEventCallbacks
Table of registered game event callbacks.

print_indent
print_indent
0. Spaces to indent prints by, except ones from realPrint.

_PublishedHelp
_PublishedHelp


ScriptEventCallbacks
ScriptEventCallbacks
Table of registered script event callbacks.

ScriptHookCallbacks
ScriptHookCallbacks
Table of registered script hook callbacks.

ScriptDebugDefaultWatchColor
ScriptDebugDefaultWatchColor
[0, 192, 0]

ScriptDebugDrawTextEnabled
ScriptDebugDrawTextEnabled
true

ScriptDebugDrawWatchesEnabled
ScriptDebugDrawWatchesEnabled
true

ScriptDebugInDebugDraw
ScriptDebugInDebugDraw
false

ScriptDebugText
ScriptDebugText


ScriptDebugTextIndent
ScriptDebugTextIndent
0

ScriptDebugTextFilters
ScriptDebugTextFilters


ScriptDebugTraces
ScriptDebugTraces


ScriptDebugTraceAllOn
ScriptDebugTraceAllOn
false

ScriptDebugWatches
ScriptDebugWatches


_charsize_
_charsize_
1

_floatsize_
_floatsize_
4

_intsize_
_intsize_
32-bit: 4, 64-bit: 8

_version_
_version_
"Squirrel 3.2 stable"

_versionnumber_
_versionnumber_
320

RAND_MAX
RAND_MAX
Windows: 32768, Linux: 2147483647

PI
PI
3.14159

__KeyValueFromFloat
bool __KeyValueFromFloat(string key, float value)
Behaves the same as KeyValueFromFloat, use that instead.

__KeyValueFromInt
bool __KeyValueFromInt(string key, int value)
Behaves the same as KeyValueFromInt, use that instead.

__KeyValueFromString
bool __KeyValueFromString(string key, string value)
Behaves the same as KeyValueFromString, use that instead.

__KeyValueFromVector
bool __KeyValueFromVector(string key, Vector value)
Behaves the same as KeyValueFromVector, use that instead.

AcceptInput
bool AcceptInput(string input, string param, handle activator, handle caller)
caller) 	Generate a synchronous I/O event. Unlike EntFireByHandle, this is processed immediately. Returns false if input is a null/empty string, or if the input wasn't handled.

AddEFlags
void AddEFlags(int flags)
Adds the supplied flags to the Entity Flags in the entity. (m_iEFlags datamap). See Constants.FEntityEFlags.

AddFlag
void AddFlag(int flags)
Adds the supplied flags to another separate player-related entity flags system in the entity. (m_fFlags datamap). See Constants.FPlayer.

AddSolidFlags
void AddSolidFlags(int flags)
Adds the supplied flags to the Solid Flags in the entity. (m_Collision.m_usSolidFlags datamap). See Constants.FSolid.

ApplyAbsVelocityImpulse
void ApplyAbsVelocityImpulse(Vector impulse)
Apply a Velocity Impulse as a world space impulse vector. Works for most physics-based objects including dropped weapons and even dropped Sandviches.

ApplyLocalAngularVelocityImpulse
void ApplyLocalAngularVelocityImpulse(Vector impulse)
Apply an Angular Velocity Impulse in entity local space. The direction of the input vector is the rotation axis, and the length is the magnitude of the impulse.

BecomeRagdollOnClient
bool BecomeRagdollOnClient(Vector impulse)
Acts like the BecomeRagdoll input, with the required impulse value applied as a force on the ragdoll. Does NOT spawn a prop_ragdoll or any other entity.

ClearFlags
void ClearFlags()
Sets the player-related entity flags to 0 on an entity, clearing them.

ClearSolidFlags
void ClearSolidFlags()
Sets Solid Flags to 0 on an entity, clearing them.

ConnectOutput
void ConnectOutput(string output, string function)
Adds an I/O connection that will call the named function when the specified output fires.

Destroy
void Destroy()
Removes the entity. Simply calls UTIL_Remove.

DisableDraw
void DisableDraw()
Disable drawing and transmitting the entity to clients. (adds EF_NODRAW)

DisconnectOutput
void DisconnectOutput(string output, string function)
Removes a connected script function from an I/O event.

DispatchSpawn
void DispatchSpawn()
Alternative dispatch spawn, same as the one in CEntities, for convenience.

EmitSound
void EmitSound(string soundname)
Plays a sound from this entity.

EnableDraw
void EnableDraw()
Enable drawing and transmitting the entity to clients. (removes EF_NODRAW)

entindex
int entindex()
Returns the entity index.

EyeAngles
QAngle EyeAngles()
Returns the entity's eye angles. Acts like GetAbsAngles if the entity does not support it.

EyePosition
Vector EyePosition()
Get vector to eye position - absolute coords. Acts like GetOrigin if the entity does not support it.

FirstMoveChild
handle FirstMoveChild()
Returns the most-recent entity parented to this one.

GetAbsAngles
QAngle GetAbsAngles()
Get entity pitch, yaw, roll as QAngles

GetAbsVelocity
Vector GetAbsVelocity()
Returns the current absolute velocity of the entity

GetAngles
Vector GetAngles()
Get entity pitch, yaw, roll as a Vector

GetAngularVelocity
Vector GetAngularVelocity()
Get the local angular velocity - returns a vector of pitch, yaw, and roll

GetBaseVelocity
Vector GetBaseVelocity()
Returns any constant velocity currently being imparted onto the entity. This includes being pushed by effects like trigger_push and players standing on moving geometry like elevators. Should always returns a zero vector if the entity is not affected by any movement effects.

GetBoundingMaxs
Vector GetBoundingMaxs()
Get a vector containing max bounds, centered on object

GetBoundingMaxsOriented
Vector GetBoundingMaxsOriented()
Get a vector containing max bounds, centered on object, taking the object's orientation into account

GetBoundingMins
Vector GetBoundingMins()
Get a vector containing min bounds, centered on object

GetBoundingMinsOriented
Vector GetBoundingMinsOriented()
Get a vector containing min bounds, centered on object, taking the object's orientation into account

GetCenter
Vector GetCenter()
Get vector to center of object - absolute coords

GetClassname
string GetClassname()


GetCollisionGroup
GetCollisionGroup()
Gets the current collision group of the entity.

GetEFlags
int GetEFlags()


GetFlags
int GetFlags()


GetEntityHandle
GetEntityHandle()
Get the entity as an EHANDLE

GetEntityIndex
int GetEntityIndex()


GetForwardVector
Vector GetForwardVector()
Get the forward vector of the entity

GetFriction
float GetFriction()
Get PLAYER friction, ignored for objects

GetGravity
float GetGravity()


GetHealth
int GetHealth()


GetLeftVector
Vector GetLeftVector()
Get the right vector of the entity. This is purely for compatibility.

GetLocalAngles
QAngle GetLocalAngles()


GetLocalOrigin
Vector GetLocalOrigin()


GetLocalVelocity
Vector GetLocalVelocity()
Get Entity relative velocity

GetMaxHealth
int GetMaxHealth()


GetModelKeyValues
handle GetModelKeyValues()
Get a KeyValue class instance on this entity's model

GetModelName
string GetModelName()
Returns the name of the model

GetMoveParent
handle GetMoveParent()
If in hierarchy, retrieves the entity's parent

GetMoveType
int GetMoveType()


GetName
string GetName()


GetOrigin
Vector GetOrigin()
This is GetAbsOrigin with a funny script name for some reason. Not changing it for legacy compat though.

GetOwner
handle GetOwner()
Gets this entity's owner

GetPhysAngularVelocity
Vector GetPhysAngularVelocity()


GetPhysVelocity
Vector GetPhysVelocity()


GetPreTemplateName
string GetPreTemplateName()
Get the entity name stripped of template unique decoration

GetRightVector
Vector GetRightVector()
Get the right vector of the entity

GetRootMoveParent
handle GetRootMoveParent()
If in hierarchy, walks up the hierarchy to find the root parent

GetScriptId
string GetScriptId()
Retrieve the unique identifier used to refer to the entity within the scripting system.

GetScriptScope
handle GetScriptScope()
Retrieve the script-side data associated with an entity

GetScriptThinkFunc
string GetScriptThinkFunc()
Retrieve the name of the current script think func

GetSolid
int GetSolid()


GetSoundDuration
float GetSoundDuration(string soundname, string actormodelname)
Returns float duration of the sound. Actor model name is optional and can be left null.

GetTeam
int GetTeam()


GetUpVector
Vector GetUpVector()
Get the up vector of the entity

GetVelocity
Vector GetVelocity()
Deprecated, use GetAbsVelocity isntead.

GetWaterLevel
int GetWaterLevel()
This function tells you how much of the entity is underwater. It returns a value of 0 if not underwater, 1 if the feet are (touching water brush), 2 if the waist is (center of the hull of the entity), and 3 if the head is (eyes position).

GetWaterType
int GetWaterType()
It returns the type of water the entity is currently submerged in. 32 for water and 16 for slime.

IsEFlagSet
bool IsEFlagSet(int eflag)


IsPlayer
bool IsPlayer()
Checks whether the entity is a player or not.

IsSolid
bool IsSolid()


IsSolidFlagSet
bool IsSolidFlagSet(int solidflag)


IsValid
bool IsValid()
Checks whether the entity still exists. Useful when storing entity handles and needing to check if the entity was not deleted.

KeyValueFromFloat
bool KeyValueFromFloat(string key, float value)
Executes KeyValue with a float

KeyValueFromInt
bool KeyValueFromInt(string key, int value)
Executes KeyValue with an int

KeyValueFromString
bool KeyValueFromString(string key, string value)
Executes KeyValue with a string

KeyValueFromVector
bool KeyValueFromVector(string key, Vector value)
Executes KeyValue with a vector

Kill
void Kill()
Removes the entity. Equivalent of firing the Kill I/O input, but instantaneous.

LocalEyeAngles
handle LocalEyeAngles()
Returns the entity's local eye angles

NextMovePeer
handle NextMovePeer()
Returns the next entity parented with the entity. Intended for iteration use with FirstMoveChild().

PrecacheModel
void PrecacheModel(string modelname)
Precache a model

PrecacheScriptSound
void PrecacheScriptSound(string soundscript)
Precache a sound script. Same as PrecacheSoundScript.

PrecacheSoundScript
void PrecacheSoundScript(string soundscript)
Precache a sound script. Same as PrecacheScriptSound.

RemoveEFlags
void RemoveEFlags(int eflags)


RemoveFlag
void RemoveFlag(int flags)


RemoveSolidFlags
void RemoveSolidFlags(int solidflags)


SetAbsAngles
void SetAbsAngles(QAngle angles)
Set entity pitch, yaw, roll as QAngles

SetAbsVelocity
void SetAbsVelocity(Vector velocity)
Sets the current absolute velocity of the entity

SetAbsOrigin
void SetAbsOrigin(Vector origin)
Sets the absolute origin of the entity.

SetAngles
void SetAngles(float pitch, float yaw, float roll)
Set entity angles. Deprecated, use SetAbsAngles instead.

SetAngularVelocity
void SetAngularVelocity(float pitch, float yaw, float roll)
Set the local angular velocity.

SetCollisionGroup
void SetCollisionGroup(int collision_group)
Set the current collision group of the entity. See Constants.ECollisionGroup

SetDrawEnabled
void SetDrawEnabled(bool toggle)
Enables drawing if you pass true, disables drawing if you pass false.

SetEFlags
void SetEFlags(int eflags)


SetForwardVector
void SetForwardVector(Vector forward)
Set the orientation of the entity to have this forward vector

SetFriction
void SetFriction(float friction)


SetGravity
void SetGravity(float gravity)


SetHealth
void SetHealth(int health)


SetLocalAngles
void SetLocalAngles(QAngle angles)


SetLocalOrigin
void SetLocalOrigin(Vector origin)


SetMaxHealth
void SetMaxHealth(int health)
Sets the maximum health this entity can have. Does not update the current health, so SetHealth should be used afterwards.

SetModel
void SetModel(string model_name)
Set a model for this entity

SetMoveType
void SetMoveType(EMoveType movetype, EMoveCollide movecollide)


SetOrigin
void SetOrigin(Vector origin)
Deprecated, use SetAbsOrigin instead.

SetOwner
void SetOwner(handle entity)
Sets this entity's owner

SetPhysAngularVelocity
void SetPhysAngularVelocity(Vector angular_velocity)


SetPhysVelocity
void SetPhysVelocity(Vector velocity)


SetSize
void SetSize(Vector mins, Vector maxs)
Sets the bounding box's scale for this entity.

SetSolid
SetSolid(int solid)


SetSolidFlags
SetSolidFlags solid_flags(int)


SetTeam
void SetTeam(int team)
Sets entity team.

SetVelocity
void SetVelocity(Vector velocity)
Deprecated, use SetAbsVelocity instead.

SetWaterLevel
SetWaterLevel(int water_level)
This sets how much of the entity is underwater. Setting it to 0 means it is not underwater, 1 if the feet are (touching water brush), 2 if the waist is (center of the hull of the entity), and 3 if the head is (eyes position).

SetWaterType
SetWaterType(int water_type)
Set the type of water the entity is currently submerged in. Generic values to use are 32 for water and 16 for slime.

StopSound
void StopSound(string sound_name)
Stops a sound on this entity.

TakeDamage
void TakeDamage(float flDamage, Constants.FDmgType nDamageType, handle hAttacker)
Deals damage to the entity.

TakeDamageEx
void TakeDamageEx(handle hInflictor, handle hAttacker, handle hWeapon, Vector vecDamageForce, Vector vecDamagePosition, float flDamage, Constants.FDmgType nDamageType)
Extended version of TakeDamage.

TakeDamageCustom
void TakeDamageCustom(handle hInflictor, handle hAttacker, handle hWeapon, Vector vecDamageForce, Vector vecDamagePosition, float flDamage, Constants.FDmgType nDamageType, Constants.ETFDmgCustom nCustomDamageType)
Extended version of TakeDamageEx that can apply a custom damage type.

Teleport
void Teleport(bool use_origin, Vector origin, bool use_angles, QAngle angles, bool use_velocity, Vector velocity)
Teleports this entity. For this function, set the bools to false if you want that entity's property unchanged. (do not use null arguments!)

TerminateScriptScope
void TerminateScriptScope()
Clear the current script scope for this entity

ToggleFlag
ToggleFlag(int flags)


ValidateScriptScope
bool ValidateScriptScope()
Ensure that an entity's script scope has been created. In practice, this always returns true unless the script VM is disabled in launch options.

Input<name>
bool Input<name>()
Called when the entity receives an input from the I/O system that matches the function's name. The name of the function needs to be Input followed by the name of the input. E.g. for the FireUser1 input, it would be InputFireUser1 When the function is called, Script Handles of the activator and caller entities are accessible to the function under the variables activator and caller. The function needs to return a boolean value; Returning true processes the input, while false cancels it.

OnGameEvent_<name>
void OnGameEvent_<name>(table params)
Called each time a game event with the specified name occurs. The name of the function needs to be OnGameEvent_ followed by the name of the game event. E.g. for the player_spawn input, it would be OnGameEvent_player_spawn.

Precache
void Precache()
Called after the script executes. Can be used to call precache functions for models and sounds on map load.

ConnectOutputs
void ConnectOutputs(handle scope)
Global function called after an entity with an script assigned spawns (i.e. vscripts keyvalue is not blank). Unlike OnPostSpawn, this is called immediately and therefore on map respawn, some entities may not exist during this point.

OnPostSpawn
void OnPostSpawn()
Called after the entity spawns, which is after scripts and players have loaded. This could be used to have an entity register itself with a master script, or adjusting the entity parameters in a programmatic way.

OnTakeDamage
void OnTakeDamage(handle params)
Called each time an entity takes damage. The script can modify the table entries not suffixed with const, and these will be sent back to the game code

DispatchAnimEvents
void DispatchAnimEvents(handle entity)
Dispatch animation events to a CBaseAnimating entity.

FindBodygroupByName
int FindBodygroupByName(string name)
Find a bodygroup ID by name. Returns -1 if the bodygroup does not exist.

GetAttachmentAngles
QAngle GetAttachmentAngles(int ID)
Get an attachment's angles as a QAngle, by ID.

GetAttachmentBone
int GetAttachmentBone(int ID)
Get an attachment's parent bone index by ID.

GetAttachmentOrigin
Vector GetAttachmentOrigin(int ID)
Get an attachment's origin as a Vector, by ID.

GetBodygroup
int GetBodygroup(int ID)
Get the bodygroup value by bodygroup ID.

GetBodygroupName
string GetBodygroupName(int ID)
Get the bodygroup's name by ID.

GetBodygroupPartName
string GetBodygroupPartName(int group, int part)
Get the bodygroup's name by group and part.

GetBoneAngles
QAngle GetBoneAngles(int ID)
Get the bone's angles as a QAngle, by ID.

GetBoneOrigin
Vector GetBoneOrigin(int ID)
Get the bone's origin Vector by ID.

GetCycle
float GetCycle()
Gets the model's current animation cycle rate.

GetModelScale
float GetModelScale()
Get the model's scale.

GetPlaybackRate
float GetPlaybackRate()
Get the current animation's playback rate.

GetSequence
int GetSequence()
Get the current-playing sequence's ID.

GetSequenceActivityName
string GetSequenceActivityName(int ID)
Get the activity name for a sequence by sequence ID.

GetSequenceDuration
float GetSequenceDuration(int ID)
Get a sequence duration in seconds by sequence ID.

GetSequenceName
string GetSequenceName(int ID)
Get a sequence name by sequence ID. Returns "Not Found!" if ID is -1, "Unknown" if the sequence doesn't exist or "No model!" if no model is assigned.

GetSkin
int GetSkin()
Gets the current skin index.

IsSequenceFinished
bool IsSequenceFinished()
Ask whether the main sequence is done playing

LookupActivity
int LookupActivity(string activity)
Get the named activity index. Returns -1 if the activity does not exist.

LookupAttachment
int LookupAttachment(string name)
Get the named attachment index. Returns 0 if the attachment does not exist.

LookupBone
int LookupBone(string bone)
Get the named bone index. Returns -1 if the bone does not exist.

LookupPoseParameter
int LookupPoseParameter(string name)
Gets the pose parameter's index. Returns -1 if the pose parameter does not exist.

LookupSequence
int LookupSequence(string name)
Looks up a sequence by names of sequences or activities. Returns -1 if the sequence does not exist.

ResetSequence
void ResetSequence(int ID)
Reset a sequence by sequence ID. If the ID is different than the current sequence, switch to the new sequence.

SetBodygroup
void SetBodygroup(int ID, int value)
Set the bodygroup by ID.

SetCycle
void SetCycle(float cycle)
Sets the model's current animation cycle from 0 to 1.

SetModelSimple
void SetModelSimple(string model_name)
Set a model for this entity. Matches easier behaviour of the SetModel input, automatically precaches, maintains sequence/cycle if possible.

SetModelScale
void SetModelScale(float scale, float change_duration)
Changes a model's scale over time. Set the change duration to 0.0 to change the scale instantly.

SetPlaybackRate
void SetPlaybackRate(float rate)
Set the current animation's playback rate.

SetPoseParameter
float SetPoseParameter(int ID, float value)
Sets a pose parameter value. Returns the effective value after clamping or looping.

SetSequence
void SetSequence(int ID)
Plays a sequence by sequence ID.

SetSkin
void SetSkin(int index)
Sets the model's skin.

StopAnimation
void StopAnimation()
Stop the current animation (same as SetPlaybackRate 0.0)

StudioFrameAdvance
void StudioFrameAdvance()
Advance animation frame to some time in the future with an automatically calculated interval

StudioFrameAdvanceManual
void StudioFrameAdvanceManual(float dt)
Advance animation frame to some time in the future with a manual interval

CanBeSelected
bool CanBeSelected()
Can this weapon be selected

Clip1
int Clip1()
Current ammo in clip1

Clip2
int Clip2()
Current ammo in clip2

GetDefaultClip1
int GetDefaultClip1()
Default size of clip1

GetDefaultClip2
int GetDefaultClip2()
Default size of clip2

GetMaxClip1
int GetMaxClip1()
Max size of clip1

GetMaxClip2
int GetMaxClip2()
Max size of clip2

GetName
string GetName()
Gets the weapon's internal name (not the targetname!)

GetPosition
int GetPosition()
Gets the weapon's current position

GetPrimaryAmmoCount
int GetPrimaryAmmoCount()
Current primary ammo count if no clip is used or to give a player if they pick up this weapon legacy style (not TF)

GetPrimaryAmmoType
int GetPrimaryAmmoType()
Returns the primary ammo type

GetPrintName
string GetPrintName()
Gets the weapon's print name

GetSecondaryAmmoCount
int GetSecondaryAmmoCount()
Current secondary ammo count if no clip is used or to give a player if they pick up this weapon legacy style (not TF)

GetSecondaryAmmoType
int GetSecondaryAmmoType()
Returns the secondary ammo type

GetSlot
int GetSlot()
Gets the weapon's current slot

GetSubType
int GetSubType()
Get the weapon subtype

GetWeaponFlags
int GetWeaponFlags()
Get the weapon flags

GetWeight
int GetWeight()
Get the weapon weighting/importance

HasAnyAmmo
bool HasAnyAmmo()
Do we have any ammo?

HasPrimaryAmmo
bool HasPrimaryAmmo()
Do we have any primary ammo?

HasSecondaryAmmo
bool HasSecondaryAmmo()
Do we have any secondary ammo?

IsAllowedToSwitch
bool IsAllowedToSwitch()
Are we allowed to switch to this weapon?

IsMeleeWeapon
bool IsMeleeWeapon()
Returns whether this is a melee weapon

PrimaryAttack
void PrimaryAttack()
Force a primary attack

SecondaryAttack
void SecondaryAttack()
Force a secondary attack

SetClip1
void SetClip1(int)
Set current ammo in clip1

SetClip2
void SetClip2(int)
Set current ammo in clip2

SetCustomViewModel
void SetCustomViewModel(string model_name)
Sets a custom view model for this weapon by model name

SetCustomViewModelModelIndex
void SetCustomViewModelModelIndex(int model_index)
Sets a custom view model for this weapon by modelindex

SetSubType
void SetSubType(int subtype)
Set the weapon subtype

UsesClipsForAmmo1
bool UsesClipsForAmmo1()
Do we use clips for ammo 1?

UsesClipsForAmmo2
bool UsesClipsForAmmo2()
Do we use clips for ammo 2?

UsesPrimaryAmmo
bool UsesPrimaryAmmo()
Do we use primary ammo?

UsesSecondaryAmmo
bool UsesSecondaryAmmo()
Do we use secondary ammo?

VisibleInWeaponSelection
bool VisibleInWeaponSelection()
Is this weapon visible in weapon selection

PlayScene
float PlayScene(string scene_file, float delay)
Play the specified .vcd file, causing the related characters to speak and subtitles to play.

GetLastKnownArea
handle GetLastKnownArea()
Return the last nav area occupied, NULL if unknown. See CTFNavArea.

GetForceLocalDraw
bool GetForceLocalDraw()
Whether the player is being forced by SetForceLocalDraw to be drawn.

GetPlayerMaxs
Vector GetPlayerMaxs()
Get a vector containing max bounds of the player in local space. The player's model scale will affect the result.

GetPlayerMins
Vector GetPlayerMins()
Get a vector containing min bounds of the player in local space. The player's model scale will affect the result.

GetScriptOverlayMaterial
string GetScriptOverlayMaterial()
Gets the current overlay material set by SetScriptOverlayMaterial.

IsNoclipping
bool IsNoclipping()
Returns true if the player is in noclip mode.

SetForceLocalDraw
void SetForceLocalDraw(bool forceDraw)
Forces the player to be drawn as if they were in thirdperson.

SetScriptOverlayMaterial
void SetScriptOverlayMaterial(string material)
Sets the overlay material that can't be overriden by other overlays. E.g. Jarate.

SnapEyeAngles
void SnapEyeAngles(QAngle angles)
Snap the player's eye angles to this.

ViewPunch
void ViewPunch(QAngle angleOffset)
Ow! Punches the player's view

ViewPunchReset
void ViewPunchReset(float tolerance)
Reset's the player's view punch if the offset stays below the given tolerance.

AddAttribute
void AddAttribute(string name, float value, float duration)
Add an attribute to the entity. Set duration to -1 for the attribute to be applied forever.

GetAttribute
float GetAttribute(string name, float default_value)
Get an attribute float from the entity. If the attribute does not exist, returns default_value.

RemoveAttribute
void RemoveAttribute(string name)
Remove an attribute to the entity.

ReapplyProvision
void ReapplyProvision()
Relinks attributes to provisioners, e.g. calling this on a weapon will add it's attributes to the player.

AddCond
void AddCond(ETFCond cond)


AddCondEx
void AddCondEx(ETFCond cond, float duration, handle provider)


AddCurrency
void AddCurrency(int amount)
Kaching! Give the player some cash for game modes with upgrades, ie. MvM. The new value is bounded between 0-30000.

AddCustomAttribute
void AddCustomAttribute(string name, float value, float duration)
Add a custom attribute to the player. Set duration to -1 for the attribute to be applied forever.

AddHudHideFlags
void AddHudHideFlags(int flags)
Hides a hud element based on Constants.FHideHUD

ApplyPunchImpulseX
bool ApplyPunchImpulseX(float impulse)
Apply a view punch along the pitch angle. Used to flinch players when hit. If the player is a fully charged scoped-in sniper and the weapon has the aiming_no_flinch attribute, the punch will not apply. Returns true if the punch was applied.

BleedPlayer
void BleedPlayer(float duration)
Make a player bleed for a set duration of time.

BleedPlayerEx
void BleedPlayerEx(float duration, int damage, bool endless, int nCustomDamageType)
Make a player bleed for a set duration of time, or forever, with specific damage per tick and damage_custom index.

CancelTaunt
void CancelTaunt()
Cancels any taunt in progress

CanAirDash
bool CanAirDash()
Can the player air dash/double jump?

CanBeDebuffed
bool CanBeDebuffed()


CanBreatheUnderwater
bool CanBreatheUnderwater()


CanDuck
bool CanDuck()
Can the player duck?

CanGetWet
bool CanGetWet()
Can the player get wet by jarate/milk?

CanJump
bool CanJump()
Can the player jump?

ClearCustomModelRotation
void ClearCustomModelRotation()


ClearSpells
void ClearSpells()


ClearTauntAttack
void ClearTauntAttack()
Stops active taunt from damaging or cancels Rock-Paper-Scissors result

CanPlayerMove
bool CanPlayerMove()
Can the player move?

DoTauntAttack
void DoAttackTaunt()
Performs taunts attacks if available. Player must be already taunting and taunt must have a valid attack assigned ("taunt attack name" attribute)

DropFlag
void DropFlag(bool silent)
Force player to drop the flag.

DropRune
void DropRune(bool apply_force, int team)
Force player to drop the rune.

EndLongTaunt
void EndLongTaunt()
Stops a looping taunt (obeys minimum time rules and plays outro animation if available)

EquipWearableViewModel
void EquipWearableViewModel(handle ent)
Equips a wearble on the viewmodel. Intended to be used with tf_wearable_vm entities.

ExtinguishPlayerBurning
void ExtinguishPlayerBurning()


FiringTalk
void FiringTalk()
Makes eg. a heavy go AAAAAAAAAAaAaa like they are firing their minigun.

ForceChangeTeam
void ForceChangeTeam(int team, bool full_team_switch)
Force player to change their team. Setting the bool to true will not remove nemesis relationships or reset the player's class, as well as not slaying the player.

ForceRegenerateAndRespawn
void ForceRegenerateAndRespawn()
Force regenerates and respawns the player

ForceRespawn
void ForceRespawn()
Force respawns the player

GetActiveWeapon
handle GetActiveWeapon()
Get the player's current weapon

GetBackstabs
int GetBackstabs()


GetBonusPoints
int GetBonusPoints()


GetBotType
int GetBotType()


GetBuildingsDestroyed
int GetBuildingsDestroyed()


GetCaptures
int GetCaptures()


GetClassEyeHeight
Vector GetClassEyeHeight()
Gets the eye height of the player

GetCondDuration
float GetCondDuration(ETFCond cond)
Returns duration of the condition. Returns 0 if the cond is not applied. Returns -1 if the cond is infinite.

GetCurrency
int GetCurrency()
Get player's cash for game modes with upgrades, ie. MvM

GetCurrentTauntMoveSpeed
float GetCurrentTauntMoveSpeed()


GetDefenses
int GetDefenses()


GetDisguiseAmmoCount
int GetDisguiseAmmoCount()


GetDisguiseTarget
handle GetDisguiseTarget()


GetDisguiseTeam
int GetDisguiseTeam()


GetDominations
int GetDominations()


GetGrapplingHookTarget
handle GetGrapplingHookTarget()
What entity is the player grappling?

GetHeadshots
int GetHeadshots()


GetHealPoints
int GetHealPoints()


GetHealTarget
handle GetHealTarget()
Who is the medic healing?

GetHudHideFlags
int GetHudHideFlags()
Gets current hidden hud elements

GetInvulns
int GetInvulns()


GetKillAssists
int GetKillAssists()


GetLastWeapon
handle GetLastWeapon()


GetNextChangeClassTime
float GetNextChangeClassTime()
Get next change class time.

GetNextChangeTeamTime
float GetNextChangeTeamTime()
Get next change team time.

GetNextRegenTime
float GetNextRegenTime()
Get next health regen time.

GetPlayerClass
int GetPlayerClass()


GetRageMeter
float GetRageMeter()


GetResupplyPoints
int GetResupplyPoints()


GetRevenge
int GetRevenge()


GetScoutHypeMeter
float GetScoutHypeMeter()


GetSpyCloakMeter
float GetSpyCloakMeter()


GetTeleports
int GetTeleports()


GetTauntAttackTime
float GetTauntAttackTime()
Timestamp until a taunt attack "lasts". 0 if unavailable

GetTauntRemoveTime
float GetTauntRemoveTime()
Timestamp until taunt is stopped

GetVehicleReverseTime
float GetVehicleReverseTime()
Timestamp when kart was reversed

GetTimeSinceCalledForMedic
float GetTimeSinceCalledForMedic()
When did the player last call medic

GrantOrRemoveAllUpgrades
void GrantOrRemoveAllUpgrades(bool remove, bool refund)


HasItem
bool HasItem()
Currently holding an item? Eg. capture flag

HandleTauntCommand
void HandleTauntCommand(int taunt_slot)
Spootfs a taunt command from the player, as if they selected this taunt.

IgnitePlayer
void IgnitePlayer()
Supposed to set the player on fire, but... does nothing except play on-fire sound and voicelines.

InAirDueToExplosion
bool InAirDueToExplosion()


InAirDueToKnockback
bool InAirDueToKnockback()


InCond
bool InCond(ETFCond cond)


IsAirDashing
bool IsAirDashing()


IsAllowedToRemoveTaunt
bool IsAllowedToRemoveTaunt()
Returns true if the taunt will be stopped

IsAllowedToTaunt
bool IsAllowedToTaunt()


IsBotOfType
bool IsBotOfType(int type)
Returns true if the player matches this bot type. Only one type of bot exists which is reserved for AI bots (not puppet bots): TF_BOT_TYPE. 0 is used for real players or puppet bots. Use IsFakeClient to check for a puppet bot instead.

IsCallingForMedic
bool IsCallingForMedic()
Is this player calling for medic?

IsCarryingRune
bool IsCarryingRune()


IsControlStunned
bool IsControlStunned()


IsCritBoosted
bool IsCritBoosted()


IsFakeClient
bool IsFakeClient()
Returns true if the player is a puppet or AI bot. To check if the player is a AI bot (CTFBot) specifically, use IsBotOfType instead.

IsFireproof
bool IsFireproof()


IsFullyInvisible
bool IsFullyInvisible()


IsHypeBuffed
bool IsHypeBuffed()


IsImmuneToPushback
bool IsImmuneToPushback()


IsInspecting
bool IsInspecting()


IsInvulnerable
bool IsInvulnerable()


IsJumping
bool IsJumping()


IsMiniBoss
bool IsMiniBoss()
Is this player an MvM mini-boss?

IsParachuteEquipped
bool IsParachuteEquipped()


IsPlacingSapper
bool IsPlacingSapper()
Returns true if we placed a sapper in the last few moments

IsRageDraining
bool IsRageDraining()


IsRegenerating
bool IsRegenerating()


IsSapping
bool IsSapping()
Returns true if we are currently sapping

IsSnared
bool IsSnared()


IsStealthed
bool IsStealthed()


IsTaunting()
bool IsTaunting()


IsUsingActionSlot
bool IsUsingActionSlot()


IsViewingCYOAPDA
bool IsViewingCYOAPDA()


Regenerate
void Regenerate(bool refill_health_ammo)
Resupplies a player. If regen health/ammo is set, clears negative conds, gives back player health/ammo

RemoveAllItems
void RemoveAllItems(bool unused)
This does not actually remove all items. It only drops the passtime ball, intelligence, disables radius healing, and hides the Spy invis watch.

RemoveAllObjects
void RemoveAllObjects(bool explode)
Remove all player objects. Eg. dispensers/sentries.

RemoveCond
void RemoveCond(ETFCond cond)
Removes a condition. Does not remove a condition if the minimum duration has not passed. Does nothing if the condition isn't added (interally does InCond check).

RemoveCondEx
void RemoveCondEx(ETFCond cond, bool ignoreDuration)
Extended version of RemoveCond. Allows forcefully removing the condition even if minimum duration is not met.

RemoveCurrency
void RemoveCurrency(int amount)
Take away money from a player for reasons such as ie. spending. Lower bounded to 0.

RemoveCustomAttribute
void RemoveCustomAttribute(string name)
Remove a custom attribute to the player

RemoveDisguise
void RemoveDisguise()
Undisguise a spy.

RemoveHudHideFlags
void RemoveHudHideFlags(int flags)
Unhides a hud element based on Constants.FHideHUD

RemoveInvisibility
void RemoveInvisibility()
Un-invisible a spy.

RemoveTeleportEffect
void RemoveTeleportEffect()


ResetScores
void ResetScores()


RollRareSpell
void RollRareSpell()


SetCondDuration
void SetCondDuration(ETFCond cond, float duration)


SetCurrency
void SetCurrency(int amount)
Set player's cash for game modes with upgrades, ie. MvM. Does not have any bounds checking.

SetCurrentTauntMoveSpeed
void SetCurrentTauntMoveSpeed(float speed)


SetCustomModel
void SetCustomModel(string model_name)
Sets a custom player model without animations (model will T-pose). To enable animations, use SetCustomModelWithClassAnimations instead.

SetCustomModelOffset
void SetCustomModelOffset(Vector offset)


SetCustomModelRotates
void SetCustomModelRotates(bool toggle)


SetCustomModelRotation
void SetCustomModelRotation(QAngle angles)


SetCustomModelVisibleToSelf
void SetCustomModelVisibleToSelf(bool toggle)


SetCustomModelWithClassAnimations
void SetCustomModelWithClassAnimations(string model_name)
Sets a custom player model with full animations.

SetDisguiseAmmoCount
void SetDisguiseAmmoCount(int count)


SetForcedTauntCam
void SetForcedTauntCam(int toggle)


SetGrapplingHookTarget
void SetGrapplingHookTarget(handle entity, bool bleed)
Set the player's target grapple entity

SetHudHideFlags
void SetHudHideFlags(int flags)
Force hud hide flags to a value based on Constants.FHideHUD

SetIsMiniBoss
void SetIsMiniBoss(bool toggle)
Make this player an MvM mini-boss.

SetNextChangeClassTime
void SetNextChangeClassTime(float time)
Set next change class time.

SetNextChangeTeamTime
void SetNextChangeTeamTime(float time)
Set next change team time.

SetNextRegenTime
void SetNextRegenTime(float time)
Set next available resupply time.

SetPlayerClass
void SetPlayerClass(int class)
Sets the player class. Updates the player's visuals and model.

SetRageMeter
void SetRageMeter(float percent)
Sets rage meter from 0 - 100.

SetRPSResult
void SetRPSResult(int result)
Rig the result of Rock-Paper-Scissors (0 - rock, 1 - paper, 2 - scissors)

SetScoutHypeMeter
void SetScoutHypeMeter(float percent)
Sets hype meter from 0 - 100.

SetSpyCloakMeter
void SetSpyCloakMeter(float percent)
Sets cloak meter from 0 - 100.

SetVehicleReverseTime
void SetVehicleReverseTime(float time)
Set the timestamp when kart was reversed

SetUseBossHealthBar
void SetUseBossHealthBar(bool toggle)


StopTaunt
void StopTaunt(bool remove_prop)
Stops current taunt. If remove_prop is true, the taunt prop will be immediately deleted instead of potentially delaying

StunPlayer
void StunPlayer(float duration, float move_speed_reduction, int flags, handle attacker)
Stuns the player for a specified duration. Move speed reduction is a fraction (0 = no reduction. 1 = total reduction, no movement). Flag combinations control the stun type and behavior, see the constants page.

Taunt
void Taunt(int taunt_index, int taunt_concept)
Performs a taunt if allowed. For taunt index, see Constants.FTaunts. For concepts, see MP_CONCEPT List. Concept is the "voiceline" index to use with the taunt. For TAUNT_SHOW_ITEM and TAUNT_BASE_WEAPON this is set automatically. TAUNT_LONG is not supported.

TryToPickupBuilding
bool TryToPickupBuilding()
Make the player attempt to pick up a building in front of them

UpdateSkin
void UpdateSkin(int skin)


WasInCond
bool WasInCond(ETFCond cond)


Weapon_CanUse
bool Weapon_CanUse(handle weapon)


Weapon_Drop
void Weapon_Drop(handle weapon)
Does nothing!

Weapon_DropEx
void Weapon_Drop(handle weapon, Vector target, Vector velocity)
Does nothing!

Weapon_Equip
void Weapon_Equip(handle weapon)
Equips a weapon in the player. This places it inside the m_hMyWeapons array.

Weapon_SetLast
void Weapon_SetLast(handle weapon)


Weapon_ShootPosition
vector Weapon_ShootPosition()


Weapon_Switch
void Weapon_Switch(handle weapon)
Attempts a switch to the given weapon, if present in the player's inventory (m_hMyWeapons array).

AddBotAttribute
void AddBotAttribute(int attribute)
Sets attribute flags on this TFBot

AddBotTag
void AddBotTag(string tag)
Adds a bot tag

AddWeaponRestriction
void AddWeaponRestriction(int flags)
Adds weapon restriction flags

ClearAllBotAttributes
void ClearAllBotAttributes()
Clears all attribute flags on this TFBot

ClearAllBotTags
void ClearAllBotTags()
Clears bot tags

ClearAllWeaponRestrictions
void ClearAllWeaponRestrictions()
Removes all weapon restriction flags

ClearAttentionFocus
void ClearAttentionFocus()
Clear current focus

ClearBehaviorFlag
void ClearBehaviorFlag(int flags)
clear the given behavior flag(s) for this bot. Does not work.

DelayedThreatNotice
void DelayedThreatNotice(handle threat, float delay)
Notice the threat after a delay in seconds

DisbandCurrentSquad
void DisbandCurrentSquad()
Forces the current squad to be entirely disbanded by everyone

FindVantagePoint
handle FindVantagePoint(float max_distance)
Get the nav area of the closest vantage point (within distance)

GenerateAndWearItem
void GenerateAndWearItem(string item_name)
Give me an item!

GetActionPoint
handle GetActionPoint()
Get the given action point for this bot

GetAllBotTags
void GetAllBotTags(handle table)
Get all bot tags. The key is the index, and the value is the tag

GetHomeArea
handle GetHomeArea()
Gets the home nav area of the bot

GetDifficulty
ETFBotDifficultyType GetDifficulty()
Returns the bot's difficulty level

GetMaxVisionRangeOverride
float GetMaxVisionRangeOverride()
Gets the max vision range override for the bot

GetMission
int GetMission()
Get this bot's current mission. Does not work.

GetMissionTarget
handle GetMissionTarget()
Get this bot's current mission target

GetNearestKnownSappableTarget
handle GetNearestKnownSappableTarget()
Gets the nearest known sappable target

GetPrevMission
int GetPrevMission()
Get's this bot's previous mission. Does not work.

GetSpawnArea
handle GetSpawnArea()
Return the nav area of where we spawned

GetSquadFormationError
float GetSquadFormationError()
Gets our formation error coefficient.

HasBotAttribute
bool HasBotAttribute(int attribute)
Checks if this TFBot has the given attributes

HasBotTag
bool HasBotTag(string tag)
Checks if this TFBot has the given bot tag

HasMission
bool HasMission(int mission)
Return true if the given mission is this bot's current mission. Does not work.

HasWeaponRestriction
bool HasWeaponRestriction(int flags)
Checks if this TFBot has the given weapon restriction flags

IsAmmoFull
bool IsAmmoFull()


IsAmmoLow
bool IsAmmoLow()


IsAttentionFocused
bool IsAttentionFocused()
Is our attention focused right now?

IsAttentionFocusedOn
bool IsAttentionFocusedOn(handle entity)
Is our attention focused on this entity

IsBehaviorFlagSet
bool IsBehaviorFlagSet(int flags)
Return true if the given behavior flag(s) are set for this bot. Does not work.

IsDifficulty
bool IsDifficulty(int difficulty)
Returns true/false if the bot's difficulty level matches.

IsInASquad
bool IsInASquad()
Checks if we are in a squad

IsOnAnyMission()
bool IsOnAnyMission()
Return true if this bot has a current mission

IsWeaponRestricted
bool IsWeaponRestricted(handle weapon)
Checks if the given weapon is restricted for use on the bot

LeaveSquad
void LeaveSquad()
Makes us leave the current squad (if any)

PressAltFireButton
void PressAltFireButton(float duration)


PressFireButton
void PressFireButton(float duration)


PressSpecialFireButton
void PressSpecialFireButton(float duration)


RemoveBotAttribute
void RemoveBotAttribute(int attribute)
Removes attribute flags on this TFBot

RemoveBotTag
void RemoveBotTag(string tag)
Removes a bot tag

RemoveWeaponRestriction
void RemoveWeaponRestriction(int flags)
Removes weapon restriction flags

SetActionPoint
void SetActionPoint(handle entity)
Set the given action point for this bot

SetAttentionFocus
void SetAttentionFocus(handle entity)
Sets our current attention focus to this entity

SetAutoJump
void SetAutoJump(float minTime, float maxTime)
Sets if the bot should automatically jump

SetBehaviorFlag
void SetBehaviorFlag(int flags)
Set the given behavior flag(s) for this bot. Does not work.

SetDifficulty
void SetDifficulty(int difficulty)
Sets the bots difficulty level

SetHomeArea
void SetHomeArea(handle area)
Set the home nav area of the bot, may be null.

SetMaxVisionRangeOverride
void SetMaxVisionRangeOverride(float range)
Sets max vision range override for the bot

SetMission
void SetMission(int mission, bool reset_behavior)
Set this bot's current mission to the given mission. Does not work.

SetMissionTarget
void SetMissionTarget(handle entity)
Set the bot's mission target to this given entity

SetPrevMission
void SetPrevMission(int mission)
Set this bot's previous mission to the given mission. Does not work.

SetScaleOverride
void SetScaleOverride(float scale)
Sets the scale override for the bot

SetShouldQuickBuild
void SetShouldQuickBuild(bool toggle)
Sets if the bot should build instantly

SetSquadFormationError
void SetSquadFormationError(float coefficient)
Sets our formation error coefficient.

ShouldAutoJump
bool ShouldAutoJump()
Returns if the bot should automatically jump

ShouldQuickBuild
bool ShouldQuickBuild()
Returns if the bot should build instantly

UpdateDelayedThreatNotices
void UpdateDelayedThreatNotices()


GetBool
bool GetClientConvarValue(string name)
Returns the convar as a bool. May return null if no such convar.

GetClientConvarValue
string GetClientConvarValue(string name, int entindex)
Returns the convar value for the entindex as a string. Only works on client convars with the FCVAR_USERINFO flag.

GetInt
int GetInt(string name)
Returns the convar as an int. May return null if no such convar.

GetStr
string GetStr(string name)
Returns the convar as a string. May return null if no such convar.

GetFloat
float GetFloat(string name)
Returns the convar as a float. May return null if no such convar.

IsConVarOnAllowList
bool IsConVarOnAllowList(string name)
Checks if the convar is allowed to be used and is in cfg/vscript_convar_allowlist.txt. Please be nice with this and use it for *compatibility* if you need check support and NOT to force server owners to allow hostname to be set... or else this will simply lie and return true in future. ;-) You have been warned!

SetValue
void SetValue(string name, value)
Sets the value of the convar. The convar must be in cfg/vscript_convar_allowlist.txt to be set. Convars marked as cheat-only can be set even if sv_cheats is off. Convars marked as dev-only (i.e. not visible in console) can also be set. Supported types are bool, int, float, string. The original value of the convar is saved and is reset on map change, in other words convar changes will not persist across maps.

CreateByClassname
handle CreateByClassname(string classname)
Creates an entity by classname

DispatchSpawn
void DispatchSpawn(handle entity)
Dispatches spawn of an entity! Use this on entities created via CreateByClassname to actually spawn them into the world.

FindByClassname
handle FindByClassname(handle previous, string classname)
Find entities by the string of their classname keyvalue. Pass 'null' value to start an iteration, or reference to a previously found entity to continue a search

FindByClassnameNearest
handle FindByClassnameNearest(string classname, Vector center, float radius)
Find entities by classname nearest to a point within a radius.

FindByClassnameWithin
handle FindByClassnameWithin(handle previous, string classname, Vector center, float radius)
Find entities by classname within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search

FindByModel
handle FindByModel(handle previous, string modelname)
Find entities by the value of their model keyvalue. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search

FindByName
handle FindByName(handle previous, string targetname)
Find entities by the value of their enttargetname keyvalue. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search

FindByNameNearest
handle FindByNameNearest(string targetname, Vector center, float radius)
Find entities by targetname nearest to a point within a radius.

FindByNameWithin
handle FindByNameWithin(handle previous, string targetname, Vector center, float radius)
Find entities by targetname within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search

FindByTarget
handle FindByTarget(handle previous, string target)
Find entities by the value of their target keyvalue. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search

FindInSphere
handle FindInSphere(handle previous, Vector center, float radius)
Find entities within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search

First
handle First()
Begin an iteration over the list of entities

Next
handle Next(handle previous)
At the given reference of a previously-found entity, returns the next one after it in the list.

AddIncomingConnection
void AddIncomingConnection(handle area, ENavDirType dir)
Add areas that connect TO this area by a ONE-WAY link

ClearAttributeTF
void ClearAttributeTF(int bits)
Clear TF-specific area attribute bits.

ComputeClosestPointInPortal
Vector ComputeClosestPointInPortal(handle to, ENavDirType dir, Vector closePos)
Compute closest point within the portal between to adjacent areas.

ComputeDirection
int ComputeDirection(Vector point)
Return direction from this area to the given point.

ConnectTo
void ConnectTo(handle area, ENavDirType dir)
Connect this area to given area in given direction.

Contains
bool Contains(handle area)
Return true if other area is on or above this area, but no others.

ContainsOrigin
bool ContainsOrigin(Vector point)
Return true if given point is on or above this area, but no others.

DebugDrawFilled
void DebugDrawFilled(int r, int g, int b, int a, float duration, bool noDepthTest, float margin)
Draw area as a filled rect of the given color.

Disconnect
void Disconnect(handle area)
Disconnect this area from given area.

FindRandomSpot
Vector FindRandomSpot()
Get random origin within extent of area.

GetAdjacentArea
handle GetAdjacentArea(ENavDirType dir, int n)
Return the n'th adjacent area in the given direction.

GetAdjacentAreas
void GetAdjacentAreas(ENavDirType dir, handle table)
Fills a passed in table with all adjacent areas in the given direction.

GetAdjacentCount
int GetAdjacentCount(ENavDirType dir)
Get the number of adjacent areas in the given direction.

GetAttributes
int GetAttributes()
Get area attribute bits.

GetAvoidanceObstacleHeight
float GetAvoidanceObstacleHeight()
Returns the maximum height of the obstruction above the ground.

GetCenter
Vector GetCenter()
Get center origin of area.

GetCorner
Vector GetCorner(int dir)
Get corner origin of area.

GetDistanceSquaredToPoint
float GetDistanceSquaredToPoint(Vector pos)
Return shortest distance between point and this area.

GetDoor
handle GetDoor()
Returns the door entity above the area.

GetElevator
handle GetElevator()
Returns the elevator if in an elevator's path.

GetElevatorAreas
void GetElevatorAreas(handle table)
Fills table with a collection of areas reachable via elevator from this area.

GetID
int GetID()
Get area ID.

GetIncomingConnections
void GetIncomingConnections(ENavDirType dir, handle table)
Fills a passed in table with areas connected TO this area by a ONE-WAY link (ie: we have no connection back to them).

GetParent
handle GetParent()
Returns the area just prior to this one in the search path.

GetParentHow
int GetParentHow()
Returns how we get from parent to us.

GetPlaceName
string GetPlaceName()
Get place name if it exists, null otherwise.

GetPlayerCount
int GetPlayerCount(int team)
Return number of players of given team currently within this area (team of zero means any/all).

GetRandomAdjacentArea
handle GetRandomAdjacentArea(ENavDirType dir)
Return a random adjacent area in the given direction.

GetSizeX
float GetSizeX()
Return the area size along the X axis.

GetSizeY
float GetSizeY()
Return the area size along the Y axis.

GetTravelDistanceToBombTarget
float GetTravelDistanceToBombTarget()
Gets the travel distance to the MvM bomb target.

GetZ
float GetZ(Vector pos)
Return Z of area at (x,y) of 'pos'

HasAttributeTF
bool HasAttributeTF(int bits)
Has TF-specific area attribute bits of the given ones.

HasAttributes
bool HasAttributes(int bits)
Has area attribute bits of the given ones.

HasAvoidanceObstacle
bool HasAvoidanceObstacle(float maxheight)
Returns true if there's a large, immobile object obstructing this area

IsBlocked
bool IsBlocked(int team, bool affectsFlow)
Return true if team is blocked in this area.

IsBottleneck
bool IsBottleneck()
Returns true if area is a bottleneck. (tiny narrow areas with only one path)

IsCompletelyVisibleToTeam
bool IsCompletelyVisibleToTeam(int team)
Return true if given area is completely visible from somewhere in this area by someone on the team.

IsConnected
bool IsConnected(handle area, ENavDirType dir)
Return true if this area is connected to other area in given direction. (If you set direction to -1 or 4, it will automatically check all directions for a connection).

IsCoplanar
bool IsCoplanar(handle area)
Return true if this area and given area are approximately co-planar

IsDamaging
bool IsDamaging()
Return true if this area is marked to have continuous damage.

IsDegenerate
bool IsDegenerate()
Return true if this area is badly formed.

IsEdge
bool IsEdge(ENavDirType dir)
Return true if there are no bi-directional links on the given side.

IsFlat
bool IsFlat()
Return true if this area is approximately flat.

IsOverlapping
bool IsOverlapping(handle area)
Return true if 'area' overlaps our 2D extents.

IsOverlappingOrigin
bool IsOverlappingOrigin(Vector pos, float tolerance)
Return true if 'pos' is within 2D extents of area.

IsPotentiallyVisibleToTeam
bool IsPotentiallyVisibleToTeam(int team)
Return true if any portion of this area is visible to anyone on the given team.

IsReachableByTeam
bool IsReachableByTeam(int team)
Is this area reachable by the given team?

IsRoughlySquare
bool IsRoughlySquare()
Return true if this area is approximately square.

IsTFMarked
bool IsTFMarked()
Is this nav area marked with the current marking scope?

IsUnderwater
bool IsUnderwater()
Return true if area is underwater.

IsValidForWanderingPopulation
bool IsValidForWanderingPopulation()
Returns true if area is valid for wandering population.

IsVisible
bool IsVisible(Vector point)
Return true if area is visible from the given eyepoint.

MarkAsBlocked
void MarkAsBlocked(int team)
Mark this area as blocked for team.

MarkAsDamaging
void MarkAsDamaging(float duration)
Mark this area is damaging for the next 'duration' seconds.

MarkObstacleToAvoid
void MarkObstacleToAvoid(float height)
Marks the obstructed status of the nav area.

RemoveAttributes
void RemoveAttributes(int bits)
Removes area attribute bits.

RemoveOrthogonalConnections
void RemoveOrthogonalConnections(ENavDirType dir)
Removes all connections in directions to left and right of specified direction.

SetAttributeTF
void SetAttributeTF(int bits)
Set TF-specific area attributes.

SetAttributes
void SetAttributes(int bits)
Set area attribute bits.

SetPlaceName
void SetPlaceName(string name)
Set place name. If you pass null, the place name will be set to nothing.

TFMark
void TFMark()
Mark this nav area with the current marking scope.

UnblockArea
void UnblockArea()
Unblocks this area.

FindNavAreaAlongRay
handle FindNavAreaAlongRay(Vector startpos, Vector endpos, handle ignoreAreaID)
get nav area from ray

GetAllAreas
void GetAllAreas(handle table)
fills a passed in table of all nav areas

GetAreasWithAttributes
void GetAreasWithAttributes(int bits, handle table)
fills a passed in table of all nav areas that have the specified attributes

GetNavArea
handle GetNavArea(Vector origin, float flBeneath)
given a position in the world, return the nav area that is closest to or below that height.

GetNavAreaByID
handle GetNavAreaByID(int areaID)
get nav area by ID

GetNavAreaCount
int GetNavAreaCount()
return total number of nav areas

GetNavAreasFromBuildPath
bool GetNavAreasFromBuildPath(handle startArea, handle endArea, Vector goalPos, float flMaxPathLength, int teamID, bool ignoreNavBlockers, handle table)
Fills the table with areas from a path. Returns whether a path was found. If 'endArea' is NULL, will compute a path as close as possible to 'goalPos'.

GetNavAreasInRadius
void GetNavAreasInRadius(Vector origin, float radius, handle table)
fills a passed in table of nav areas within radius

GetNavAreasOverlappingEntityExtent
void GetNavAreasOverlappingEntityExtent(handle entity, handle table)
fills passed in table with areas overlapping entity's extent

GetNearestNavArea
handle GetNearestNavArea(Vector origin, float maxDist, bool checkLOS, bool checkGround)
given a position in the world, return the nav area that is closest to or below that height.

GetObstructingEntities
void GetObstructingEntities(handle table)
fills a passed in table of all obstructing entities

NavAreaBuildPath
bool NavAreaBuildPath(handle startArea, handle endArea, Vector goalPos, float flMaxPathLength, int teamID, bool ignoreNavBlockers)
returns true if a path exists

NavAreaTravelDistance
float NavAreaTravelDistance(handle startArea, handle endArea, float flMaxPathLength)
compute distance between two areas. Return -1 if can't reach 'endArea' from 'startArea'

RegisterAvoidanceObstacle
void RegisterAvoidanceObstacle(handle entity)
registers avoidance obstacle

UnregisterAvoidanceObstacle
void UnregisterAvoidanceObstacle(handle entity)
unregisters avoidance obstacle

GetPropArraySize
int GetPropArraySize(handle entity, string propertyName)
Returns the size of an netprop array, or -1.

GetPropEntity
handle GetPropEntity(handle entity, string propertyName)
Reads an EHANDLE-valued netprop (21 bit integer). Returns the script handle of the entity.

GetPropEntityArray
handle GetPropEntityArray(handle entity, string propertyName, int arrayElement)
Reads an EHANDLE-valued netprop (21 bit integer) from an array. Returns the script handle of the entity.

GetPropBool
bool GetPropBool(handle entity, string propertyName)
Reads a boolean-valued netprop.

GetPropBoolArray
bool GetPropBoolArray(handle entity, string propertyName, int arrayElement)
Reads a boolean-valued netprop from an array.

GetPropFloat
float GetPropFloat(handle entity, string propertyName)
Reads a float-valued netprop.

GetPropFloatArray
float GetPropFloatArray(handle entity, string propertyName, int arrayElement)
Reads a float-valued netprop from an array.

GetPropInfo
bool GetPropInfo(handle entity, string propertyName, int arrayElement, handle table)
Fills in a passed table with property info for the provided entity.

GetPropInt
int GetPropInt(handle entity, string propertyName)
Reads an integer-valued netprop.

GetPropIntArray
int GetPropIntArray(handle entity, string propertyName, int arrayElement)
Reads an integer-valued netprop from an array.

GetPropString
string GetPropString(handle entity, string propertyName)
Reads an string-valued netprop.

GetPropStringArray
string GetPropStringArray(handle entity, string propertyName, int arrayElement)
Reads an string-valued netprop from an array.

GetPropType
string GetPropType(handle entity, string propertyName)
Returns the name of the netprop type as a string.

GetPropVector
Vector GetPropVector(handle entity, string propertyName)
Reads a 3D vector-valued netprop.

GetPropVectorArray
Vector GetPropVectorArray(handle entity, string propertyName, int arrayElement)
Reads a 3D vector-valued netprop from an array.

GetTable
void GetTable(handle entity, int iPropType, handle table)
Fills in a passed table with all props of a specified type for the provided entity (set iPropType to 0 for SendTable or 1 for DataMap)

HasProp
bool HasProp(handle entity, string propertyName)
Checks if a netprop exists.

SetPropBool
void SetPropBool(handle entity, string propertyName, bool value)
Sets a netprop to the specified boolean.

SetPropBoolArray
void SetPropBoolArray(handle entity, string propertyName, bool value, int arrayElement)
Sets a netprop from an array to the specified boolean.

SetPropEntity
void SetPropEntity(handle entity, string propertyName, handle value)
Sets an EHANDLE-valued netprop (21 bit integer) to reference the specified entity.

SetPropEntityArray
void SetPropEntityArray(handle entity, string propertyName, handle value, int arrayElement)
Sets an EHANDLE-valued netprop (21 bit integer) from an array to reference the specified entity.

SetPropFloat
void SetPropFloat(handle entity, string propertyName, float value)
Sets a netprop to the specified float.

SetPropFloatArray
void SetPropFloatArray(handle entity, string propertyName, float value, int arrayElement)
Sets a netprop from an array to the specified float.

SetPropInt
void SetPropInt(handle entity, string propertyName, int value)
Sets a netprop to the specified integer.

SetPropIntArray
void SetPropIntArray(handle entity, string propertyName, int value, int arrayElement)
Sets a netprop from an array to the specified integer.

SetPropString
void SetPropString(handle entity, string propertyName, string value)
Sets a netprop to the specified string.

SetPropStringArray
void SetPropStringArray(handle entity, string propertyName, string value, int arrayElement)
Sets a netprop from an array to the specified string.

SetPropVector
void SetPropVector(handle entity, string propertyName, Vector value)
Sets a netprop to the specified vector.

SetPropVectorArray
void SetPropVectorArray(handle entity, string propertyName, Vector value, int arrayElement)
Sets a netprop from an array to the specified vector.

AddOutput
void AddOutput(handle entity, string outputName, string targetName, string inputName, string parameter, float delay, int timesToFire)
Adds a new output to the entity.

GetNumElements
int GetNumElements(handle ntity entity, string outputName)
Returns the number of array elements.

GetOutputTable
void GetOutputTable(handle entity, string outputName, table, int arrayElement)
Fills the passed table with output information.

HasAction
bool HasAction(handle entity, string outputName)
Returns true if an action exists for the output.

HasOutput
bool HasOutput(handle entity, string outputName)
Returns true if the output exists.

RemoveOutput
void RemoveOutput(handle entity, string outputName, string targetName, string inputName, string parameter)
Removes an output from the entity.

FindKey
CScriptKeyValues FindKey(string key)
Find a sub key by the key name.

GetFirstSubKey
CScriptKeyValues GetFirstSubKey()
Return the first sub key object.

GetKeyBool
bool GetKeyBool(string key)
Return the key value as a bool.

GetKeyFloat
float GetKeyFloat(string key)
Return the key value as a float.

GetKeyInt
int GetKeyInt(string key)
Return the key value as an integer.

GetKeyString
string GetKeyString(string key)
Return the key value as a string.

GetNextKey
CScriptKeyValues GetNextKey()
Return the next neighbor key object to the one the method is called on.

IsKeyEmpty
bool IsKeyEmpty(string key)
Returns true if the named key has no value.

IsValid
bool IsValid()
Whether the handle belongs to a valid key.

ReleaseKeyValues
void ReleaseKeyValues()
Releases the contents of the instance.

GetPlayerSpeechDuration
float GetPlayerSpeechDuration(int playerIndex)
Returns the number of seconds the player has been continuously speaking.

IsPlayerSpeaking
bool IsPlayerSpeaking(int playerIndex)
Returns whether the player specified is speaking.

SpawnEntity
void SpawnEntity()
Create an entity at the location of the maker

SpawnEntityAtEntityOrigin
void SpawnEntityAtEntityOrigin(handle entity)
Create an entity at the location of a specified entity instance

SpawnEntityAtLocation
void SpawnEntityAtLocation(Vector origin, Vector orientation)
Create an entity at a specified location and orientaton, orientation is Euler angle in degrees (pitch, yaw, roll)

SpawnEntityAtNamedEntityOrigin
void SpawnEntityAtNamedEntityOrigin(string targetname)
Create an entity at the location of a named entity. If multiple entities have the same name, only the one with the lowest entity index will be targeted.

PreSpawnInstance
table PreSpawnInstance(string entityClass, string entityName)
If this is defined, it will be called right before the entity is created, and any keyvalues returned will be assigned to the entity.

PostSpawn
void PostSpawn(table entities)
Called after the entities are spawned. A table with the handles of the spawned entities indexed by name is passed to the function. Could use this to connect outputs or do whatever needs to be done after the entity was created.

GetFuturePosition
Vector GetFuturePosition(float x, float speed)
Get a position on the track X seconds in the future.

AddTemplate
void AddTemplate(string classname, table keyvalues)
Add an entity with the given keyvalues to the template spawner, similar to SpawnEntityFromTable. The number of templates allowed is unlimited.

SetGroupSpawnTables
void SetGroupSpawnTables(table group, table spawn)
Unused. This only stores a reference to the two tables which is removed when the point_script_template is deleted.

AddBroadcastTeamTarget
void AddBroadcastTeamTarget(int index)
Adds a team (by index) to the broadcast list

EstimateLength
float EstimateLength()
Returns length of this scene in seconds.

FindNamedEntity
handle FindNamedEntity(string reference)
given an entity reference, such as !target, get actual entity from scene object

IsPaused
bool IsPaused()
If this scene is currently paused.

IsPlayingBack
bool IsPlayingBack()
If this scene is currently playing.

LoadSceneFromString
bool LoadSceneFromString(string sceneName, string scene)
given a dummy scene name and a vcd string, load the scene

RemoveBroadcastTeamTarget
void RemoveBroadcastTeamTarget(int index)
Removes a team (by index) from the broadcast list

CCallChainer
CCallChainer(string functionPrefix, table scope = null)
Creates a CCallChainer object that'll collect functions that have a matching prefix in the given scope.

PostScriptExecute
void PostScriptExecute()
Search for all non-native functions with matching prefixes, then push them into the chains table.

Call
bool Call(string event, any ...)
Find an unprefixed function name in the chains table and call it with the given arguments.

chains
chains
Contains names of unprefixed functions, each with an array of functions to call.

prefix
prefix
Prefix that functions should have to be added into the chains table. Set by the constructor.

scope
scope
If set, seek functions in this scope instead. Set by the constructor.

CSimpleCallChainer
CSimpleCallChainer(string functionPrefix, table scope = null, exactMatch = false)
Creates a CSimpleCallChainer object that'll collect functions that have a matching prefix in the given scope, unless it seek for an exact name match.

PostScriptExecute
void PostScriptExecute()
Begin searching for all non-native functions with matching prefixes, then push them into the chain array.

Call
bool Call(any ...)
Call all functions inside the chain array with the given arguments.

chain
chain
All functions to be called by the Call() method.

exactMatch
exactMatch
If set, names of non-native functions and prefix must be an exact match. Set by the constructor.

prefix
prefix
Prefix that functions should have to be added into the chain array. Set by the constructor.

scope
scope
If set, seek functions in this scope instead. Set by the constructor.

ClearImmobileStatus
void ClearImmobileStatus()
Clear immobile status

FlagForUpdate
void FlagForUpdate(bool toggle)
Flag this bot for update

GetBodyInterface
INextBotComponent GetBodyInterface()
Get this bot's body interface

GetBotId
int GetBotId()
Get this bot's id

GetImmobileDuration
float GetImmobileDuration()
How long have we been immobile

GetImmobileSpeedThreshold
float GetImmobileSpeedThreshold()
Return units/second below which this actor is considered immobile

GetIntentionInterface
INextBotComponent GetIntentionInterface()
Get this bot's intention interface

GetLocomotionInterface
ILocomotion GetLocomotionInterface()
Get this bot's locomotion interface

GetTickLastUpdate
int GetTickLastUpdate()
Get last update tick

GetVisionInterface
INextBotComponent GetVisionInterface()
Get this bot's vision interface

IsEnemy
bool IsEnemy(handle entity)
Return true if given entity is our enemy

IsFlaggedForUpdate
bool IsFlaggedForUpdate()
Is this bot flagged for update

IsFriend
bool IsFriend(handle entity)
Return true if given entity is our friend

IsImmobile
bool IsImmobile()
Return true if we haven't moved in awhile

ComputeUpdateInterval
bool ComputeUpdateInterval()
Recomputes the component update interval

GetUpdateInterval
float GetUpdateInterval()
Returns the component update interval

Reset
void Reset()
Resets the internal update state

Approach
void Approach(Vector goal, float goalWeight)
The primary locomotive method. Goal determines the destination position to move towards. goalWeight determines the priority of this path, you can set this to 1.0 generally speaking.

ClearStuckStatus
void ClearStuckStatus(string reason)
Reset stuck status to un-stuck. Reason message is shown when debugging nextbots.

ClimbUpToLedge
bool ClimbUpToLedge(Vector goalPos, vector goalForward, handle obstacle)
Initiate a jump to an adjacent high ledge, return false if climb can't start

DriveTo
void DriveTo(Vector pos)
Move the bot to the precise given position immediately, updating internal state

FaceTowards
void FaceTowards(Vector target)
Rotate body to face towards target

FractionPotentialGap
float FractionPotentialGap(Vector from, Vector to)
If the locomotor cannot jump over the gap, returns the fraction of the jumpable ray

FractionPotentiallyTraversable
float FractionPotentiallyTraversable(Vector from, Vector to, bool immediately)
If the locomotor could not move along the line given, returns the fraction of the walkable ray. If immediately is true, breakables are considered non-traverseable

GetDeathDropHeight
float GetDeathDropHeight()
Distance at which we will die if we fall

GetDesiredSpeed
float GetDesiredSpeed()
Get desired speed for locomotor movement

GetFeet
Vector GetFeet()
Return position of feet - the driving point where the bot contacts the ground

GetGround
handle GetGround()
Return the current ground entity or NULL if not on the ground

GetGroundMotionVector
Vector GetGroundMotionVector()
Return unit vector in XY plane describing our direction of motion - even if we are currently not moving

GetGroundNormal
Vector GetGroundNormal()
Surface normal of the ground we are in contact with

GetGroundSpeed
float GetGroundSpeed()
Return current world space speed in XY plane

GetMaxAcceleration
float GetMaxAcceleration()
Return maximum acceleration of locomotor

GetMaxDeceleration
float GetMaxDeceleration()
Return maximum deceleration of locomotor

GetMaxJumpHeight
float GetMaxJumpHeight()
Return maximum height of a jump

GetMotionVector
Vector GetMotionVector()
Return unit vector describing our direction of motion - even if we are currently not moving

GetRunSpeed
float GetRunSpeed()
Get maximum running speed

GetSpeed
float GetSpeed()
Return current world space speed (magnitude of velocity)

GetSpeedLimit
float GetSpeedLimit()
Get maximum speed bot can reach, regardless of desired speed

GetStepHeight
float GetStepHeight()
If delta Z is lower than this, we can step up the surface (like a stair step), but if delta Z is greater than this, we have to jump to get up.

GetStuckDuration
float GetStuckDuration()
Return how long we've been stuck

GetTraversableSlopeLimit
float GetTraversableSlopeLimit()
Return Z component of unit normal of steepest traversable slope

GetUpdateInterval
GetUpdateInterval()
Returns time between updates

GetVelocity
Vector GetVelocity()
Return current world space velocity

GetWalkSpeed
float GetWalkSpeed()
Get maximum walking speed

HasPotentialGap
float HasPotentialGap(Vector from, Vector to)
Checks if there is a possible gap that will need to be jumped over. Returns fraction of ray from 0 to 1.

IsAbleToClimb
bool IsAbleToClimb()
Return true if this bot can climb arbitrary geometry it encounters

IsAbleToJumpAcrossGaps
bool IsAbleToJumpAcrossGaps()
Return true if this bot can jump across gaps in its path

IsAreaTraversable
bool IsAreaTraversable(handle area)
Return true if given area can be used for navigation

IsAttemptingToMove
bool IsAttemptingToMove()
Return true if we have tried to Approach() or DriveTo() very recently

IsClimbingOrJumping
bool IsClimbingOrJumping()
Is jumping in any form

IsClimbingUpToLedge
bool IsClimbingUpToLedge()
Is climbing up to a high ledge

IsEntityTraversable
bool IsEntityTraversable(handle entity, bool immediately)
Return true if the entity handle is traversable. If immediately is true, breakables are considered non-traverseable

IsGap
bool IsGap(Vector pos, Vector forward)
Return true if there is a gap at this position. forward is unused.

IsJumpingAcrossGap
bool IsJumpingAcrossGap()
Is jumping across a gap to the far side

IsOnGround
bool IsOnGround()
Return true if standing on something

IsPotentiallyTraversable
float IsPotentiallyTraversable(Vector from, Vector to, bool immediately)
Checks if this locomotor could potentially move along the line given. Returns fraction of trace result (1 = clear). If immediately is true, breakables are considered non-traverseable

IsRunning
bool IsRunning()
Is running?

IsScrambling
bool IsScrambling()
Is in the middle of a complex action (climbing a ladder, climbing a ledge, jumping, etc) that shouldn't be interrupted

IsStuck
bool IsStuck()
Return true if bot is stuck. If the locomotor cannot make progress, it becomes stuck and can only leave this stuck state by successfully movingand becoming un-stuck.

Jump
void Jump()
Initiate a simple undirected jump in the air

JumpAcrossGap
void JumpAcrossGap(Vector goalPos, Vector goalForward)
Initiate a jump across an empty volume of space to far side. goalForward is unused.

OnLandOnGround
void OnLandOnGround(handle ground)
Manually run the OnLandOnGround callback. Typically invoked when bot lands on the ground after being in the air

OnLeaveGround
void OnLeaveGround(handle ground)
Manually run the OnLeaveGround callback. Typically invoked when bot leaves ground for any reason

Reset
Reset()
Resets motion, stuck state, etc

Run
void Run()
Set desired movement speed to running

SetDesiredSpeed
void SetDesiredSpeed(float)
Set desired speed for locomotor movement

SetSpeedLimit
void SetSpeedLimit(float)
Set maximum speed bot can reach, regardless of desired speed

Stop
void Stop()
Set desired movement speed to stopped

Walk
void Walk()
Set desired movement speed to walking

Begin
Begin()


End
End()


EstablishDelegation
EstablishDelegation()


HookRootMetamethod
HookRootMetamethod()


UnhookRootMetamethod
UnhookRootMetamethod()


RemoveDelegation
RemoveDelegation()


Resolve
Resolve()


m_bindNamesStack
m_bindNamesStack


m_fixupSet
m_fixupSet


m_log
m_log


m_logIndent
m_logIndent


m_targetTable
m_targetTable


regexp
regexp()


capture
table capture(str, [start])
Returns an array of tables containing two indexes ("begin" and "end") of the first match of the regular expression in the string str. An array entry is created for each captured sub expressions. If no match occurs returns null. The search starts from the index start of the string, if start is omitted the search starts from the beginning of the string.

match
bool match(str)
Returns a true if the regular expression matches the string str, otherwise returns false.

search
table search(str, [start])
Returns a table containing two indexes ("begin" and "end") of the first match of the regular expression in the string st, otherwise if no match occurs returns null. The search starts from the index start of the string, if start is omitted the search starts from the beginning of the string.

subexpcount
subexpcount()


Vector
Vector(float x = 0, float y = 0, float z = 0)
Creates a new vector with the specified Cartesian coordiantes.

Cross
float Cross(Vector factor)
The vector product of two vectors. Returns a vector orthogonal to the input vectors.

Dot
float Dot(Vector factor)
The scalar product of two vectors.

Length
float Length()
Magnitude of the vector.

LengthSqr
float LengthSqr()
The magnitude of the vector squared. Faster than the above method.

Length2D
float Length2D()
Returns the magnitude of the vector on the x-y plane. Meant to be used when working with the client's HUD.

Length2DSqr
float Length2DSqr()
Returns the square of the magnitude of the vector on the x-y plane. Faster than the above method.

Norm
float Norm()
Seems to also return the vector length.

Scale
Vector Scale(float factor)
Scales the vector magnitude.

ToKVString
string ToKVString()
Returns a string without separations commas.

tostring
string tostring()
Returns a human-readable string.

QAngle
QAngle(float pitch = 0, float yaw = 0, float roll = 0)
Creates a new QAngle.

Forward
Vector Forward()
Returns the Forward Vector of the angles.

Left
Vector Left()
Returns the left Vector of the angles.

Pitch
float Pitch()
Returns the pitch angle in degrees.

Roll
float Roll()
Returns the roll angle in degrees.

ToKVString
string ToKVString()
Returns a string with the values separated by one space.

ToQuat
Quaternion ToQuat()
Returns a quaternion representation of the orientation.

Up
Vector Up()
Returns the Up Vector of the angles.

Yaw
float Yaw()
Returns the yaw angle in degrees.

Vector2D
Vector2D(float x, float y)
Creates a new 2D vector with the specified Cartesian coordiantes.

Vector4D
Vector4D(float x, float y, float z, float w)
Creates a new 4D vector with the specified Cartesian coordiantes.

Dot
float Dot(VectorXD factor)
The scalar product of two vectors.

Length
float Length()
Magnitude of the vector.

LengthSqr
float LengthSqr()
The magnitude of the vector squared. Faster than the above method.

Norm
float Norm()
Seems to also return the vector length.

ToKVString
string ToKVString()
Returns a string without separations commas.

Quaternion
Quaternion()
Creates a new identity quaternion.

Quaternion
Quaternion(float x, float y, float z, float w)
Creates a new quaternion of the form w + xi + yj + zk.

Dot
float Dot(Quaternion factor)
The 4D scalar product of two quaternions. represents the angle between the quaternions in the range [1, 0].

Invert
Quaternion Invert()
Returns a quaternion with the complimentary rotation.

Norm
float Norm()
Normalizes the 4D vector length.

SetPitchYawRoll
void SetPitchYawRoll(float pitch, float yaw, float roll)
Recomputes the quaternion from the supplied Euler angles.

ToKVString
string ToKVString()
Returns a string with the values separated by one space.

ToQAngle
QAngle ToQAngle()
Returns the angles resulting from the rotation.

AddThinkToEnt
void AddThinkToEnt(handle entity, string FuncName)
Sets a function in the entity's script to rerun by itself constantly. Pass null as the function name to remove a think function. The default think interval is 0.1s, unless overridden by returning a different time interval in seconds in the think function. TF2 runs at 66 ticks per second, so the lowest possible interval is 0.015 seconds. Set to -1 to think every tick.

AddToScriptHelp
AddToScriptHelp()


AllowThirdPersonCamera
bool AllowThirdPersonCamera()


ArePlayersInHell
bool ArePlayersInHell()


Assert
void Assert(bool value, string optional_message)
Test value and if not true, throws exception, optionally with message.

ClearGameEventCallbacks
void ClearGameEventCallbacks()
Empties the tables of game event callback functions.

CreateProp
handle CreateProp(string classname, Vector origin, string model_name, int activity)
Create a prop

CreateSceneEntity
handle CreateSceneEntity(string scene)
Create a scene entity to play the specified scene.

developer
int developer()
The current level of the developer console variable.

DispatchParticleEffect
void DispatchParticleEffect(string name, Vector origin, Vector angles)
Dispatches a one-off particle system. To pass angles into this, use the .Forward() method on a QAngle.

Document
void Document(unknown symbolOrTable, unknown itemIfSymbol = null, string descriptionIfSymbol = null)


DoEntFire
void DoEntFire(string target, string action, string value, float delay, handle activator, handle caller)
Generate an entity I/O event. The caller and activator argument takes a CBaseEntity script handle, and entities assigned can receive inputs with target set to !self, or !activator / !caller.

DoIncludeScript
bool DoIncludeScript(string file, handle/table scope)
Execute a script. and put all its content for the argument passed to thescopeparameter. (internal)

IncludeScript
bool IncludeScript(string file, handle scope = null)
Wrapper for DoIncludeScript

EmitAmbientSoundOn
void EmitAmbientSoundOn(string soundName, float volume, int soundlevel, int pitch, handle entity)
Play named sound on an entity using configurations similar to ambient_generic. Soundlevel is in decibels.

StopAmbientSoundOn
void StopAmbientSoundOn(string soundName, handle entity)
Stop named sound on an entity using configurations similar to ambient_generic.

EmitSoundEx
void EmitSoundEx(handle table)
Play a sound. Takes in a script table of params: sound_name, channel, volume, sound_level, flags, pitch, special_dsp, origin, delay, sound_time, entity, speaker_entity, filter_type, filter_param. All parameters are optional except sound_name. See the main page for more details.

EmitSoundOn
void EmitSoundOn(string soundScript, handle entity)
Play named sound on an entity. Legacy only, use EmitSoundEx

StopSoundOn
void StopSoundOn(string soundScript, handle entity)
Stop named sound on an entity.

EmitSoundOnClient
void EmitSoundOnClient(string soundScript, handle player)
Play named sound only on the client for the specified player. NOTE: This only supports soundscripts. Legacy only, use EmitSoundEx.

EntFire
void EntFire(string target, string action, string value = null, float delay = 0, handle activator = null)
Wrapper for DoEntFire() that setsactivator to null, but has nocallerparam. Negative delays are clamped to 0.

EntFireByHandle
void EntFireByHandle(handle entity, string action, string value, float delay, handle activator, handle caller)
Generate an entity I/O event. First parameter is an entity instance. Negative delays are clamped to 0.

EntIndexToHScript
handle EntIndexToHScript(int entIndex)
Turn an entity index integer to an HScript representing that entity's script instance.

FileToString
string FileToString(string file)
Reads a string from file located in the game's scriptdata folder. Returns the string from the file, null if no file or file is greater than 16384 bytes.

FindCircularReference
FindCircularReference()


FindCircularReferences
FindCircularReferences()


FireGameEvent
bool FireGameEvent(string name, handle table)
Fire a game event to a listening callback function in script. Parameters are passed in a squirrel table.

FireScriptHook
bool FireScriptHook(string name, handle table)
Fire a script hoook to a listening callback function in script. Parameters are passed in a squirrel table.

FireScriptEvent
void FireScriptEvent(string event, table params)
Wrapper for __RunEventCallbacks()

ForceEnableUpgrades
void ForceEnableUpgrades(int state)
Whether to force on MvM-styled upgrades on/off. 0 -> default, 1 -> force off, 2 -> force on

ForceEscortPushLogic
void ForceEscortPushLogic(int state)
Forces payload pushing logic. 0 -> default, 1 -> force off, 2 -> force on

FlagsMayBeCapped
bool FlagsMayBeCapped()
May a flag be captured?

FrameTime
float FrameTime()
Get the time spent on the server in the last frame. Usually this will be 0.015 (the default tickrate)

GameModeUsesCurrency
bool GameModeUsesCurrency()
Does the current gamemode have currency?

GameModeUsesMiniBosses
bool GameModeUsesMiniBosses()
Does the current gamemode have minibosses?

GameModeUsesUpgrades
bool GameModeUsesUpgrades()
Does the current gamemode have upgrades?

GetClassLimit
int GetClassLimit(int class)
Get class limit for class. See Constants.ETFClass

GetDeveloperLevel
int GetDeveloperLevel()
Gets the level of 'developer'

GetFrameCount
int GetFrameCount()
Returns the engines current frame count

GetFriction
float GetFriction(handle player)
Returns the Friction on a player entity, meaningless if not a player

GetFunctionSignature
string GetFunctionSignature(function func, string prefix)


GetGravityMultiplier
float GetGravityMultiplier()


GetListenServerHost
handle GetListenServerHost()
Get the local player on a listen server. Returns null on dedicated servers.

GetMannVsMachineAlarmStatus
bool GetMannVsMachineAlarmStatus()


GetMapName
string GetMapName()
Get the name of the map.

GetModelIndex
int GetModelIndex(string filename)
Returns the index of the named model.

GetOvertimeAllowedForCTF
bool GetOvertimeAllowedForCTF()


GetPhysAngularVelocity
Vector GetPhysAngularVelocity(handle entity)
Returns the Angular velocity of the entity. Deprecated, use the GetPhysAngularVelocity method on the entity instead.

GetPhysVelocity
Vector GetPhysVelocity(handle entity)
Returns the velocity of the entity. Deprecated, use the GetPhysVelocity method on the entity instead.

GetPlayerFromUserID
handle GetPlayerFromUserID(int userid)
Given a user id, return the entity, or null.

GetRoundState
int GetRoundState()
Get current round state. See Constants.ERoundState

GetSoundDuration
float GetSoundDuration(string soundname, string actormodelname)
Returns float duration of the sound. Actor model name is optional and can be left null.

GetStopWatchState
int GetStopWatchState()
Get the current stopwatch state. See Constants.EStopwatchState

GetWinningTeam
int GetWinningTeam()
Who won!

HaveStopWatchWinner
bool HaveStopWatchWinner()


InMatchStartCountdown
bool InMatchStartCountdown()
Are we in the pre-match/setup state?

InOvertime
bool InOvertime()
Currently in overtime?

IsAttackDefenseMode
bool IsAttackDefenseMode()


IsBirthday
bool IsBirthday()
Are we in birthday mode?

IsCompetitiveMode
bool IsCompetitiveMode()
Playing competitive?

IsDedicatedServer
bool IsDedicatedServer()
Returns true if this server is a dedicated server.

IsDefaultGameMode
bool IsDefaultGameMode()
The absence of arena, mvm, tournament mode, etc

IsHolidayActive
bool IsHolidayActive(int holiday)
Is the given holiday active? See Constants.EHoliday

IsHolidayMap
bool IsHolidayMap(int holiday)
Playing a holiday map? See Constants.EHoliday

IsInArenaMode
bool IsInArenaMode()
Playing arena mode?

IsInKothMode
bool IsInKothMode()
Playing king of the hill mode?

IsInMedievalMode
bool IsInMedievalMode()
Playing medieval mode?

IsInWaitingForPlayers
bool IsInWaitingForPlayers()
Are we waiting for some stragglers?

IsMannVsMachineMode
bool IsMannVsMachineMode()
Playing MvM? Beep boop

IsMannVsMachineRespecEnabled
bool IsMannVsMachineRespecEnabled()
Are players allowed to refund their upgrades?

IsMatchTypeCasual
bool IsMatchTypeCasual()
Playing casual?

IsMatchTypeCompetitive
bool IsMatchTypeCompetitive()
Playing competitive?

IsModelPrecached
bool IsModelPrecached(string modelname)
Checks if the modelname is precached.

IsSoundPrecached
bool IsSoundPrecached(string soundname)
Checks if the soundname is precached.

IsPasstimeMode
bool IsPasstimeMode()
No ball games.

IsPlayerABot
bool IsPlayerABot(handle player)
Is this player/entity a puppet or AI bot. To check if the player is a AI bot (CTFBot) specifically, use IsBotOfType instead.

IsPowerupMode
bool IsPowerupMode()
Playing powerup mode? Not compatible with MvM

IsPVEModeActive
bool IsPVEModeActive()


IsQuickBuildTime
bool IsQuickBuildTime()
If an engie places a building, will it immediately upgrade? Eg. MvM pre-round etc.

IsTruceActive
bool IsTruceActive()


IsUsingGrapplingHook
bool IsUsingGrapplingHook()


IsUsingSpells
bool IsUsingSpells()


IsWeakref
bool IsWeakref()


LocalTime
void LocalTime(table out)
Fills out a table with the local time (second, minute, hour, day, month, year, dayofweek, dayofyear, daylightsavings). This mirrors the tm structure in C++

MakeNamespace
void MakeNamespace()


MapHasMatchSummaryStage
bool MapHasMatchSummaryStage()


MatchmakingShouldUseStopwatchMode
bool MatchmakingShouldUseStopwatchMode()


MaxClients
float MaxClients()
Get the current number of max clients set by the maxplayers command.

PickupObject
void PickupObject(handle player, handle entity)
Object from world is put into the "Held" slot of the player. Warning: it will smoothly interpolate from where it is to the players hand - which is a bit goofy if it is on other side of level. Does nothing in Team Fortress 2 as the code is not implemented

PlayerInstanceFromIndex
CBasePlayer PlayerInstanceFromIndex(int index)
Get a script handle of a player using the player index.

PlayerReadyStatus_ArePlayersOnTeamReady
bool PlayerReadyStatus_ArePlayersOnTeamReady(int team)


PlayerReadyStatus_HaveMinPlayersToEnable
bool PlayerReadyStatus_HaveMinPlayersToEnable()


PlayerReadyStatus_ResetState
void PlayerReadyStatus_ResetState()


PlayersAreOnMatchSummaryStage
bool PlayersAreOnMatchSummaryStage()


PointsMayBeCaptured
bool PointsMayBeCaptured()
Are points able to be captured?

PrecacheEntityFromTable
bool PrecacheEntityFromTable(table keyvalues)
Precache an entity from KeyValues in a table. Internally this function creates the entity, fire DispatchSpawn and removes it instantly. Returns false if the table has no classname key, if the value of classname is null or empty, or if the entity failed to be created.

PrecacheModel
int PrecacheModel(string filename)
Precache a model and return index of the model. Returns -1 if null or empty filename is passed in. Missing models will still return a new index.

PrecacheScriptSound
bool PrecacheScriptSound(string soundName)
Preache a soundscript. Returns false if soundscript is missing, or if a null or empty sound name is passed in.

PrecacheSound
void PrecacheSound(string soundName)
Precache a raw sound. Returns false if a null or empty sound name is passed in.

PrintHelp
PrintHelp()
Equivalent to running script_help command.

RandomFloat
float RandomFloat(float min, float max)
Generate a random floating-point number within a range, inclusive.

RandomInt
int RandomInt(int min, int max)
Generate a random integer within a range, inclusive.

RegisterFunctionDocumentation
void RegisterFunctionDocumentation(unknown func, string name, string signature, string description)


RegisterScriptGameEventListener
void RegisterScriptGameEventListener(string eventName)
Register as a listener for a game event from script. It's what __CollectGameEventCallbacks() uses to register event callbacks to the C++ code.

RegisterScriptHookListener
void RegisterScriptHookListener(string name)
Register as a listener for a script hook from script.

RetrieveNativeSignature
string RetrieveNativeSignature(function func)


RotateOrientation
QAngle RotateOrientation(QAngle, QAngle)
Rotate a QAngle by another QAngle.

RotatePosition
Vector RotatePosition(Vector origin, QAngle rotation, Vector input)
Rotate the input Vector around an origin.

ScreenFade
void ScreenFade(handle player, int red, int green, int blue, int alpha, float fadeTime, float fadeHold, int flags)
Start a customisable screenfade. If no player is specified, the fade will apply to all players. For a list of flags, see FFADE constants.

ScreenShake
void ScreenShake(Vector vecCenter, float flAmplitude, float flFrequency, float flDuration, float flRadius, int eCommand, bool bAirShake)
Start a customisable screenshake. Set eCommand to 0 to start a shake, or 1 to stop an existing shake.

ScriptHooksEnabled
bool ScriptHooksEnabled()
Returns whether script hooks are currently enabled.

SendGlobalGameEvent
bool SendGlobalGameEvent(string event_name, handle params)
Sends a real game event to everything. Parameters are passed in a squirrel table.

SendToConsole
void SendToConsole(string command)
Issues a command to the local client, as if they typed in the command in their console. Does nothing on dedicated servers.

SendToServerConsole
void SendToServerConsole(string command)
Issues a command to the server, as if typed in the console.

SendToConsoleServer
void SendToConsoleServer(string command)
Copy of SendToServerConsole with another name for compat.

SetFakeClientConVarValue
void SetFakeClientConVarValue(handle bot, string cvar, string value)
Sets a USERINFO client ConVar for a fakeclient.

SetGravityMultiplier
void SetGravityMultiplier(float multiplier)


SetMannVsMachineAlarmStatus
void SetMannVsMachineAlarmStatus(bool status)


SetOvertimeAllowedForCTF
void SetOvertimeAllowedForCTF(bool state)


SetPlayersInHell
void SetPlayersInHell(bool state)


SetSkyboxTexture
void SetSkyboxTexture(string texture)
Sets the current skybox texture. The path is relative to "materials/skybox/". Only the main name of a skybox texture is needed, for example "sky_gravel_01".

SetUsingSpells
void SetUsingSpells(bool state)


SpawnEntityFromTable
handle SpawnEntityFromTable(string name, handle keyvalues)
Spawn entity from KeyValues in table - 'name' is entity name, rest are KeyValues for spawn.

SpawnEntityGroupFromTable
bool SpawnEntityGroupFromTable(handle groups)
Hierarchically spawn an entity group from a set of spawn tables. This computes a spawn order for entities so that parenting is resolved correctly.

StringToFile
void StringToFile(string file, string string)
Stores a string as a file, located in the game's scriptdata folder.

Time
float Time()
Get the current server time in seconds

TraceLine
float TraceLine(Vector start, Vector end, handle ignore)
Return fraction along line that hits world or models

TraceLineEx
bool TraceLineEx(table traceTable)
Input Table: start, end, mask (optional), ignore (optional). Output Table: pos, fraction, hit, enthit, allsolid, startpos, endpos, startsolid, plane_normal, plane_dist, surface_name, surface_flags, surface_props. Returns false if start or end is not specified.

TraceLinePlayersIncluded
float TraceLinePlayersIncluded(Vector, Vector, handle)
given 2 points & ent to ignore, return fraction along line that hits world, models, players or npcs

TraceHull
bool TraceHull(table traceTable)
Input Table: start, end, hullmin, hullmax, mask (optional), ignore (optional). Output Table: pos, fraction, hit, enthit, allsolid, startpos, endpos, startsolid, plane_normal, plane_dist, surface_name, surface_flags, surface_props. Returns false if start, end, hullmin or hullmax is not specified.

UniqueString
string UniqueString(string input)
Generate a string guaranteed to be unique across the life of the script VM, with an optional root string. Useful for adding data to tables when not sure what keys are already in use in that table.

DoUniqueString
string DoUniqueString(string input)
Unknown; presumably an internal function called by UniqueString, so call that instead.

UsePlayerReadyStatusMode
bool UsePlayerReadyStatusMode()


VSquirrel_OnCreateScope
table VSquirrel_OnCreateScope(any value, table scope)
Creates a new scope with the name of value in the submitted table (includes unique params).

VSquirrel_OnReleaseScope
void VSquirrel_OnReleaseScope(table createdScope)
Removes a scope created via VSquirrel_OnCreateScope.

__CollectEventCallbacks
void __CollectEventCallbacks(scope, prefix, globalTableName, regFunc)
Overloaded function. Its only used for this: __CollectEventCallbacks(scope, "OnGameEvent_", "GameEventCallbacks", ::RegisterScriptGameEventListener)

__CollectGameEventCallbacks
void __CollectGameEventCallbacks(table scope)
Wrapper that registers callbacks for both OnGameEvent_x and OnScriptEvent_ functions. Done using the __CollectEventCallbacks function.

__ReplaceClosures
void __ReplaceClosures(script, scope)


__RunEventCallbacks
void __RunEventCallbacks(event, params, prefix, globalTableName, bWarnIfMissing)
Call all functions in the callback array for the given game event

__RunGameEventCallbacks
void __RunGameEventCallbacks(event, params)
Wrapper for __RunEventCallbacks()

__RunScriptHookCallbacks
void __RunScriptHookCallbacks()


ClientPrint
void ClientPrint(CBasePlayer player, EHudNotify destination, string message)
Print a client message. If you pass null instead of a valid player, the message will be sent to all clients. When printing to chat (HUD_PRINTTALK), the color of the text can be changed by inserting this sequence: \x07RRGGBB where RR GG BB is the hexadecimal format of the color. Transparency can be specified by a different sequence: \x08RRGGBBAA, where RR GG BB AA is the hexadecimal format of the color + alpha. All text following this sequence will be colored. Multiple sequences can be used in combination. If using color sequences, there MUST be a color sequence at the beginning of the string, or color codes won't work!.

DebugDrawBox
void DebugDrawBox(Vector origin, vector min, vector max, int r, int g, int b, int alpha, float duration)
Draw a debug overlay box.

DebugDrawBoxAngles
void DebugDrawBoxAngles(Vector origin, Vector min, Vector max, QAngle direction, Vector rgb, int alpha, float duration)
Draw a debug oriented box (cent, min, max, angles(p,y,r), vRgb, a, duration).

DebugDrawBoxDirection
void DebugDrawBoxDirection(Vector center, Vector min, Vector max, Vector forward, Vector rgb, float alpha, float duration)
Draw a debug forward box.

DebugDrawCircle
void DebugDrawCircle(Vector center, Vector rgb, float alpha, float radius, bool ztest, float duration)
Draw a debug circle.

DebugDrawClear
void DebugDrawClear()
Try to clear all the debug overlay info.

DebugDrawLine
void DebugDrawLine(Vector start, Vector end, int red, int green, int blue, bool zTest, float time)
Draw a debug overlay line.

DebugDrawLine_vCol
void DebugDrawLine_vCol(Vector start, vector end, vector rgb, bool ztest, float duration)
Draw a debug line using color vec.

DebugDrawScreenTextLine
void DebugDrawScreenTextLine(float x, float y, int lineOffset, string text, int r, int g, int b, int a, float duration)
Draw text with a line offset.

DebugDrawText
void DebugDrawText(Vector origin, string text, bool useViewCheck, float duration)
Draw text on the screen, starting on the position of origin.

__DumpScope
void __DumpScope(int indentation, handle scope)
Dumps a scope's contents and expands all tables and arrays; this is what the ent_script_dump command uses.

DumpObject
void DumpObject(handle object)
Dumps information about a class or instance.

Msg
void Msg(string message)
Prints message to console without any line feed after.

printf
void printf(string format, args...)
Prints message to console with C style formatting. The line feed is not included.

printl
void printl(string message)
Prints message to console with a line feed after.

realPrint
void realPrint(string message)
Identical to print. print seems to be a wrapper for this.

Say
void Say(CBasePlayer player, string message, bool teamOnly)
Calling this will have the specified player send the message to chat, either to teamOnly (true) or to everyone.

ShowMessage
void ShowMessage(string message)
Print a hud message on all clients. Non-functional.

array
array(int length, any fill = null)
Returns a new array of the given length where each element is set to fill (null by default).

assert
assert(bool exp)
Throws an assertion error if the given expression evaluates to false (i.e. the values 0, 0.0, null and false)

callee
function callee()
Returns the currently running closure.

castf2i
int castf2i(float value)
Interprets the float's bytes as if it were a 32-bit integer representation

casti2f
float casti2f(int value)
Interprets the integer's bytes as if it were a floating-point encoding

collectgarbage
int collectgarbage()
Runs the garbage collector and returns the number of reference cycles found(and deleted) This function only works on garbage collector builds.

compilestring
any compilestring(string string, string buffername = null)
Compiles a string containing a squirrel script into a function and returns it.

dummy
dummy()


enabledebuginfo
void enabledebuginfo(any enable)
Enable/disable the debug line information generation at compile time. enable != null enables . enable == null disables.

error
void error(string x)
Prints x in the standard error output .

getconsttable
table getconsttable()
Returns the const table of the VM.

getroottable
table getroottable()
Returns the root table of the VM.

getstackinfos
table getstackinfos(int stacklevel)
Returns the stack frame informations at the given stack level (0 is the current function 1 is the caller and so on). If the stack level doesn't exist the function returns null.

newthread
coroutine newthread(function threadfunc)
Creates a new cooperative thread object(coroutine) and returns it .

print
print(string message)
Prints the given parameter but with no newline unlike printl()

resurrectunreachable
array resurrectunreachable()
Runs the garbage collector and returns an array containing all unreachable object found. If no unreachable object is found, null is returned instead. This function is meant to help debugging reference cycles. This function only works on garbage collector builds.

setconsttable
table setconsttable(table consttable)
Sets the const table of the VM which also returns the previous const table.

setdebughook
void setdebughook(function hook_func)
Sets the debug hook.

seterrorhandler
void seterrorhandler(function func)
Sets the runtime error handler.

setroottable
table setroottable(table roottable)
Sets the root table of the VM which also returns the previous root table.

suspend
void suspend(any ret)
Suspends the coroutine that called this function.

swap2
int swap2(int value)
Swaps bytes 1 and 2 of the integer

swap4
int swap4(int value)
Reverse byte order of the four bytes

swapfloat
float swapfloat(float value)
Reverse byte order of the four bytes

type
type(var)
Returns var._typeof(), i.e. the type of the given parameter as a string

blob
blob(int initSize = 0)


eos
int eos()


flush
flush()


len
int len()


readblob
blob readblob(int numberOfBytes)


readn
any readn(char dataType)


resize
void resize(int newSize)


seek
int seek(int offset, int offsetBasis)


swap2
void swap2()


swap4
void swap4()


tell
int tell()


writeblob
void writeblob (blob blob)


writen
void writen(num value, char dataType)


abs
abs(num x)
Returns |x| as integer unlike fabs()

acos
acos(num x)
Returns cos^-1(x), -1 <= x <= 1

asin
asin(num x)
Returns sin^-1(x), -1 <= x <= 1

atan
atan(num x)
Returns tan^-1(x)

atan2
atan2(num y, num x)
Returns the angle between the ray from the point (0, 0) through (x, y) and the positive x-axis, confined to (-PI, PI). Note the order of the parameters x and y!

ceil
ceil(num x)
Returns the smallest integer that is >= x

cos
cos(num x)
Returns cos(x)

exp
exp(num x)
Returns exp(x) = e^x

fabs
fabs(num x)
Returns |x| as float unlike abs()

floor
floor(num x)
Returns the largest integer that is <= x

log
log(num x)
Returns log_e(x) = ln(x)

log10
log10(num x)
Returns log_10(x)

pow
pow(num x, num y)
Returns x^y

rand
rand()
Returns a random integer with 0 <= rand() <= RAND_MAX. The value of RAND_MAX is 32768 on Windows, but 2147483647 on Linux. This can cause undeterministic behavior between a server running on Windows vs Linux. Instead, use RandomInt or RandomFloat.

sin
sin(num x)
Returns sin(x)

sqrt
sqrt(num x)
Returns the square root of x

srand
srand(num seed)
Sets the starting point for generating a series of pseudorandom integers

tan
tan(num x)
Returns tan(x)

find
int find(string searchString, int startIndex = null)
Looks for the sub-string passed as its first parameter, starting at either the beginning of the string or at a specific character index if one is provided as a second parameter. If the sub-string is found, returns the index at which it first occurs, otherwise returns null.

len
int len()
Returns the length of the string, ie. the number of characters it comprises.

slice
string slice(int startIndex, int endIndex = null)
Creates a sub-string from a string. Copies characters from startIndex to endIndex. If endIndex is not specified, copies until the last character. If the provided end index is beyond the string, an exception is thrown.

tofloat
float tofloat()
Returns float value represented by the string. Must only contain numeric characters and/or plus and minus symbols. An exception is thrown otherwise.

tointeger
int tointeger()
Returns integer value represented by the string. Must only contain numeric characters. An exception is thrown otherwise. Hexadecimal notation is supported (i.e. 0xFF). If a hexadecimal string contains more than 10 characters, including the 0x, returns -1.

tolower
string tolower()
Returns a new string with all upper-case characters converted to lower-case.

toupper
string toupper()
Returns a new string with all lower-case characters converted to upper-case.

endswith
bool endswith(string str, string cmp)
Returns true if the end of the string matches the comparison string.

escape
string escape(string str)
Returns a string with backslashes before characters that need to be escaped: “ a b t n v f r \ ” ’ 0 xNN

format
format(string format, args...)
Returns a formatted string. Same rules as the standard C functions (except * is not supported).

lstrip
lstrip(string str)
Removes whitespace at the beginning of the given string

rstrip
rstrip(string str)
Removes whitespace at the end of the given string

split
string split(string str, string separator, bool skipempty = false)
Returns an array of strings split at each point where a separator character occurs in str. The separator is not returned as part of any array element. the parameter separators is a string that specifies the characters as to be used for the splitting. If skipempty is true, empty strings are not added to array.

startswith
bool startswith(string str, string cmp)
Returns true if the beginning of the string matches the comparison string.

strip
strip(string str)
Removes whitespace at the beginning and end of the given string

BeginScriptDebug
void BeginScriptDebug()


EndScriptDebug
void EndScriptDebug()


ScriptDebugAddTextFilter
void ScriptDebugAddTextFilter()


ScriptDebugAddTrace
void ScriptDebugAddTrace()


ScriptDebugAddWatch
void ScriptDebugAddWatch()


ScriptDebugAddWatches
void ScriptDebugAddWatches()


ScriptDebugAddWatchPattern
void ScriptDebugAddWatchPattern()


ScriptDebugClearTraces
void ScriptDebugClearTraces()


ScriptDebugClearWatches
void ScriptDebugClearWatches()


ScriptDebugDefaultWatchColor
void ScriptDebugDefaultWatchColor()


ScriptDebugDraw
void ScriptDebugDraw()


ScriptDebugDrawWatches
void ScriptDebugDrawWatches()


ScriptDebugDumpKeys
void ScriptDebugDumpKeys()


ScriptDebugHook
void ScriptDebugHook()


ScriptDebugIterateKeys
void ScriptDebugIterateKeys()


ScriptDebugIterateKeysRecursive
void ScriptDebugIterateKeysRecursive()


ScriptDebugRemoveTextFilter
void ScriptDebugRemoveTextFilter()


ScriptDebugRemoveTrace
void ScriptDebugRemoveTrace()


ScriptDebugRemoveWatch
void ScriptDebugRemoveWatch()


ScriptDebugRemoveWatches
void ScriptDebugRemoveWatches()


ScriptDebugRemoveWatchPattern
void ScriptDebugRemoveWatchPattern()


ScriptDebugText
void ScriptDebugText()


ScriptDebugTextDraw
void ScriptDebugTextDraw()


ScriptDebugTextPrint
void ScriptDebugTextPrint()


ScriptDebugTextTrace
void ScriptDebugTextTrace()


ScriptDebugTraceAll
void ScriptDebugTraceAll()


ScriptDebugWatches
void ScriptDebugWatches()


__VScriptServerDebugHook
__VScriptServerDebugHook()


TF_BOT_TYPE
TF_BOT_TYPE
1337

COLLISION_GROUP_NONE
COLLISION_GROUP_NONE
0

COLLISION_GROUP_DEBRIS
COLLISION_GROUP_DEBRIS
1

COLLISION_GROUP_DEBRIS_TRIGGER
COLLISION_GROUP_DEBRIS_TRIGGER
2

COLLISION_GROUP_INTERACTIVE_DEBRIS
COLLISION_GROUP_INTERACTIVE_DEBRIS
3

COLLISION_GROUP_INTERACTIVE
COLLISION_GROUP_INTERACTIVE
4

COLLISION_GROUP_PLAYER
COLLISION_GROUP_PLAYER
5

COLLISION_GROUP_BREAKABLE_GLASS
COLLISION_GROUP_BREAKABLE_GLASS
6

COLLISION_GROUP_VEHICLE
COLLISION_GROUP_VEHICLE
7

COLLISION_GROUP_PLAYER_MOVEMENT
COLLISION_GROUP_PLAYER_MOVEMENT
8

COLLISION_GROUP_NPC
COLLISION_GROUP_NPC
9

COLLISION_GROUP_IN_VEHICLE
COLLISION_GROUP_IN_VEHICLE
10

COLLISION_GROUP_WEAPON
COLLISION_GROUP_WEAPON
11

COLLISION_GROUP_VEHICLE_CLIP
COLLISION_GROUP_VEHICLE_CLIP
12

COLLISION_GROUP_PROJECTILE
COLLISION_GROUP_PROJECTILE
13

COLLISION_GROUP_DOOR_BLOCKER
COLLISION_GROUP_DOOR_BLOCKER
14

COLLISION_GROUP_PASSABLE_DOOR
COLLISION_GROUP_PASSABLE_DOOR
15

COLLISION_GROUP_DISSOLVING
COLLISION_GROUP_DISSOLVING
16

COLLISION_GROUP_PUSHAWAY
COLLISION_GROUP_PUSHAWAY
17

COLLISION_GROUP_NPC_ACTOR
COLLISION_GROUP_NPC_ACTOR
18

COLLISION_GROUP_NPC_SCRIPTED
COLLISION_GROUP_NPC_SCRIPTED
19

LAST_SHARED_COLLISION_GROUP
LAST_SHARED_COLLISION_GROUP
20

CRIT_NONE
CRIT_NONE
0

CRIT_MINI
CRIT_MINI
1

CRIT_FULL
CRIT_FULL
2

HITGROUP_GENERIC
HITGROUP_GENERIC
0

HITGROUP_HEAD
HITGROUP_HEAD
1

HITGROUP_CHEST
HITGROUP_CHEST
2

HITGROUP_STOMACH
HITGROUP_STOMACH
3

HITGROUP_LEFTARM
HITGROUP_LEFTARM
4

HITGROUP_RIGHTARM
HITGROUP_RIGHTARM
5

HITGROUP_LEFTLEG
HITGROUP_LEFTLEG
6

HITGROUP_RIGHTLEG
HITGROUP_RIGHTLEG
7

HITGROUP_GEAR
HITGROUP_GEAR
10

kHoliday_None
kHoliday_None
0

kHoliday_TFBirthday
kHoliday_TFBirthday
1

kHoliday_Halloween
kHoliday_Halloween
2

kHoliday_Christmas
kHoliday_Christmas
3

kHoliday_CommunityUpdate
kHoliday_CommunityUpdate
4

kHoliday_EOTL
kHoliday_EOTL
5

kHoliday_Valentines
kHoliday_Valentines
6

kHoliday_MeetThePyro
kHoliday_MeetThePyro
7

kHoliday_FullMoon
kHoliday_FullMoon
8

kHoliday_HalloweenOrFullMoon
kHoliday_HalloweenOrFullMoon
9

kHoliday_HalloweenOrFullMoonOrValentines
kHoliday_HalloweenOrFullMoonOrValentines
10

kHoliday_AprilFools
kHoliday_AprilFools
11

kHoliday_Soldier
kHoliday_Soldier
12

kHoliday_Summer
kHoliday_Summer
13

kHolidayCount
kHolidayCount
14

HUD_PRINTNOTIFY
HUD_PRINTNOTIFY
1

HUD_PRINTCONSOLE
HUD_PRINTCONSOLE
2

HUD_PRINTTALK
HUD_PRINTTALK
3

HUD_PRINTCENTER
HUD_PRINTCENTER
4

MOVECOLLIDE_DEFAULT
MOVECOLLIDE_DEFAULT
0

MOVECOLLIDE_FLY_BOUNCE
MOVECOLLIDE_FLY_BOUNCE
1

MOVECOLLIDE_FLY_CUSTOM
MOVECOLLIDE_FLY_CUSTOM
2

MOVECOLLIDE_FLY_SLIDE
MOVECOLLIDE_FLY_SLIDE
3

MOVECOLLIDE_MAX_BITS
MOVECOLLIDE_MAX_BITS
3

MOVECOLLIDE_COUNT
MOVECOLLIDE_COUNT
4

MOVETYPE_NONE
MOVETYPE_NONE
0

MOVETYPE_ISOMETRIC
MOVETYPE_ISOMETRIC
1

MOVETYPE_WALK
MOVETYPE_WALK
2

MOVETYPE_STEP
MOVETYPE_STEP
3

MOVETYPE_FLY
MOVETYPE_FLY
4

MOVETYPE_FLYGRAVITY
MOVETYPE_FLYGRAVITY
5

MOVETYPE_VPHYSICS
MOVETYPE_VPHYSICS
6

MOVETYPE_PUSH
MOVETYPE_PUSH
7

MOVETYPE_NOCLIP
MOVETYPE_NOCLIP
8

MOVETYPE_LADDER
MOVETYPE_LADDER
9

MOVETYPE_OBSERVER
MOVETYPE_OBSERVER
10

MOVETYPE_CUSTOM
MOVETYPE_CUSTOM
11

MOVETYPE_LAST
MOVETYPE_LAST
11

NORTH_WEST
NORTH_WEST
0

NORTH_EAST
NORTH_EAST
1

SOUTH_EAST
SOUTH_EAST
2

SOUTH_WEST
SOUTH_WEST
3

NUM_CORNERS
NUM_CORNERS
4

NORTH
NORTH
0

EAST
EAST
1

SOUTH
SOUTH
2

WEST
WEST
3

NUM_DIRECTIONS
NUM_DIRECTIONS
4

FORWARD
FORWARD
0

RIGHT
RIGHT
1

BACKWARD
BACKWARD
2

LEFT
LEFT
3

UP
UP
4

DOWN
DOWN
5

NUM_RELATIVE_DIRECTIONS
NUM_RELATIVE_DIRECTIONS
6

GO_NORTH
GO_NORTH
0

GO_EAST
GO_EAST
1

GO_SOUTH
GO_SOUTH
2

GO_WEST
GO_WEST
3

GO_LADDER_UP
GO_LADDER_UP
4

GO_LADDER_DOWN
GO_LADDER_DOWN
5

GO_JUMP
GO_JUMP
6

GO_ELEVATOR_UP
GO_ELEVATOR_UP
7

GO_ELEVATOR_DOWN
GO_ELEVATOR_DOWN
8

NUM_TRAVERSE_TYPES
NUM_TRAVERSE_TYPES
9

kRenderFxNone
kRenderFxNone
0

kRenderFxPulseSlow
kRenderFxPulseSlow
1

kRenderFxPulseFast
kRenderFxPulseFast
2

kRenderFxPulseSlowWide
kRenderFxPulseSlowWide
3

kRenderFxPulseFastWide
kRenderFxPulseFastWide
4

kRenderFxFadeSlow
kRenderFxFadeSlow
5

kRenderFxFadeFast
kRenderFxFadeFast
6

kRenderFxSolidSlow
kRenderFxSolidSlow
7

kRenderFxSolidFast
kRenderFxSolidFast
8

kRenderFxStrobeSlow
kRenderFxStrobeSlow
9

kRenderFxStrobeFast
kRenderFxStrobeFast
10

kRenderFxStrobeFaster
kRenderFxStrobeFaster
11

kRenderFxFlickerSlow
kRenderFxFlickerSlow
12

kRenderFxFlickerFast
kRenderFxFlickerFast
13

kRenderFxNoDissipation
kRenderFxNoDissipation
14

kRenderFxDistort
kRenderFxDistort
15

kRenderFxHologram
kRenderFxHologram
16

kRenderFxExplode
kRenderFxExplode
17

kRenderFxGlowShell
kRenderFxGlowShell
18

kRenderFxClampMinScale
kRenderFxClampMinScale
19

kRenderFxEnvRain
kRenderFxEnvRain
20

kRenderFxEnvSnow
kRenderFxEnvSnow
21

kRenderFxSpotlight
kRenderFxSpotlight
22

kRenderFxRagdoll
kRenderFxRagdoll
23

kRenderFxPulseFastWider
kRenderFxPulseFastWider
24

kRenderFxMax
kRenderFxMax
25

kRenderNormal
kRenderNormal
0

kRenderTransColor
kRenderTransColor
1

kRenderTransTexture
kRenderTransTexture
2

kRenderGlow
kRenderGlow
3

kRenderTransAlpha
kRenderTransAlpha
4

kRenderTransAdd
kRenderTransAdd
5

kRenderEnvironmental
kRenderEnvironmental
6

kRenderTransAddFrameBlend
kRenderTransAddFrameBlend
7

kRenderTransAlphaAdd
kRenderTransAlphaAdd
8

kRenderWorldGlow
kRenderWorldGlow
9

kRenderNone
kRenderNone
10

kRenderModeCount
kRenderModeCount
11

GR_STATE_INIT
GR_STATE_INIT
0

GR_STATE_PREGAME
GR_STATE_PREGAME
1

GR_STATE_STARTGAME
GR_STATE_STARTGAME
2

GR_STATE_PREROUND
GR_STATE_PREROUND
3

GR_STATE_RND_RUNNING
GR_STATE_RND_RUNNING
4

GR_STATE_TEAM_WIN
GR_STATE_TEAM_WIN
5

GR_STATE_RESTART
GR_STATE_RESTART
6

GR_STATE_STALEMATE
GR_STATE_STALEMATE
7

GR_STATE_GAME_OVER
GR_STATE_GAME_OVER
8

GR_STATE_BONUS
GR_STATE_BONUS
9, This constant entry is missing!

GR_STATE_BETWEEN_RNDS
GR_STATE_BETWEEN_RNDS
10, This constant entry is missing!

GR_NUM_ROUND_STATES
GR_NUM_ROUND_STATES
11

RECIPIENT_FILTER_DEFAULT
RECIPIENT_FILTER_DEFAULT
0

RECIPIENT_FILTER_PAS_ATTENUATION
RECIPIENT_FILTER_PAS_ATTENUATION
1

RECIPIENT_FILTER_PAS
RECIPIENT_FILTER_PAS
2

RECIPIENT_FILTER_PVS
RECIPIENT_FILTER_PVS
3

RECIPIENT_FILTER_SINGLE_PLAYER
RECIPIENT_FILTER_SINGLE_PLAYER
4

RECIPIENT_FILTER_GLOBAL
RECIPIENT_FILTER_GLOBAL
5

RECIPIENT_FILTER_TEAM
RECIPIENT_FILTER_TEAM
6

SOLID_NONE
SOLID_NONE
0

SOLID_BSP
SOLID_BSP
1

SOLID_BBOX
SOLID_BBOX
2

SOLID_OBB
SOLID_OBB
3

SOLID_OBB_YAW
SOLID_OBB_YAW
4

SOLID_CUSTOM
SOLID_CUSTOM
5

SOLID_VPHYSICS
SOLID_VPHYSICS
6

SOLID_LAST
SOLID_LAST
7

OBS_MODE_NONE
OBS_MODE_NONE
0

OBS_MODE_DEATHCAM
OBS_MODE_DEATHCAM
1

OBS_MODE_FREEZECAM
OBS_MODE_FREEZECAM
2

OBS_MODE_FIXED
OBS_MODE_FIXED
3

OBS_MODE_IN_EYE
OBS_MODE_IN_EYE
4

OBS_MODE_CHASE
OBS_MODE_CHASE
5

OBS_MODE_POI
OBS_MODE_POI
6

OBS_MODE_ROAMING
OBS_MODE_ROAMING
7

NUM_OBSERVER_MODES
NUM_OBSERVER_MODES
8

STOPWATCH_CAPTURE_TIME_NOT_SET
STOPWATCH_CAPTURE_TIME_NOT_SET
0

STOPWATCH_RUNNING
STOPWATCH_RUNNING
1

STOPWATCH_OVERTIME
STOPWATCH_OVERTIME
2

EASY
EASY
0

NORMAL
NORMAL
1

HARD
HARD
2

EXPERT
EXPERT
3

NUM_DIFFICULTY_LEVELS
NUM_DIFFICULTY_LEVELS
4

UNDEFINED
UNDEFINED
-1

TF_CLASS_UNDEFINED
TF_CLASS_UNDEFINED
0

TF_CLASS_SCOUT
TF_CLASS_SCOUT
1

TF_CLASS_SNIPER
TF_CLASS_SNIPER
2

TF_CLASS_SOLDIER
TF_CLASS_SOLDIER
3

TF_CLASS_DEMOMAN
TF_CLASS_DEMOMAN
4

TF_CLASS_MEDIC
TF_CLASS_MEDIC
5

TF_CLASS_HEAVYWEAPONS
TF_CLASS_HEAVYWEAPONS
6

TF_CLASS_PYRO
TF_CLASS_PYRO
7

TF_CLASS_SPY
TF_CLASS_SPY
8

TF_CLASS_ENGINEER
TF_CLASS_ENGINEER
9

TF_CLASS_CIVILIAN
TF_CLASS_CIVILIAN
10

TF_CLASS_COUNT_ALL
TF_CLASS_COUNT_ALL
11

TF_CLASS_RANDOM
TF_CLASS_RANDOM
12

TF_COND_AIMING
TF_COND_AIMING
0

TF_COND_ZOOMED
TF_COND_ZOOMED
1

TF_COND_DISGUISING
TF_COND_DISGUISING
2

TF_COND_DISGUISED
TF_COND_DISGUISED
3

TF_COND_STEALTHED
TF_COND_STEALTHED
4

TF_COND_INVULNERABLE
TF_COND_INVULNERABLE
5

TF_COND_TELEPORTED
TF_COND_TELEPORTED
6

TF_COND_TAUNTING
TF_COND_TAUNTING
7

TF_COND_INVULNERABLE_WEARINGOFF
TF_COND_INVULNERABLE_WEARINGOFF
8

TF_COND_STEALTHED_BLINK
TF_COND_STEALTHED_BLINK
9

TF_COND_SELECTED_TO_TELEPORT
TF_COND_SELECTED_TO_TELEPORT
10

TF_COND_CRITBOOSTED
TF_COND_CRITBOOSTED
11

TF_COND_TMPDAMAGEBONUS
TF_COND_TMPDAMAGEBONUS
12

TF_COND_FEIGN_DEATH
TF_COND_FEIGN_DEATH
13

TF_COND_PHASE
TF_COND_PHASE
14

TF_COND_STUNNED
TF_COND_STUNNED
15

TF_COND_OFFENSEBUFF
TF_COND_OFFENSEBUFF
16

TF_COND_SHIELD_CHARGE
TF_COND_SHIELD_CHARGE
17

TF_COND_DEMO_BUFF
TF_COND_DEMO_BUFF
18

TF_COND_ENERGY_BUFF
TF_COND_ENERGY_BUFF
19

TF_COND_RADIUSHEAL
TF_COND_RADIUSHEAL
20

TF_COND_HEALTH_BUFF
TF_COND_HEALTH_BUFF
21

TF_COND_BURNING
TF_COND_BURNING
22

TF_COND_HEALTH_OVERHEALED
TF_COND_HEALTH_OVERHEALED
23

TF_COND_URINE
TF_COND_URINE
24

TF_COND_BLEEDING
TF_COND_BLEEDING
25

TF_COND_DEFENSEBUFF
TF_COND_DEFENSEBUFF
26

TF_COND_MAD_MILK
TF_COND_MAD_MILK
27

TF_COND_MEGAHEAL
TF_COND_MEGAHEAL
28

TF_COND_REGENONDAMAGEBUFF
TF_COND_REGENONDAMAGEBUFF
29

TF_COND_MARKEDFORDEATH
TF_COND_MARKEDFORDEATH
30

TF_COND_NOHEALINGDAMAGEBUFF
TF_COND_NOHEALINGDAMAGEBUFF
31

TF_COND_SPEED_BOOST
TF_COND_SPEED_BOOST
32

TF_COND_CRITBOOSTED_PUMPKIN
TF_COND_CRITBOOSTED_PUMPKIN
33

TF_COND_CRITBOOSTED_USER_BUFF
TF_COND_CRITBOOSTED_USER_BUFF
34

TF_COND_CRITBOOSTED_DEMO_CHARGE
TF_COND_CRITBOOSTED_DEMO_CHARGE
35

TF_COND_SODAPOPPER_HYPE
TF_COND_SODAPOPPER_HYPE
36

TF_COND_CRITBOOSTED_FIRST_BLOOD
TF_COND_CRITBOOSTED_FIRST_BLOOD
37

TF_COND_CRITBOOSTED_BONUS_TIME
TF_COND_CRITBOOSTED_BONUS_TIME
38

TF_COND_CRITBOOSTED_CTF_CAPTURE
TF_COND_CRITBOOSTED_CTF_CAPTURE
39

TF_COND_CRITBOOSTED_ON_KILL
TF_COND_CRITBOOSTED_ON_KILL
40

TF_COND_CANNOT_SWITCH_FROM_MELEE
TF_COND_CANNOT_SWITCH_FROM_MELEE
41

TF_COND_DEFENSEBUFF_NO_CRIT_BLOCK
TF_COND_DEFENSEBUFF_NO_CRIT_BLOCK
42

TF_COND_REPROGRAMMED
TF_COND_REPROGRAMMED
43

TF_COND_CRITBOOSTED_RAGE_BUFF
TF_COND_CRITBOOSTED_RAGE_BUFF
44

TF_COND_DEFENSEBUFF_HIGH
TF_COND_DEFENSEBUFF_HIGH
45

TF_COND_SNIPERCHARGE_RAGE_BUFF
TF_COND_SNIPERCHARGE_RAGE_BUFF
46

TF_COND_DISGUISE_WEARINGOFF
TF_COND_DISGUISE_WEARINGOFF
47

TF_COND_MARKEDFORDEATH_SILENT
TF_COND_MARKEDFORDEATH_SILENT
48

TF_COND_DISGUISED_AS_DISPENSER
TF_COND_DISGUISED_AS_DISPENSER
49

TF_COND_SAPPED
TF_COND_SAPPED
50

TF_COND_INVULNERABLE_HIDE_UNLESS_DAMAGED
TF_COND_INVULNERABLE_HIDE_UNLESS_DAMAGED
51

TF_COND_INVULNERABLE_USER_BUFF
TF_COND_INVULNERABLE_USER_BUFF
52

TF_COND_HALLOWEEN_BOMB_HEAD
TF_COND_HALLOWEEN_BOMB_HEAD
53

TF_COND_HALLOWEEN_THRILLER
TF_COND_HALLOWEEN_THRILLER
54

TF_COND_RADIUSHEAL_ON_DAMAGE
TF_COND_RADIUSHEAL_ON_DAMAGE
55

TF_COND_CRITBOOSTED_CARD_EFFECT
TF_COND_CRITBOOSTED_CARD_EFFECT
56

TF_COND_INVULNERABLE_CARD_EFFECT
TF_COND_INVULNERABLE_CARD_EFFECT
57

TF_COND_MEDIGUN_UBER_BULLET_RESIST
TF_COND_MEDIGUN_UBER_BULLET_RESIST
58

TF_COND_MEDIGUN_UBER_BLAST_RESIST
TF_COND_MEDIGUN_UBER_BLAST_RESIST
59

TF_COND_MEDIGUN_UBER_FIRE_RESIST
TF_COND_MEDIGUN_UBER_FIRE_RESIST
60

TF_COND_MEDIGUN_SMALL_BULLET_RESIST
TF_COND_MEDIGUN_SMALL_BULLET_RESIST
61

TF_COND_MEDIGUN_SMALL_BLAST_RESIST
TF_COND_MEDIGUN_SMALL_BLAST_RESIST
62

TF_COND_MEDIGUN_SMALL_FIRE_RESIST
TF_COND_MEDIGUN_SMALL_FIRE_RESIST
63

TF_COND_STEALTHED_USER_BUFF
TF_COND_STEALTHED_USER_BUFF
64

TF_COND_MEDIGUN_DEBUFF
TF_COND_MEDIGUN_DEBUFF
65

TF_COND_STEALTHED_USER_BUFF_FADING
TF_COND_STEALTHED_USER_BUFF_FADING
66

TF_COND_BULLET_IMMUNE
TF_COND_BULLET_IMMUNE
67

TF_COND_BLAST_IMMUNE
TF_COND_BLAST_IMMUNE
68

TF_COND_FIRE_IMMUNE
TF_COND_FIRE_IMMUNE
69

TF_COND_PREVENT_DEATH
TF_COND_PREVENT_DEATH
70

TF_COND_MVM_BOT_STUN_RADIOWAVE
TF_COND_MVM_BOT_STUN_RADIOWAVE
71

TF_COND_HALLOWEEN_SPEED_BOOST
TF_COND_HALLOWEEN_SPEED_BOOST
72

TF_COND_HALLOWEEN_QUICK_HEAL
TF_COND_HALLOWEEN_QUICK_HEAL
73

TF_COND_HALLOWEEN_GIANT
TF_COND_HALLOWEEN_GIANT
74

TF_COND_HALLOWEEN_TINY
TF_COND_HALLOWEEN_TINY
75

TF_COND_HALLOWEEN_IN_HELL
TF_COND_HALLOWEEN_IN_HELL
76

TF_COND_HALLOWEEN_GHOST_MODE
TF_COND_HALLOWEEN_GHOST_MODE
77

TF_COND_MINICRITBOOSTED_ON_KILL
TF_COND_MINICRITBOOSTED_ON_KILL
78

TF_COND_OBSCURED_SMOKE
TF_COND_OBSCURED_SMOKE
79

TF_COND_PARACHUTE_ACTIVE
TF_COND_PARACHUTE_ACTIVE
80

TF_COND_BLASTJUMPING
TF_COND_BLASTJUMPING
81

TF_COND_HALLOWEEN_KART
TF_COND_HALLOWEEN_KART
82

TF_COND_HALLOWEEN_KART_DASH
TF_COND_HALLOWEEN_KART_DASH
83

TF_COND_BALLOON_HEAD
TF_COND_BALLOON_HEAD
84

TF_COND_MELEE_ONLY
TF_COND_MELEE_ONLY
85

TF_COND_SWIMMING_CURSE
TF_COND_SWIMMING_CURSE
86

TF_COND_FREEZE_INPUT
TF_COND_FREEZE_INPUT
87

TF_COND_HALLOWEEN_KART_CAGE
TF_COND_HALLOWEEN_KART_CAGE
88

TF_COND_DONOTUSE_0
TF_COND_DONOTUSE_0
89

TF_COND_RUNE_STRENGTH
TF_COND_RUNE_STRENGTH
90

TF_COND_RUNE_HASTE
TF_COND_RUNE_HASTE
91

TF_COND_RUNE_REGEN
TF_COND_RUNE_REGEN
92

TF_COND_RUNE_RESIST
TF_COND_RUNE_RESIST
93

TF_COND_RUNE_VAMPIRE
TF_COND_RUNE_VAMPIRE
94

TF_COND_RUNE_REFLECT
TF_COND_RUNE_REFLECT
95

TF_COND_RUNE_PRECISION
TF_COND_RUNE_PRECISION
96

TF_COND_RUNE_AGILITY
TF_COND_RUNE_AGILITY
97

TF_COND_GRAPPLINGHOOK
TF_COND_GRAPPLINGHOOK
98

TF_COND_GRAPPLINGHOOK_SAFEFALL
TF_COND_GRAPPLINGHOOK_SAFEFALL
99

TF_COND_GRAPPLINGHOOK_LATCHED
TF_COND_GRAPPLINGHOOK_LATCHED
100

TF_COND_GRAPPLINGHOOK_BLEEDING
TF_COND_GRAPPLINGHOOK_BLEEDING
101

TF_COND_AFTERBURN_IMMUNE
TF_COND_AFTERBURN_IMMUNE
102

TF_COND_RUNE_KNOCKOUT
TF_COND_RUNE_KNOCKOUT
103

TF_COND_RUNE_IMBALANCE
TF_COND_RUNE_IMBALANCE
104

TF_COND_CRITBOOSTED_RUNE_TEMP
TF_COND_CRITBOOSTED_RUNE_TEMP
105

TF_COND_PASSTIME_INTERCEPTION
TF_COND_PASSTIME_INTERCEPTION
106

TF_COND_SWIMMING_NO_EFFECTS
TF_COND_SWIMMING_NO_EFFECTS
107

TF_COND_PURGATORY
TF_COND_PURGATORY
108

TF_COND_RUNE_KING
TF_COND_RUNE_KING
109

TF_COND_RUNE_PLAGUE
TF_COND_RUNE_PLAGUE
110

TF_COND_RUNE_SUPERNOVA
TF_COND_RUNE_SUPERNOVA
111

TF_COND_PLAGUE
TF_COND_PLAGUE
112

TF_COND_KING_BUFFED
TF_COND_KING_BUFFED
113

TF_COND_TEAM_GLOWS
TF_COND_TEAM_GLOWS
114

TF_COND_KNOCKED_INTO_AIR
TF_COND_KNOCKED_INTO_AIR
115

TF_COND_COMPETITIVE_WINNER
TF_COND_COMPETITIVE_WINNER
116

TF_COND_COMPETITIVE_LOSER
TF_COND_COMPETITIVE_LOSER
117

TF_COND_HEALING_DEBUFF
TF_COND_HEALING_DEBUFF
118

TF_COND_PASSTIME_PENALTY_DEBUFF
TF_COND_PASSTIME_PENALTY_DEBUFF
119

TF_COND_GRAPPLED_TO_PLAYER
TF_COND_GRAPPLED_TO_PLAYER
120

TF_COND_GRAPPLED_BY_PLAYER
TF_COND_GRAPPLED_BY_PLAYER
121

TF_COND_PARACHUTE_DEPLOYED
TF_COND_PARACHUTE_DEPLOYED
122

TF_COND_GAS
TF_COND_GAS
123

TF_COND_BURNING_PYRO
TF_COND_BURNING_PYRO
124

TF_COND_ROCKETPACK
TF_COND_ROCKETPACK
125

TF_COND_LOST_FOOTING
TF_COND_LOST_FOOTING
126

TF_COND_AIR_CURRENT
TF_COND_AIR_CURRENT
127

TF_COND_HALLOWEEN_HELL_HEAL
TF_COND_HALLOWEEN_HELL_HEAL
128

TF_COND_POWERUPMODE_DOMINANT
TF_COND_POWERUPMODE_DOMINANT
129

TF_COND_IMMUNE_TO_PUSHBACK
TF_COND_IMMUNE_TO_PUSHBACK
130

TF_COND_INVALID
TF_COND_INVALID
-1

TF_DMG_CUSTOM_NONE
TF_DMG_CUSTOM_NONE
0

TF_DMG_CUSTOM_HEADSHOT
TF_DMG_CUSTOM_HEADSHOT
1

TF_DMG_CUSTOM_BACKSTAB
TF_DMG_CUSTOM_BACKSTAB
2

TF_DMG_CUSTOM_BURNING
TF_DMG_CUSTOM_BURNING
3

TF_DMG_WRENCH_FIX
TF_DMG_WRENCH_FIX
4

TF_DMG_CUSTOM_MINIGUN
TF_DMG_CUSTOM_MINIGUN
5

TF_DMG_CUSTOM_SUICIDE
TF_DMG_CUSTOM_SUICIDE
6

TF_DMG_CUSTOM_TAUNTATK_HADOUKEN
TF_DMG_CUSTOM_TAUNTATK_HADOUKEN
7

TF_DMG_CUSTOM_BURNING_FLARE
TF_DMG_CUSTOM_BURNING_FLARE
8

TF_DMG_CUSTOM_TAUNTATK_HIGH_NOON
TF_DMG_CUSTOM_TAUNTATK_HIGH_NOON
9

TF_DMG_CUSTOM_TAUNTATK_GRAND_SLAM
TF_DMG_CUSTOM_TAUNTATK_GRAND_SLAM
10

TF_DMG_CUSTOM_PENETRATE_MY_TEAM
TF_DMG_CUSTOM_PENETRATE_MY_TEAM
11

TF_DMG_CUSTOM_PENETRATE_ALL_PLAYERS
TF_DMG_CUSTOM_PENETRATE_ALL_PLAYERS
12

TF_DMG_CUSTOM_TAUNTATK_FENCING
TF_DMG_CUSTOM_TAUNTATK_FENCING
13

TF_DMG_CUSTOM_PENETRATE_NONBURNING_TEAMMATE
TF_DMG_CUSTOM_PENETRATE_NONBURNING_TEAMMATE
14

TF_DMG_CUSTOM_TAUNTATK_ARROW_STAB
TF_DMG_CUSTOM_TAUNTATK_ARROW_STAB
15

TF_DMG_CUSTOM_TELEFRAG
TF_DMG_CUSTOM_TELEFRAG
16

TF_DMG_CUSTOM_BURNING_ARROW
TF_DMG_CUSTOM_BURNING_ARROW
17

TF_DMG_CUSTOM_FLYINGBURN
TF_DMG_CUSTOM_FLYINGBURN
18

TF_DMG_CUSTOM_PUMPKIN_BOMB
TF_DMG_CUSTOM_PUMPKIN_BOMB
19

TF_DMG_CUSTOM_DECAPITATION
TF_DMG_CUSTOM_DECAPITATION
20

TF_DMG_CUSTOM_TAUNTATK_GRENADE
TF_DMG_CUSTOM_TAUNTATK_GRENADE
21

TF_DMG_CUSTOM_BASEBALL
TF_DMG_CUSTOM_BASEBALL
22

TF_DMG_CUSTOM_CHARGE_IMPACT
TF_DMG_CUSTOM_CHARGE_IMPACT
23

TF_DMG_CUSTOM_TAUNTATK_BARBARIAN_SWING
TF_DMG_CUSTOM_TAUNTATK_BARBARIAN_SWING
24

TF_DMG_CUSTOM_AIR_STICKY_BURST
TF_DMG_CUSTOM_AIR_STICKY_BURST
25

TF_DMG_CUSTOM_DEFENSIVE_STICKY
TF_DMG_CUSTOM_DEFENSIVE_STICKY
26

TF_DMG_CUSTOM_PICKAXE
TF_DMG_CUSTOM_PICKAXE
27

TF_DMG_CUSTOM_ROCKET_DIRECTHIT
TF_DMG_CUSTOM_ROCKET_DIRECTHIT
28

TF_DMG_CUSTOM_TAUNTATK_UBERSLICE
TF_DMG_CUSTOM_TAUNTATK_UBERSLICE
29

TF_DMG_CUSTOM_PLAYER_SENTRY
TF_DMG_CUSTOM_PLAYER_SENTRY
30

TF_DMG_CUSTOM_STANDARD_STICKY
TF_DMG_CUSTOM_STANDARD_STICKY
31

TF_DMG_CUSTOM_SHOTGUN_REVENGE_CRIT
TF_DMG_CUSTOM_SHOTGUN_REVENGE_CRIT
32

TF_DMG_CUSTOM_TAUNTATK_ENGINEER_GUITAR_SMASH
TF_DMG_CUSTOM_TAUNTATK_ENGINEER_GUITAR_SMASH
33

TF_DMG_CUSTOM_BLEEDING
TF_DMG_CUSTOM_BLEEDING
34

TF_DMG_CUSTOM_GOLD_WRENCH
TF_DMG_CUSTOM_GOLD_WRENCH
35

TF_DMG_CUSTOM_CARRIED_BUILDING
TF_DMG_CUSTOM_CARRIED_BUILDING
36

TF_DMG_CUSTOM_COMBO_PUNCH
TF_DMG_CUSTOM_COMBO_PUNCH
37

TF_DMG_CUSTOM_TAUNTATK_ENGINEER_ARM_KILL
TF_DMG_CUSTOM_TAUNTATK_ENGINEER_ARM_KILL
38

TF_DMG_CUSTOM_FISH_KILL
TF_DMG_CUSTOM_FISH_KILL
39

TF_DMG_CUSTOM_TRIGGER_HURT
TF_DMG_CUSTOM_TRIGGER_HURT
40

TF_DMG_CUSTOM_DECAPITATION_BOSS
TF_DMG_CUSTOM_DECAPITATION_BOSS
41

TF_DMG_CUSTOM_STICKBOMB_EXPLOSION
TF_DMG_CUSTOM_STICKBOMB_EXPLOSION
42

TF_DMG_CUSTOM_AEGIS_ROUND
TF_DMG_CUSTOM_AEGIS_ROUND
43

TF_DMG_CUSTOM_FLARE_EXPLOSION
TF_DMG_CUSTOM_FLARE_EXPLOSION
44

TF_DMG_CUSTOM_BOOTS_STOMP
TF_DMG_CUSTOM_BOOTS_STOMP
45

TF_DMG_CUSTOM_PLASMA
TF_DMG_CUSTOM_PLASMA
46

TF_DMG_CUSTOM_PLASMA_CHARGED
TF_DMG_CUSTOM_PLASMA_CHARGED
47

TF_DMG_CUSTOM_PLASMA_GIB
TF_DMG_CUSTOM_PLASMA_GIB
48

TF_DMG_CUSTOM_PRACTICE_STICKY
TF_DMG_CUSTOM_PRACTICE_STICKY
49

TF_DMG_CUSTOM_EYEBALL_ROCKET
TF_DMG_CUSTOM_EYEBALL_ROCKET
50

TF_DMG_CUSTOM_HEADSHOT_DECAPITATION
TF_DMG_CUSTOM_HEADSHOT_DECAPITATION
51

TF_DMG_CUSTOM_TAUNTATK_ARMAGEDDON
TF_DMG_CUSTOM_TAUNTATK_ARMAGEDDON
52

TF_DMG_CUSTOM_FLARE_PELLET
TF_DMG_CUSTOM_FLARE_PELLET
53

TF_DMG_CUSTOM_CLEAVER
TF_DMG_CUSTOM_CLEAVER
54

TF_DMG_CUSTOM_CLEAVER_CRIT
TF_DMG_CUSTOM_CLEAVER_CRIT
55

TF_DMG_CUSTOM_SAPPER_RECORDER_DEATH
TF_DMG_CUSTOM_SAPPER_RECORDER_DEATH
56

TF_DMG_CUSTOM_MERASMUS_PLAYER_BOMB
TF_DMG_CUSTOM_MERASMUS_PLAYER_BOMB
57

TF_DMG_CUSTOM_MERASMUS_GRENADE
TF_DMG_CUSTOM_MERASMUS_GRENADE
58

TF_DMG_CUSTOM_MERASMUS_ZAP
TF_DMG_CUSTOM_MERASMUS_ZAP
59

TF_DMG_CUSTOM_MERASMUS_DECAPITATION
TF_DMG_CUSTOM_MERASMUS_DECAPITATION
60

TF_DMG_CUSTOM_CANNONBALL_PUSH
TF_DMG_CUSTOM_CANNONBALL_PUSH
61

TF_DMG_CUSTOM_TAUNTATK_ALLCLASS_GUITAR_RIFF
TF_DMG_CUSTOM_TAUNTATK_ALLCLASS_GUITAR_RIFF
62

TF_DMG_CUSTOM_THROWABLE
TF_DMG_CUSTOM_THROWABLE
63

TF_DMG_CUSTOM_THROWABLE_KILL
TF_DMG_CUSTOM_THROWABLE_KILL
64

TF_DMG_CUSTOM_SPELL_TELEPORT
TF_DMG_CUSTOM_SPELL_TELEPORT
65

TF_DMG_CUSTOM_SPELL_SKELETON
TF_DMG_CUSTOM_SPELL_SKELETON
66

TF_DMG_CUSTOM_SPELL_MIRV
TF_DMG_CUSTOM_SPELL_MIRV
67

TF_DMG_CUSTOM_SPELL_METEOR
TF_DMG_CUSTOM_SPELL_METEOR
68

TF_DMG_CUSTOM_SPELL_LIGHTNING
TF_DMG_CUSTOM_SPELL_LIGHTNING
69

TF_DMG_CUSTOM_SPELL_FIREBALL
TF_DMG_CUSTOM_SPELL_FIREBALL
70

TF_DMG_CUSTOM_SPELL_MONOCULUS
TF_DMG_CUSTOM_SPELL_MONOCULUS
71

TF_DMG_CUSTOM_SPELL_BLASTJUMP
TF_DMG_CUSTOM_SPELL_BLASTJUMP
72

TF_DMG_CUSTOM_SPELL_BATS
TF_DMG_CUSTOM_SPELL_BATS
73

TF_DMG_CUSTOM_SPELL_TINY
TF_DMG_CUSTOM_SPELL_TINY
74

TF_DMG_CUSTOM_KART
TF_DMG_CUSTOM_KART
75

TF_DMG_CUSTOM_GIANT_HAMMER
TF_DMG_CUSTOM_GIANT_HAMMER
76

TF_DMG_CUSTOM_RUNE_REFLECT
TF_DMG_CUSTOM_RUNE_REFLECT
77

TF_DMG_CUSTOM_DRAGONS_FURY_IGNITE
TF_DMG_CUSTOM_DRAGONS_FURY_IGNITE
78

TF_DMG_CUSTOM_DRAGONS_FURY_BONUS_BURNING
TF_DMG_CUSTOM_DRAGONS_FURY_BONUS_BURNING
79

TF_DMG_CUSTOM_SLAP_KILL
TF_DMG_CUSTOM_SLAP_KILL
80

TF_DMG_CUSTOM_CROC
TF_DMG_CUSTOM_CROC
81

TF_DMG_CUSTOM_TAUNTATK_GASBLAST
TF_DMG_CUSTOM_TAUNTATK_GASBLAST
82

TF_DMG_CUSTOM_AXTINGUISHER_BOOSTED
TF_DMG_CUSTOM_AXTINGUISHER_BOOSTED
83

TF_DMG_CUSTOM_KRAMPUS_MELEE
TF_DMG_CUSTOM_KRAMPUS_MELEE
84

TF_DMG_CUSTOM_KRAMPUS_RANGED
TF_DMG_CUSTOM_KRAMPUS_RANGED
85

TF_DMG_CUSTOM_END
TF_DMG_CUSTOM_END
86

TEAM_UNASSIGNED
TEAM_UNASSIGNED
null, This is supposed to be 0.

TEAM_SPECTATOR
TEAM_SPECTATOR
1

TF_TEAM_PVE_DEFENDERS
TF_TEAM_PVE_DEFENDERS
2

TF_TEAM_RED
TF_TEAM_RED
2

TF_TEAM_BLUE
TF_TEAM_BLUE
3

TF_TEAM_PVE_INVADERS
TF_TEAM_PVE_INVADERS
3

TF_TEAM_COUNT
TF_TEAM_COUNT
4

TF_TEAM_PVE_INVADERS_GIANTS
TF_TEAM_PVE_INVADERS_GIANTS
4

TEAM_ANY
TEAM_ANY
-2

TEAM_INVALID
TEAM_INVALID
-1

Zero
Zero
0

Epsilon
Epsilon
1.19209e-07

GoldenRatio
GoldenRatio
1.61803

One
One
1

Sqrt2
Sqrt2
1.41421

Sqrt3
Sqrt3
1.73205

E
E
2.71828

Pi
Pi
3.14159

Tau
Tau
6.28319

ConstantNamingConvention
ConstantNamingConvention
Constants are named as follows: F -> flags, E -> enums, (nothing) -> random values/constants

DIST_EPSILON
DIST_EPSILON
0.03125

MAX_PLAYERS
MAX_PLAYERS
101

MAX_EDICTS
MAX_EDICTS
2048

IN_ATTACK
IN_ATTACK
1

IN_JUMP
IN_JUMP
2

IN_DUCK
IN_DUCK
4

IN_FORWARD
IN_FORWARD
8

IN_BACK
IN_BACK
16

IN_USE
IN_USE
32

IN_CANCEL
IN_CANCEL
64

IN_LEFT
IN_LEFT
128

IN_RIGHT
IN_RIGHT
256

IN_MOVELEFT
IN_MOVELEFT
512

IN_MOVERIGHT
IN_MOVERIGHT
1024

IN_ATTACK2
IN_ATTACK2
2048

IN_RUN
IN_RUN
4096

IN_RELOAD
IN_RELOAD
8192

IN_ALT1
IN_ALT1
16384

IN_ALT2
IN_ALT2
32768

IN_SCORE
IN_SCORE
65536

IN_SPEED
IN_SPEED
131072

IN_WALK
IN_WALK
262144

IN_ZOOM
IN_ZOOM
524288

IN_WEAPON1
IN_WEAPON1
1048576

IN_WEAPON2
IN_WEAPON2
2097152

IN_BULLRUSH
IN_BULLRUSH
4194304

IN_GRENADE1
IN_GRENADE1
8388608

IN_GRENADE2
IN_GRENADE2
16777216

IN_ATTACK3
IN_ATTACK3
33554432

CONTENTS_EMPTY
CONTENTS_EMPTY
0

CONTENTS_SOLID
CONTENTS_SOLID
1

CONTENTS_WINDOW
CONTENTS_WINDOW
2

CONTENTS_AUX
CONTENTS_AUX
4

CONTENTS_GRATE
CONTENTS_GRATE
8

CONTENTS_SLIME
CONTENTS_SLIME
16

CONTENTS_WATER
CONTENTS_WATER
32

CONTENTS_BLOCKLOS
CONTENTS_BLOCKLOS
64

CONTENTS_OPAQUE
CONTENTS_OPAQUE
128

LAST_VISIBLE_CONTENTS
LAST_VISIBLE_CONTENTS
128

ALL_VISIBLE_CONTENTS
ALL_VISIBLE_CONTENTS
255

CONTENTS_TESTFOGVOLUME
CONTENTS_TESTFOGVOLUME
256

CONTENTS_UNUSED
CONTENTS_UNUSED
512

CONTENTS_UNUSED6
CONTENTS_UNUSED6
1024

CONTENTS_TEAM1
CONTENTS_TEAM1
2048

CONTENTS_TEAM2
CONTENTS_TEAM2
4096

CONTENTS_IGNORE_NODRAW_OPAQUE
CONTENTS_IGNORE_NODRAW_OPAQUE
8192

CONTENTS_MOVEABLE
CONTENTS_MOVEABLE
16384

CONTENTS_AREAPORTAL
CONTENTS_AREAPORTAL
32768

CONTENTS_PLAYERCLIP
CONTENTS_PLAYERCLIP
65536

CONTENTS_MONSTERCLIP
CONTENTS_MONSTERCLIP
131072

CONTENTS_CURRENT_0
CONTENTS_CURRENT_0
262144

CONTENTS_CURRENT_90
CONTENTS_CURRENT_90
524288

CONTENTS_CURRENT_180
CONTENTS_CURRENT_180
1048576

CONTENTS_CURRENT_270
CONTENTS_CURRENT_270
2097152

CONTENTS_CURRENT_UP
CONTENTS_CURRENT_UP
4194304

CONTENTS_CURRENT_DOWN
CONTENTS_CURRENT_DOWN
8388608

CONTENTS_ORIGIN
CONTENTS_ORIGIN
16777216

CONTENTS_MONSTER
CONTENTS_MONSTER
33554432

CONTENTS_DEBRIS
CONTENTS_DEBRIS
67108864

CONTENTS_DETAIL
CONTENTS_DETAIL
134217728

CONTENTS_TRANSLUCENT
CONTENTS_TRANSLUCENT
268435456

CONTENTS_LADDER
CONTENTS_LADDER
536870912

CONTENTS_HITBOX
CONTENTS_HITBOX
1073741824

DMG_GENERIC
DMG_GENERIC
null, This is supposed to be 0.

DMG_CRUSH
DMG_CRUSH
1

DMG_BULLET
DMG_BULLET
2

DMG_SLASH
DMG_SLASH
4

DMG_BURN
DMG_BURN
8

DMG_VEHICLE
DMG_VEHICLE
16, Train damage.

DMG_FALL
DMG_FALL
32

DMG_BLAST
DMG_BLAST
64

DMG_CLUB
DMG_CLUB
128

DMG_SHOCK
DMG_SHOCK
256

DMG_SONIC
DMG_SONIC
512

DMG_ENERGYBEAM
DMG_ENERGYBEAM
1024

DMG_PREVENT_PHYSICS_FORCE
DMG_PREVENT_PHYSICS_FORCE
2048

DMG_NEVERGIB
DMG_NEVERGIB
4096

DMG_ALWAYSGIB
DMG_ALWAYSGIB
8192

DMG_DROWN
DMG_DROWN
16384

DMG_PARALYZE
DMG_PARALYZE
32768

DMG_NERVEGAS
DMG_NERVEGAS
65536, Sawblade damage.

DMG_POISON
DMG_POISON
131072

DMG_RADIATION
DMG_RADIATION
262144

DMG_DROWNRECOVER
DMG_DROWNRECOVER
524288

DMG_ACID
DMG_ACID
1048576, Crit damage.

DMG_SLOWBURN
DMG_SLOWBURN
2097152, Bullet falloff damage.

DMG_REMOVENORAGDOLL
DMG_REMOVENORAGDOLL
4194304

DMG_PHYSGUN
DMG_PHYSGUN
8388608

DMG_PLASMA
DMG_PLASMA
16777216

DMG_AIRBOAT
DMG_AIRBOAT
33554432

DMG_DISSOLVE
DMG_DISSOLVE
67108864

DMG_BLAST_SURFACE
DMG_BLAST_SURFACE
134217728

DMG_DIRECT
DMG_DIRECT
268435456

DMG_BUCKSHOT
DMG_BUCKSHOT
536870912

EF_BONEMERGE
EF_BONEMERGE
1

EF_BRIGHTLIGHT
EF_BRIGHTLIGHT
2

EF_DIMLIGHT
EF_DIMLIGHT
4

EF_NOINTERP
EF_NOINTERP
8

EF_MAX_BITS
EF_MAX_BITS
10

EF_NOSHADOW
EF_NOSHADOW
16

EF_NODRAW
EF_NODRAW
32

EF_NORECEIVESHADOW
EF_NORECEIVESHADOW
64

EF_BONEMERGE_FASTCULL
EF_BONEMERGE_FASTCULL
128

EF_ITEM_BLINK
EF_ITEM_BLINK
256

EF_PARENT_ANIMATES
EF_PARENT_ANIMATES
512

EFL_KILLME
EFL_KILLME
1

EFL_DORMANT
EFL_DORMANT
2

EFL_NOCLIP_ACTIVE
EFL_NOCLIP_ACTIVE
4

EFL_SETTING_UP_BONES
EFL_SETTING_UP_BONES
8

EFL_HAS_PLAYER_CHILD
EFL_HAS_PLAYER_CHILD
16

EFL_KEEP_ON_RECREATE_ENTITIES
EFL_KEEP_ON_RECREATE_ENTITIES
16

EFL_DIRTY_SHADOWUPDATE
EFL_DIRTY_SHADOWUPDATE
32

EFL_NOTIFY
EFL_NOTIFY
64

EFL_FORCE_CHECK_TRANSMIT
EFL_FORCE_CHECK_TRANSMIT
128

EFL_BOT_FROZEN
EFL_BOT_FROZEN
256

EFL_SERVER_ONLY
EFL_SERVER_ONLY
512

EFL_NO_AUTO_EDICT_ATTACH
EFL_NO_AUTO_EDICT_ATTACH
1024

EFL_DIRTY_ABSTRANSFORM
EFL_DIRTY_ABSTRANSFORM
2048

EFL_DIRTY_ABSVELOCITY
EFL_DIRTY_ABSVELOCITY
4096

EFL_DIRTY_ABSANGVELOCITY
EFL_DIRTY_ABSANGVELOCITY
8192

EFL_DIRTY_SURROUNDING_COLLISION_BOUNDS
EFL_DIRTY_SURROUNDING_COLLISION_BOUNDS
16384

EFL_DIRTY_SPATIAL_PARTITION
EFL_DIRTY_SPATIAL_PARTITION
32768

EFL_FORCE_ALLOW_MOVEPARENT
EFL_FORCE_ALLOW_MOVEPARENT
65536

EFL_IN_SKYBOX
EFL_IN_SKYBOX
131072

EFL_USE_PARTITION_WHEN_NOT_SOLID
EFL_USE_PARTITION_WHEN_NOT_SOLID
262144

EFL_TOUCHING_FLUID
EFL_TOUCHING_FLUID
524288

EFL_IS_BEING_LIFTED_BY_BARNACLE
EFL_IS_BEING_LIFTED_BY_BARNACLE
1048576

EFL_NO_ROTORWASH_PUSH
EFL_NO_ROTORWASH_PUSH
2097152

EFL_NO_THINK_FUNCTION
EFL_NO_THINK_FUNCTION
4194304

EFL_NO_GAME_PHYSICS_SIMULATION
EFL_NO_GAME_PHYSICS_SIMULATION
8388608

EFL_CHECK_UNTOUCH
EFL_CHECK_UNTOUCH
16777216

EFL_DONTBLOCKLOS
EFL_DONTBLOCKLOS
33554432

EFL_DONTWALKON
EFL_DONTWALKON
67108864

EFL_NO_DISSOLVE
EFL_NO_DISSOLVE
134217728

EFL_NO_MEGAPHYSCANNON_RAGDOLL
EFL_NO_MEGAPHYSCANNON_RAGDOLL
268435456

EFL_NO_WATER_VELOCITY_CHANGE
EFL_NO_WATER_VELOCITY_CHANGE
536870912

EFL_NO_PHYSCANNON_INTERACTION
EFL_NO_PHYSCANNON_INTERACTION
1073741824

EFL_NO_DAMAGE_FORCES
EFL_NO_DAMAGE_FORCES
2147483648

HIDEHUD_WEAPONSELECTION
HIDEHUD_WEAPONSELECTION
1

HIDEHUD_FLASHLIGHT
HIDEHUD_FLASHLIGHT
2

HIDEHUD_ALL
HIDEHUD_ALL
4

HIDEHUD_HEALTH
HIDEHUD_HEALTH
8

HIDEHUD_PLAYERDEAD
HIDEHUD_PLAYERDEAD
16

HIDEHUD_BITCOUNT
HIDEHUD_BITCOUNT
17

HIDEHUD_NEEDSUIT
HIDEHUD_NEEDSUIT
32

HIDEHUD_MISCSTATUS
HIDEHUD_MISCSTATUS
64

HIDEHUD_CHAT
HIDEHUD_CHAT
128

HIDEHUD_CROSSHAIR
HIDEHUD_CROSSHAIR
256

HIDEHUD_VEHICLE_CROSSHAIR
HIDEHUD_VEHICLE_CROSSHAIR
512

HIDEHUD_INVEHICLE
HIDEHUD_INVEHICLE
1024

HIDEHUD_BONUS_PROGRESS
HIDEHUD_BONUS_PROGRESS
2048

HIDEHUD_BUILDING_STATUS
HIDEHUD_BUILDING_STATUS
4096

HIDEHUD_CLOAK_AND_FEIGN
HIDEHUD_CLOAK_AND_FEIGN
8192

HIDEHUD_PIPES_AND_CHARGE
HIDEHUD_PIPES_AND_CHARGE
16384

HIDEHUD_METAL
HIDEHUD_METAL
32768

HIDEHUD_TARGET_ID
HIDEHUD_TARGET_ID
65536

NAV_MESH_INVALID
NAV_MESH_INVALID
0

NAV_MESH_CROUCH
NAV_MESH_CROUCH
1

NAV_MESH_JUMP
NAV_MESH_JUMP
2

NAV_MESH_PRECISE
NAV_MESH_PRECISE
4

NAV_MESH_NO_JUMP
NAV_MESH_NO_JUMP
8

NAV_MESH_STOP
NAV_MESH_STOP
16

NAV_MESH_RUN
NAV_MESH_RUN
32

NAV_MESH_WALK
NAV_MESH_WALK
64

NAV_MESH_AVOID
NAV_MESH_AVOID
128

NAV_MESH_TRANSIENT
NAV_MESH_TRANSIENT
256

NAV_MESH_DONT_HIDE
NAV_MESH_DONT_HIDE
512

NAV_MESH_STAND
NAV_MESH_STAND
1024

NAV_MESH_NO_HOSTAGES
NAV_MESH_NO_HOSTAGES
2048

NAV_MESH_STAIRS
NAV_MESH_STAIRS
4096

NAV_MESH_NO_MERGE
NAV_MESH_NO_MERGE
8192

NAV_MESH_OBSTACLE_TOP
NAV_MESH_OBSTACLE_TOP
16384

NAV_MESH_CLIFF
NAV_MESH_CLIFF
32768

NAV_MESH_FIRST_CUSTOM
NAV_MESH_FIRST_CUSTOM
65536

NAV_MESH_LAST_CUSTOM
NAV_MESH_LAST_CUSTOM
67108864

NAV_MESH_FUNC_COST
NAV_MESH_FUNC_COST
536870912

NAV_MESH_HAS_ELEVATOR
NAV_MESH_HAS_ELEVATOR
1073741824

NAV_MESH_NAV_BLOCKER
NAV_MESH_NAV_BLOCKER
2147483648

FL_ONGROUND
FL_ONGROUND
1

FL_DUCKING
FL_DUCKING
2

FL_ANIMDUCKING
FL_ANIMDUCKING
4

FL_WATERJUMP
FL_WATERJUMP
8

PLAYER_FLAG_BITS
PLAYER_FLAG_BITS
11

FL_ONTRAIN
FL_ONTRAIN
16

FL_INRAIN
FL_INRAIN
32

FL_FROZEN
FL_FROZEN
64

FL_ATCONTROLS
FL_ATCONTROLS
128

FL_CLIENT
FL_CLIENT
256

FL_FAKECLIENT
FL_FAKECLIENT
512

FL_INWATER
FL_INWATER
1024

FL_FLY
FL_FLY
2048

FL_SWIM
FL_SWIM
4096

FL_CONVEYOR
FL_CONVEYOR
8192

FL_NPC
FL_NPC
16384

FL_GODMODE
FL_GODMODE
32768

FL_NOTARGET
FL_NOTARGET
65536

FL_AIMTARGET
FL_AIMTARGET
131072

FL_PARTIALGROUND
FL_PARTIALGROUND
262144

FL_STATICPROP
FL_STATICPROP
524288

FL_GRAPHED
FL_GRAPHED
1048576

FL_GRENADE
FL_GRENADE
2097152

FL_STEPMOVEMENT
FL_STEPMOVEMENT
4194304

FL_DONTTOUCH
FL_DONTTOUCH
8388608

FL_BASEVELOCITY
FL_BASEVELOCITY
16777216

FL_WORLDBRUSH
FL_WORLDBRUSH
33554432

FL_OBJECT
FL_OBJECT
67108864

FL_KILLME
FL_KILLME
134217728

FL_ONFIRE
FL_ONFIRE
268435456

FL_DISSOLVING
FL_DISSOLVING
536870912

FL_TRANSRAGDOLL
FL_TRANSRAGDOLL
1073741824

FL_UNBLOCKABLE_BY_PLAYER
FL_UNBLOCKABLE_BY_PLAYER
2147483648

FSOLID_CUSTOMRAYTEST
FSOLID_CUSTOMRAYTEST
1

FSOLID_CUSTOMBOXTEST
FSOLID_CUSTOMBOXTEST
2

FSOLID_NOT_SOLID
FSOLID_NOT_SOLID
4

FSOLID_TRIGGER
FSOLID_TRIGGER
8

FSOLID_MAX_BITS
FSOLID_MAX_BITS
10

FSOLID_NOT_STANDABLE
FSOLID_NOT_STANDABLE
16

FSOLID_VOLUME_CONTENTS
FSOLID_VOLUME_CONTENTS
32

FSOLID_FORCE_WORLD_ALIGNED
FSOLID_FORCE_WORLD_ALIGNED
64

FSOLID_USE_TRIGGER_BOUNDS
FSOLID_USE_TRIGGER_BOUNDS
128

FSOLID_ROOT_PARENT_ALIGNED
FSOLID_ROOT_PARENT_ALIGNED
256

FSOLID_TRIGGER_TOUCH_DEBRIS
FSOLID_TRIGGER_TOUCH_DEBRIS
512

SURF_LIGHT
SURF_LIGHT
1

SURF_SKY2D
SURF_SKY2D
2

SURF_SKY
SURF_SKY
4

SURF_WARP
SURF_WARP
8

SURF_TRANS
SURF_TRANS
16

SURF_NOPORTAL
SURF_NOPORTAL
32

SURF_TRIGGER
SURF_TRIGGER
64

SURF_NODRAW
SURF_NODRAW
128

SURF_HINT
SURF_HINT
256

SURF_SKIP
SURF_SKIP
512

SURF_NOLIGHT
SURF_NOLIGHT
1024

SURF_BUMPLIGHT
SURF_BUMPLIGHT
2048

SURF_NOSHADOWS
SURF_NOSHADOWS
4096

SURF_NODECALS
SURF_NODECALS
8192

SURF_NOCHOP
SURF_NOCHOP
16384

SURF_HITBOX
SURF_HITBOX
32768

TAUNT_BASE_WEAPON
TAUNT_BASE_WEAPON
0

TAUNT_MISC_ITEM
TAUNT_MISC_ITEM
1

TAUNT_SHOW_ITEM
TAUNT_SHOW_ITEM
2

TAUNT_LONG
TAUNT_LONG
3

TAUNT_SPECIAL
TAUNT_SPECIAL
4

REMOVE_ON_DEATH
REMOVE_ON_DEATH
1

AGGRESSIVE
AGGRESSIVE
2

IS_NPC
IS_NPC
4

SUPPRESS_FIRE
SUPPRESS_FIRE
8

DISABLE_DODGE
DISABLE_DODGE
16

BECOME_SPECTATOR_ON_DEATH
BECOME_SPECTATOR_ON_DEATH
32

QUOTA_MANANGED
QUOTA_MANANGED
64

RETAIN_BUILDINGS
RETAIN_BUILDINGS
128

SPAWN_WITH_FULL_CHARGE
SPAWN_WITH_FULL_CHARGE
256

ALWAYS_CRIT
ALWAYS_CRIT
512

IGNORE_ENEMIES
IGNORE_ENEMIES
1024

HOLD_FIRE_UNTIL_FULL_RELOAD
HOLD_FIRE_UNTIL_FULL_RELOAD
2048

PRIORITIZE_DEFENSE
PRIORITIZE_DEFENSE
4096

ALWAYS_FIRE_WEAPON
ALWAYS_FIRE_WEAPON
8192

TELEPORT_TO_HINT
TELEPORT_TO_HINT
16384

MINIBOSS
MINIBOSS
32768

USE_BOSS_HEALTH_BAR
USE_BOSS_HEALTH_BAR
65536

IGNORE_FLAG
IGNORE_FLAG
131072

AUTO_JUMP
AUTO_JUMP
262144

AIR_CHARGE_ONLY
AIR_CHARGE_ONLY
524288

PREFER_VACCINATOR_BULLETS
PREFER_VACCINATOR_BULLETS
1048576

PREFER_VACCINATOR_BLAST
PREFER_VACCINATOR_BLAST
2097152

PREFER_VACCINATOR_FIRE
PREFER_VACCINATOR_FIRE
4194304

BULLET_IMMUNE
BULLET_IMMUNE
8388608

BLAST_IMMUNE
BLAST_IMMUNE
16777216

FIRE_IMMUNE
FIRE_IMMUNE
33554432

PARACHUTE
PARACHUTE
67108864

PROJECTILE_SHIELD
PROJECTILE_SHIELD
134217728

TF_NAV_INVALID
TF_NAV_INVALID
0

TF_NAV_BLOCKED
TF_NAV_BLOCKED
1

TF_NAV_SPAWN_ROOM_RED
TF_NAV_SPAWN_ROOM_RED
2

TF_NAV_SPAWN_ROOM_BLUE
TF_NAV_SPAWN_ROOM_BLUE
4

TF_NAV_SPAWN_ROOM_EXIT
TF_NAV_SPAWN_ROOM_EXIT
8

TF_NAV_HAS_AMMO
TF_NAV_HAS_AMMO
16

TF_NAV_HAS_HEALTH
TF_NAV_HAS_HEALTH
32

TF_NAV_CONTROL_POINT
TF_NAV_CONTROL_POINT
64

TF_NAV_BLUE_SENTRY_DANGER
TF_NAV_BLUE_SENTRY_DANGER
128

TF_NAV_RED_SENTRY_DANGER
TF_NAV_RED_SENTRY_DANGER
256

TF_NAV_BLUE_SETUP_GATE
TF_NAV_BLUE_SETUP_GATE
2048

TF_NAV_RED_SETUP_GATE
TF_NAV_RED_SETUP_GATE
4096

TF_NAV_BLOCKED_AFTER_POINT_CAPTURE
TF_NAV_BLOCKED_AFTER_POINT_CAPTURE
8192

TF_NAV_BLOCKED_UNTIL_POINT_CAPTURE
TF_NAV_BLOCKED_UNTIL_POINT_CAPTURE
16384

TF_NAV_BLUE_ONE_WAY_DOOR
TF_NAV_BLUE_ONE_WAY_DOOR
32768

TF_NAV_RED_ONE_WAY_DOOR
TF_NAV_RED_ONE_WAY_DOOR
65536

TF_NAV_WITH_SECOND_POINT
TF_NAV_WITH_SECOND_POINT
131072

TF_NAV_WITH_THIRD_POINT
TF_NAV_WITH_THIRD_POINT
262144

TF_NAV_WITH_FOURTH_POINT
TF_NAV_WITH_FOURTH_POINT
524288

TF_NAV_WITH_FIFTH_POINT
TF_NAV_WITH_FIFTH_POINT
1048576

TF_NAV_SNIPER_SPOT
TF_NAV_SNIPER_SPOT
2097152

TF_NAV_SENTRY_SPOT
TF_NAV_SENTRY_SPOT
4194304

TF_NAV_ESCAPE_ROUTE
TF_NAV_ESCAPE_ROUTE
8388608

TF_NAV_ESCAPE_ROUTE_VISIBLE
TF_NAV_ESCAPE_ROUTE_VISIBLE
16777216

TF_NAV_NO_SPAWNING
TF_NAV_NO_SPAWNING
33554432

TF_NAV_RESCUE_CLOSET
TF_NAV_RESCUE_CLOSET
67108864

TF_NAV_BOMB_CAN_DROP_HERE
TF_NAV_BOMB_CAN_DROP_HERE
134217728

TF_NAV_DOOR_NEVER_BLOCKS
TF_NAV_DOOR_NEVER_BLOCKS
268435456

TF_NAV_DOOR_ALWAYS_BLOCKS
TF_NAV_DOOR_ALWAYS_BLOCKS
536870912

TF_NAV_UNBLOCKABLE
TF_NAV_UNBLOCKABLE
1073741824

TF_NAV_PERSISTENT_ATTRIBUTES
TF_NAV_PERSISTENT_ATTRIBUTES
1988098048